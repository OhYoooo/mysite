<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Memory Leaks in Serveral Commonly Used Programming Languages]]></title>
    <url>%2F2019%2F05%2F05%2FMemory-Leak-in-Serveral-Commonly-Used-Programming-Languages%2F</url>
    <content type="text"><![CDATA[Usually when we talk about memory leak we are actually talking about the memory leak in the heap memory. That is when an object being initialized, it will be allocated to a piece of memory in the heap and can be manipulated, after we perform some operations and terminate the whole procedure, that piece of memory is not erased but held in the heap, marked as being occupied but no reference point to it. Wiki’s Def: Memory leak is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that memory which is no longer needed is not released an object is stored in memory but cannot be accessed by the running code We usually encounter this issue in programming languages that don’t have GC (Garbage Collector), for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risk of memory leak. This is really common in C++Let’s take a look in C++. There are literally hundreds of ways that can cause the memory leak and most of them won’t be detected during compilation and even the runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the system. We all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function free( ) or delete[ ]. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn’t ever reach the line to release memory:1234567int sample( int n ) &#123; void *ptr = malloc( 16 ); if ( n ) return -1; //memory leak here free( ptr ); return 0;&#125; or:12345678class Sample &#123; public: init( ) &#123; int *n = new int; throw any_exception( ); &#125; ~init( ) &#123; delete n; &#125; private: int *n;&#125;;Sample *n = new Sample; //memory leak here The solution to the above examples is also really simple: check control flows and do remember to call the destructor before anywhere the procedure may exit. Well if you want to do it in a fancy way, you can use smart pointer alternatively:1234567class Sample &#123; public: init( ) &#123; n = std::make_shared&lt;\int&gt;( new int ) &#125; ~init( ) &#123;&#125; private: std::shared_ptr&lt;\int&gt; n;&#125;; Smart pointer helps you manage this object and if it is not referred anymore, release its memory. Can free( )/delete release everything in memory?You may think your program has a really concrete and strict control flow and you are so confident that free( ) or delete is called before the procedure exits but does it release all the unrefered memory? No! it is able to release the memory where the pointer is currently pointing to but not the pointer itself! The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to NULL, instead some random values that cannot be predicted.1234567int main( ) &#123; char *p = ( char* ) malloc( sizeof( char ) * 100 ); strcpy( p, "hello" ); free( p ); if ( p != NULL ) //doesn't prevent issue strcpy( p, "world" ); //throw error&#125; This pointer p is called wild pointer and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. To prevent it, always set the pointer to be NULL when it is not used/the memory it points to is released. Note: when you define a pointer without setting up its initial value, that pointer will also be a wild pointer and has a value of some random number (which doesn’t equal to NULL). Hence it is necessary to set the value of a pointer to be NULL if it cannot be asigned a value at the beginning. For some simple pointers, they can be reasigned to NULL to prevent wild pointer, however for a pointer referring to a hierarchical object, simply setting to NULL cannot resolve the potential issues. For example, you are using a vector in C++ :123456789vector &lt;\string&gt; vint main( ) &#123; for ( int i=0; i&lt;1000000; i++ ) v.push_back( "test" ); cout &lt;&lt; v.capacity( ) &lt;&lt; endl; //memory usage: 54M v.clear( ); cout &lt;&lt; v.capacity( ) &lt;&lt; endl; //memory usage: still 54M&#125; Even though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. clear( ) removed all its element but cannot shrink the size of the container which has already been allocated. The same thing happens to other containers such as deque. To handle that, before C++ 11, we can swap the pointer:123456int main( ) &#123; ... v.clear( ); vector&lt;/string&gt;(v).swap(v); //new a vector with the same content and swap cout &lt;&lt; v.capacity( ) &lt;&lt; endl; //memory usage: 0&#125; after C++ 11, it provides function shrink_to_fit( ) to remove the extra allocated memory. GC doesn’t avoid memory leaksIt’s not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. Java is such language which has powerful and unruly GC that can be hardly controlled (call System.gc( ) doesn’t certainly invoke GC). It helps to manage the memory in jvm, but it cannot totally avoid memory leaks in Java. There are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:12345678public class Sample &#123; Object object; public void anymethod( )&#123; object = new Object( ); ... &#125; ...&#125; If object is only used inside anymethod( ), then after stack pops anymethod( ), the lifecycle of object should also be ended. But for here, because class Sample is still proceeding and it keeps the reference to object, object cannot be collected by GC and hence leaks the memory. The solution will be either init object inside anymethod( ) (as a local varible) or set object to be null after anymethod is finished. Another case is the use of HashSet. HashSet is the implement of hash-table and it stores elements according to their different hash values. In order to push and withdraw the sample object in the HashSet, we need to override the method HashCode( ) so that the same object has the same hash vaule and being stored in the same place in HashSet. However, if we push something into the HashSet and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our HashSet to do some operations, for example delete this object from the HashSet, this object might not be found in the set and hence cannot be deleted:123456HashSet&lt;Obejct&gt; set = new HashSet&lt;Object&gt;( );Object something = new Object( );set.add( something );something.doSomethingChanges( );set.contains( something ); //this may return falseset.remove( something ); //something cannot be removed if the previous line returns false ##Python]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Java</tag>
        <tag>Python</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prefix Notation]]></title>
    <url>%2F2019%2F04%2F30%2FPrefix-Notation%2F</url>
    <content type="text"><![CDATA[12( 20 + 5 )( 16 / 4 ) Such expressions which denote procedures, are called combinations. The left and the right elements are called operands, and the element in the middle to indicate the operation is called operator. This is the most common style we have seen by now; however there is another way to construct a procedure known as prefix notation:12( + 20 5 )( / 16 4 ) Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most. conditions:1234( define ( abs x ) ( cond (( &gt; x 0 ) x ) (( = x 0 ) 0 ) (( &lt; x 0 ) ( - x )))) The general form can be expressed as: ( cond (&lt;\P1&gt; &lt;\E1&gt;) (&lt;\P2&gt; &lt;\E2&gt;) … (&lt;\Pn&gt; &lt;\En&gt;)) If none of them is evaluated to be true, then the value of the cond will be undefined. It can also be simplified by using else:123( define ( abs x ) ( cond (( &lt; x 0 ) ( - x )) ( else x ))) If there is only two predicates (the expression to be interpreted as either true of false), then it can use a special form if:1234( define ( abs x ) ( if ( &lt; x 0 ) ( - x ) x )) The general form of an if expression is: ( if &lt;\predicate&gt; &lt;\consequent&gt; &lt;\alternative&gt; ) The logic operators: ( and &lt;\E1&gt; … &lt;\En&gt; )( or &lt;\E1&gt; … &lt;\En&gt; )( not ) Then use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:12( define ( &gt;= x y ) ( or ( &gt; x y ) ( = x y )) That is all the syntax, there is no loop in a functional programming language! RecursionConsidering the factorial function: n! = n ⋅ (n-1) ⋅ (n-2) ⋅ … ⋅2⋅1 Which can be computed as: n! = n ⋅ (n-1)! If we end it up with 1!, then simply output 1. Then the factorial function can be implemented in linear recursion:1234( define ( factorial n ) ( if ( = n 1 ) 1 ( * n ( factorial ( - n 1 ))))) Linear recursion defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as Tree Recursion. The best example will be the Fibonacci series, in which each element is the sum of the previous two:12345( define ( fib n ) ( cond ( = n 0 ) 0 ) ( = n 1 ) 1 ) ( else ( + ( fib( - n 1 ) ) ( fib( - n 2 ) ))))) You may find out that this procedure is not really efficient because to compute fib( - n 1), fib( - n 2) has to be computed one more time which causes duplicated work.Therefore, instead of Tree Recursion, let’s try to convert it to be Linear Recursion. Reasign the sum of a and b to a, and the previous a to b:1234567( define ( fib n ) ( iterate 1 0 n ))( define ( iterate a b count ) ( if ( = count 0 ) b ( iterate ( + a b ) a ( - count 1 )))) LambdaInstead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides Lambda Expression: ( lambda ( &lt;\formal-param&gt; ) &lt;\body&gt; ) For instance,1( define ( Add a b ) ( + a b )) can be written as:1( define add ( lambda ( a b ) ( + a b ) ) ) And operators can also be represented by Lambda Expression:1( ( lambda ( a b ) ( + ( * a a ) ( * b b ) ) ) 2 3 ) Another use of Lambda Expression is creating local variables. An expression can be binded with a specific name by using keyword let. The above example then can be interpreted as:1234( define ( sumsqr x y ) ( let ( a ( * x x ) ) ( b ( * y y ) ) ( + a b ) ) ) Note: The scope of a variable specified by a let is only applied to the body of the let. For example, if the evalue of x is 2, then the expression:123( let ( ( x 3 ) ( y ( + x 2 ) ) ) ( * x y ) ) The value of y will be 4 as being outside of the let body, and the output will be 3 * 4 = 12. It seems like let is really similar to define; however, in the most cases, we much prefer using let and only apply define to internal procedures.]]></content>
      <tags>
        <tag>Lisp</tag>
        <tag>Scheme</tag>
        <tag>Prefix Notation</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Brief Introduce to Redux Saga]]></title>
    <url>%2F2019%2F04%2F28%2FA-Brief-Introduce-to-Redux-Saga%2F</url>
    <content type="text"><![CDATA[If you are quite experienced with redux, which is a predictable state container for JavaScript applications (Note: even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, here is the guide to dive before we start our topic.In a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with call back hell. Haven’t heard of CallBack Hell?Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a Promise (And has a type of Promise&lt;\any&gt;). In order to easily mark those async functions, after ES6 javascript provides extra modifiers async and await, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better… NO!! It doesn’t resolve anything! The core problem leads to a callback hell is the hierarchical async calls, for example you have some simple synchronous functions which are in a chain to accomplish some logics:1234a = getSomething( );b = getMore(a);c = getMoreAndMore(b);... It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:1234567getSomthing( function( a ) &#123; getMore( a, function( b ) &#123; getMoreAndMore( b, function( c ) &#123; //keep going... &#125;); &#125;);&#125;); Or you prefer ES6:12345678async function getSomething( a ) &#123; await b = ToDo( a ); return await getMore( ( b ) =&gt; &#123; return await ToDo( b ); &#125;).then( ( c ) =&gt; &#123; return await ToDo( c ); &#125;).then(...);&#125; Looks really confused? This will getting even uglier if we are using callbacks in loops. Redux ThunksBack to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:12345678910111213141516async const callAPI = ( ) =&gt; &#123; ... return response;&#125;...async const updateUI = ( ...params ) =&gt; &#123; const res = await callAPI( ); if (res.status === 200) dispatch( &#123;type: "UPDATE", isSuccess: true&#125; );&#125;...render ( ) &#123; ... this.props.isSuccess? showData( ) : showError( )&#125; This isn’t bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. Middleware is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:12345678910function logger( store ) &#123; return function wrapDispatch ( next ) &#123; return function dispatchAndLog ( action ) &#123; console.log( "dispatching.. ", action ); let result = next( action ); console.log( "new state", store.getState( ) ); return result; &#125; &#125;&#125; There are more advanced ways to add a logger. If you are interested, please refer to the offical documentation. With our middleware, the previous example can be written in a cleaner way:12345678910const callAPI = ( ) =&gt; &#123; return( ( dispatch ) =&gt; &#123; dispatch( startCallingApiAction ); actualCallApi( ).then( data =&gt; &#123; dispatch(successAction( data )); &#125;).fail( err =&gt; &#123; dispatch( failedAction(err) ); &#125;); &#125;);&#125; The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called thunk. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks. This is great, so why are we even considering saga? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in NodeJS). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to… Wait! That sounds quite familiar!! Is that the case of callback hell?? Unfortunately, a good thing plus another good feature doesn’t always end up with something better. It could be some shit as well (笑) In this case, true, this is exactly the callback hell. Redux SagaTo handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to give instructions about what to do next and we don’t care about how those instructions will be executed (Saga handles the executions).Then the thunks example can be changed as following:123456789101112export function* apiSideEffect( action ) &#123; try&#123; const data = yield call( actualCallApi ); yield put(&#123; type: "SUCCESS", payload: data &#125;); &#125; catch ( err ) &#123; yield put(&#123; type: "FAILED", payload: err &#125;); &#125;&#125;export function* apiSaga( ) &#123; yield takeEvery( "CLICK_TO_CALL_API", apiSideEffect );&#125; There are serval fucntions already being integrated in Saga: Call: the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator. Put: Instead of dispatching an action inside the generator (Don’t ever ever do that), put Returns an object with instructions for the middleware to dispatch the action. Select: Returns value from the selector function, similar with getState( ). Note: It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is mutable (Redux wants you to handle state immutably, which means return a new state instead of changing the old one). Take: It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a promise resolves. In the take case, it’ll suspend the generator until a matching action is dispatched By working with Saga, we make the side effects to be declarative rather than imperative. Declarative: describing what the program must accomplish, rather than describe how to accomplish it Imperative: consists of commands for the computer to perform, focuses on describing how a program operates In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the Saga is pulling the action by itself. An additional generator, known as watcher which contains take has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (Saga Helper):123function* watchFetchData( ) &#123; yield takeEvery( "FETCH_REQUEST", callFetchDataApi );&#125; takeEvery allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered):123function* watchFetchData( ) &#123; yield takeLatest( "FETCH_REQUEST", callFetchDataApi );&#125; However by using take, it is possible to fully control an action observation process to build complex control flow:1234567function* watchFetchData( ) &#123; while(true) &#123; const action = yield take( "FETCH_REQUEST" ); console.log( action ); yield call( callFetchDataApi, action.payload ); &#125;&#125; All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:Store:123const sagaMiddleware = createSagaMiddleware( );const store = createStore( rootReducer, appluMiddleware(sagaMiddleware) );sagaMiddleware.run( watchFetch ); Sagas:12345678910111213function* watchFetch( ): Generator&lt;*, *, *&gt; &#123; yield takeEvery( "FETCH_ACTION", callFetchAPI );&#125;function* callFetchAPI( ): Generator&lt;*, *, *&gt; &#123; try &#123; yield put(&#123; type: "FETCHING", payload: ... &#125;); const data = yield call( actualCallApi ); yield put(&#123; type: "FETCH_SUCCESS", payload: data &#125;); &#125; catch ( err ) &#123; yield put(&#123; type: "FETCH_FAILED", payload: err &#125;); &#125;&#125; Reducer:123456789101112const reducer = ( state = initState, action ) =&gt; &#123; switch( action ) &#123; case "FETCHING": return &#123; loading: true, ...state &#125;; case "FETCH_SUCCESS": return &#123; loading: false, success: true, data: action.payload, ...state &#125;; case "FETCH_FAILED": return &#123; loading: false, success: false, error: true, ...state &#125;; default: return &#123; ...state &#125;; &#125;&#125; Component:123456789101112131415class myComponent extends React.Component &#123; const mapStateToProps = ... const mapDispatchToProps = ... render( ) &#123; return ( &lt;button onClick = &#123; ( ) =&gt; this.props.dispatch(&#123; type: "FETCH_ACTION" &#125;) &#125;/&gt; &#123; this.props.loading? &lt;p&gt;Loading..&lt;/p&gt; : this.props.error? &lt;p&gt;Error!&lt;/p&gt; : &lt;p&gt;&#123;this.props.data&#125;&lt;/p&gt; &#125; ); &#125;&#125;export default connect( mapStateToProps, mapDispatchToProps )( myComponent ); For more advanced concepts, there is a well-organized Saga offical documentation you can refer to if you want to dive deeper. How to test Saga?A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.12345678910describe( "fetch work flow", ( ) =&gt; &#123; const generator = cloneableGenerator( callFetchAPI )(&#123; type: "FETCH_ACTION" &#125;); expect( generator.next( ).value ).toEqual( put(&#123; type: "FETCHING", payload: ... &#125;) ); test( "fetch success", ( ) =&gt; &#123; const clone = generator.clone( ); expect( clone.next( ).value ).toEqual( put(&#123; type: "FETCH_SUCCESS" &#125;) ); expect( generator.next( ).done ).toEqual( true ); &#125;);&#125;); In the above example, we use clone( ) to test different control flows and next( ) to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of next( ):1expect( clone.next( false ).value ).toEqual( put( fetchFailedAction( ) ) ); Saga vs ObservablesRedux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good code snippets of saga vs observables that can open your mind :D References:https://redux-saga.js.org/https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-ithttps://redux.js.org/advanced/middlewarehttps://pub.dartlang.org/packages/redux_thunkhttps://codeburst.io/how-i-test-redux-saga-fcc425cda018https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/https://redux.js.org/introduction/getting-startedhttps://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71]]></content>
      <tags>
        <tag>Redux</tag>
        <tag>Saga</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
