<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OhYoooo</title>
  
  <subtitle>coding | photography | にじげん</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ohyoooo.github.io/"/>
  <updated>2019-05-10T09:30:51.678Z</updated>
  <id>https://ohyoooo.github.io/</id>
  
  <author>
    <name>OhYoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to debug NodeJS on VS Code</title>
    <link href="https://ohyoooo.github.io/2019/05/08/How-to-debug-NodeJS-on-VS-Code/"/>
    <id>https://ohyoooo.github.io/2019/05/08/How-to-debug-NodeJS-on-VS-Code/</id>
    <published>2019-05-08T02:50:53.000Z</published>
    <updated>2019-05-10T09:30:51.678Z</updated>
    
    <content type="html"><![CDATA[<p>Here are the steps to start debug mode in VS Code:</p><ol><li><p>On the left side bar, click “debug” icon to switch to debug viewlet</p></li><li><p>On the top left, click the gear icon</p></li><li><p>Then <code>launch.json</code> will be opened in the editor</p></li><li><p>Replace the content of the file to be:</p><a id="more"></a><pre><code class="json">{ &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [     {         &quot;type&quot;: &quot;node&quot;,         &quot;request&quot;: &quot;launch&quot;,         &quot;name&quot;: &quot;Launch app.js&quot;,         &quot;program&quot;: &quot;${workspaceRoot}/app.js&quot;,         &quot;stopOnEntry&quot;: true,         &quot;args&quot;: [             &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;         ]     } ]}</code></pre></li><li><p>Replace the command line arguments to whatever you need</p></li><li><p>Start the debugger or press <code>F5</code></p></li></ol><p>You are all good to go!</p><p>If your program reads from <strong>stdin</strong>, please add a “console” attribute to the launch config:</p><pre><code class="json">{    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        {            &quot;type&quot;: &quot;node&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;name&quot;: &quot;Launch app.js&quot;,            &quot;program&quot;: &quot;${workspaceRoot}/app.js&quot;,            &quot;stopOnEntry&quot;: true,            &quot;args&quot;: [                &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;            ],            &quot;console&quot;: &quot;integratedTerminal&quot;        }    ]}</code></pre><p>If you are running the program in the <strong>terminal</strong>, you can change the content alternatively to be:</p><pre><code class="json">{    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        {            &quot;type&quot;: &quot;node&quot;,            &quot;request&quot;: &quot;attach&quot;,            &quot;name&quot;: &quot;Attach to app.js&quot;,            &quot;port&quot;: &quot;5858&quot;        }    ]}</code></pre><p>The port is the <strong>debug port</strong> and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run:</p><pre><code class="shell">node --debug-brk app.js arg1 arg2 arg3...</code></pre><blockquote><p>The <code>--debug-brk</code> lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.</p></blockquote><p>Running such command, you may encounter a problem like this:</p><pre><code>(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.     </code></pre><p>As discussed in <a href="https://github.com/Microsoft/vscode/issues/32529" target="_blank" rel="noopener">microsoft github offical repository</a>, currently there is <strong>no way</strong> to prevent this happening. The reason why using <code>--inspect --debug-brk</code> is explained <a href="https://github.com/microsoft/vscode/issues/27731" target="_blank" rel="noopener">here</a>:</p><blockquote><p>This combination of args is the only way to enter debug mode across all node versions. At some point I’ll switch to inspect-brk if we don’t want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.</p></blockquote><blockquote><p>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here are the steps to start debug mode in VS Code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;On the left side bar, click “debug” icon to switch to debug viewlet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the top left, click the gear icon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then &lt;code&gt;launch.json&lt;/code&gt; will be opened in the editor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replace the content of the file to be:&lt;/p&gt;
    
    </summary>
    
    
      <category term="VS Code" scheme="https://ohyoooo.github.io/tags/VS-Code/"/>
    
      <category term="NodeJS" scheme="https://ohyoooo.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>How to Check Open TCP/IP Ports in Mac OS X</title>
    <link href="https://ohyoooo.github.io/2019/05/06/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X/"/>
    <id>https://ohyoooo.github.io/2019/05/06/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X/</id>
    <published>2019-05-06T08:48:23.000Z</published>
    <updated>2019-05-10T09:00:12.697Z</updated>
    
    <content type="html"><![CDATA[<p>The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command <strong><code>netstat</code></strong> is useful:</p><pre><code>netstat -ap tcp | grep -i &quot;listen&quot;</code></pre><a id="more"></a><p>That will print out something like this in the console:</p><pre><code>Achive Internet connections(including servers)Proto     Recv-Q      Send-Q       Local Address       Foreign Address     (state)     tcp4      0           0            localhost.25035     *.*                  LISTEN</code></pre><p>That works but the problem is that it doesn’t show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. </p><p>Then found out that there is another command <strong><code>lsof</code></strong>:</p><pre><code>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN</code></pre><p>which prints out all the processes running in a given port with specific names:</p><pre><code>COMMAND    PID    USER    FD    TYPE    DEVICE    SIZE/OFF    NODE       NAMEsyslogd    350    root    5w    VREG    222,5     0           440818     /var/adm/messages     syslogd    350    root    6w    VREG    222,5     339098      6248       /var/log/syslogcron       353    root    cwd   VDIR    222,5     512         254550     /var -- atjobs</code></pre><p><strong><code>-n</code></strong> : No dns (no host name)<br><strong><code>-P</code></strong> : List port number instead of its name<br><strong><code>-i</code></strong> : Lists IP sockets</p><p>To view the port associated with a daemon:</p><pre><code>lsof -i -n -P | grep python</code></pre><p>If we just want to see the name:</p><pre><code>sudo lsof -i :PortNumber | grep LISTEN</code></pre><p>Get all running <strong>PID</strong> in a specific port:</p><pre><code>sudo lsof -i :PortNumber| grep LISTEN | awk &#39;{ print $2; }&#39; | head -n 2 | grep -v PID   </code></pre><p>And then we can kill all the processes:</p><pre><code>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk &#39;{ print $2; }&#39; | head -n 2 | grep -v PID)   </code></pre><p>list all commands:</p><pre><code>lsof -h</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command &lt;strong&gt;&lt;code&gt;netstat&lt;/code&gt;&lt;/strong&gt; is useful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netstat -ap tcp | grep -i &amp;quot;listen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="CLI" scheme="https://ohyoooo.github.io/tags/CLI/"/>
    
      <category term="Mac OS" scheme="https://ohyoooo.github.io/tags/Mac-OS/"/>
    
      <category term="port" scheme="https://ohyoooo.github.io/tags/port/"/>
    
  </entry>
  
  <entry>
    <title>Memory Leaks in Serveral Commonly Used Programming Languages</title>
    <link href="https://ohyoooo.github.io/2019/05/05/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages/"/>
    <id>https://ohyoooo.github.io/2019/05/05/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages/</id>
    <published>2019-05-05T06:37:22.000Z</published>
    <updated>2019-05-10T08:14:17.012Z</updated>
    
    <content type="html"><![CDATA[<p>Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<a id="more"></a></p><p>Wiki’s Def:</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Memory_leak" target="_blank" rel="noopener"><strong>Memory leak</strong></a> is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: </p><ul><li>memory which is no longer needed is not released</li><li>an object is stored in memory but cannot be accessed by the running code</li></ul></blockquote><p>We usually encounter this issue in programming languages that don’t have <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science" target="_blank" rel="noopener"><strong>GC</strong></a>, for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.<br><br></p><h2 id="This-is-really-common-in-C"><a href="#This-is-really-common-in-C" class="headerlink" title="This is really common in C++"></a>This is really common in C++</h2><p>Let’s take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won’t be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.</p><p>We all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function <strong><em>free( )</em></strong> or <strong><em>delete[ ]</em></strong>. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn’t ever reach the line to release memory:</p><pre><code class="c++">int sample(int n) {    void  *ptr = malloc(16);    if (n)        return -1; //memory leak here    free(ptr);    return 0;}</code></pre><p>or:</p><pre><code class="c++">class Sample {    public:        init() { int *n = new int;  throw any_exception(); }        ~init() { delete n; }    private:        int *n;};Sample *n = new Sample; //memory leak here</code></pre><p>The solution to the above examples is also really simple: check control flows and <strong>do remember to call the destructor before anywhere the procedure may exit</strong>. Well if you want to do it in a fancy way, you can use <strong><em>smart pointer</em></strong> alternatively:</p><pre><code class="c++">class Sample {    public:        init() { n = std::make_shared&lt;int&gt;(new int) }        ~init() {}    private:        std::shared_ptr&lt;int&gt; n;};</code></pre><p>Smart pointer helps you manage this object and if it is not referred anymore, release its memory.<br><br></p><h2 id="free-delete-is-not-enough"><a href="#free-delete-is-not-enough" class="headerlink" title="free( )/delete is not enough"></a>free( )/delete is not enough</h2><p>Now your program has such a concrete control flow that <strong>free( )</strong> or <strong>delete</strong> is called before all the possible drop out. That is great but still not enough. <strong>free( )</strong> and <strong>delete</strong> can <strong>only release the memory where the pointer is currently pointing to but not the pointer itself!</strong> The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to <strong>NULL</strong>, instead some random values that cannot be predicted.</p><pre><code class="c++">int main() {    char *p = (char*) malloc(sizeof(char) * 100);    strcpy(p, &quot;hello&quot;);    free(p);    if (p != NULL) //doesn&#39;t prevent issue        strcpy(p, &quot;world&quot;); // error}</code></pre><p>This pointer p is called <a href="https://en.wikipedia.org/wiki/Dangling_pointer" target="_blank" rel="noopener"><strong><em>dangling pointer</em></strong> or <strong><em>wild pointer</em></strong></a> and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called <strong><em>wild pointer</em></strong>, and in real life it is called <a href="https://en.wikipedia.org/wiki/Cat" target="_blank" rel="noopener"><strong>cat</strong></a>. To prevent it, we should <strong>always set the pointer to be NULL when it is not used/the memory is released</strong>.</p><p><strong><em>Note</em></strong>: when you define a pointer without setting up its initial value, that pointer will also be a <strong><em>wild pointer</em></strong> and has a value of some random number (which doesn’t equal to <strong>NULL</strong>). Hence it is necessary to set the value of a pointer to be <strong>NULL</strong> if it cannot be asigned a value at the beginning.</p><p>For some simple pointers, they can be reasigned to <strong>NULL</strong> to prevent <strong><em>wild pointer</em></strong>, however for a pointer referring to a hierarchical object, simply setting to <strong>NULL</strong> cannot resolve the potential issues. For example, you are using a <strong><em>vector</em></strong> in C++ :</p><pre><code class="c++">vector &lt;string&gt; vint main() {    for (int i=0; i&lt;1000000; i++)        v.push_back(&quot;test&quot;);    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: 54M    v.clear();    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: still 54M}</code></pre><p>Even though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. <strong>clear( )</strong> removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as <strong>deque</strong>. To handle this, before <strong>C++ 11</strong>, we can swap the pointers:</p><pre><code class="c++">int main() {    ...    v.clear();    vector&lt;string&gt;(v).swap(v); //new a vector with the same content and swap        cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: 0}</code></pre><p>after C++ 11, it provides function <strong>shrink_to_fit( )</strong> to remove the extra allocated memory.<br><br></p><h2 id="GC-doesn’t-avoid-memory-leaks"><a href="#GC-doesn’t-avoid-memory-leaks" class="headerlink" title="GC doesn’t avoid memory leaks"></a>GC doesn’t avoid memory leaks</h2><p>It’s not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. <strong>Java</strong> is such language which has powerful and unruly GC that can be hardly controlled (call <strong>System.gc( )</strong> doesn’t certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.</p><p>There are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:</p><pre><code class="java">public class Sample {    Object object;    public void anymethod(){        object = new Object();        ...    }    ...}</code></pre><p>If <strong><em>object</em></strong> is only used inside <strong><em>anymethod( )</em></strong>, then after stack pops <strong><em>anymethod( )</em></strong>, the lifecycle of <strong><em>object</em></strong> should also be ended. But for here, because class <strong><em>Sample</em></strong> is still proceeding and keeps the reference of <strong><em>object</em></strong>, <strong><em>object</em></strong> cannot be collected by GC and hence leaks the memory. The solution will be either init <strong><em>object</em></strong> inside <strong><em>anymethod( )</em></strong> (as a local varible) or set <strong><em>object</em></strong> to be <strong><em>null</em></strong> after <strong><em>anymethod</em></strong> is finished.</p><p>Another case is the use of <strong><em>HashSet</em></strong>. <strong><em>HashSet</em></strong> is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the <strong><em>HashSet</em></strong>, we need to override the method <strong><em>HashCode( )</em></strong> so that the same object has the same hash vaule and being stored in the same place in <strong><em>HashSet</em></strong>. However, if we push something into the <strong><em>HashSet</em></strong> and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our <strong><em>HashSet</em></strong> to do some operations, for example delete this object from the <strong><em>HashSet</em></strong>, this object might not be found in the set and hence cannot be deleted:</p><pre><code class="java">    HashSet&lt;Obejct&gt; set = new HashSet&lt;Object&gt;();    Object something = new Object();    set.add(something);    something.doSomethingChanges();    set.contains(something);  //this may return false    set.remove(something);  //&#39;something&#39; cannot be removed if the previous line returns false      </code></pre><p><br></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.
    
    </summary>
    
    
      <category term="NodeJS" scheme="https://ohyoooo.github.io/tags/NodeJS/"/>
    
      <category term="C++" scheme="https://ohyoooo.github.io/tags/C/"/>
    
      <category term="Java" scheme="https://ohyoooo.github.io/tags/Java/"/>
    
      <category term="Python" scheme="https://ohyoooo.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Prefix Notation</title>
    <link href="https://ohyoooo.github.io/2019/04/30/Prefix-Notation/"/>
    <id>https://ohyoooo.github.io/2019/04/30/Prefix-Notation/</id>
    <published>2019-04-30T02:11:21.000Z</published>
    <updated>2019-05-10T08:46:16.855Z</updated>
    
    <content type="html"><![CDATA[<pre><code class="python">( 20 + 5 )( 16 / 4 )</code></pre><p>Such expressions which denote procedures, are called <strong><em>combinations</em></strong>. The left and the right elements are called <strong><em>operands</em></strong>, and the element in the middle to indicate the operation is called <strong><em>operator</em></strong>. This is the most common style we have seen by now; however there is another way to construct a procedure known as <strong><em>prefix notation</em></strong>:</p><pre><code class="python">( + 20 5 )( / 16 4 )</code></pre><p>Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<a id="more"></a></p><p>conditions:</p><pre><code class="python">( define ( abs x )    ( cond (( &gt; x 0 ) x )           (( = x 0 ) 0 )           (( &lt; x 0 ) ( - x ))))</code></pre><p>The general form can be expressed as:</p><blockquote><p>( cond (&lt;\P1&gt; &lt;\E1&gt;)<br>      (&lt;\P2&gt; &lt;\E2&gt;)<br>           …<br>      (&lt;\Pn&gt; &lt;\En&gt;))</p></blockquote><p>If none of them is evaluated to be <strong>true</strong>, then the value of the <strong>cond</strong> will be <strong>undefined</strong>. It can also be simplified by using <strong><em>else</em></strong>:</p><pre><code class="python">( define ( abs x )    ( cond (( &lt; x 0 ) ( - x ))           ( else  x )))</code></pre><p>If there is only two <strong><em>predicates</em></strong> (the expression to be interpreted as either true of false), then it can use a special form <strong><em>if</em></strong>:</p><pre><code class="python">( define ( abs x )    ( if ( &lt; x 0 )         ( - x )         x ))</code></pre><p>The general form of an <strong><em>if</em></strong> expression is:</p><blockquote><p>( if &lt;\predicate&gt; &lt;\consequent&gt; &lt;\alternative&gt; )</p></blockquote><p>The logic operators:</p><blockquote><p>( and &lt;\E1&gt; … &lt;\En&gt; )<br>( or &lt;\E1&gt; … &lt;\En&gt; )<br>( not <e> )</e></p></blockquote><p>Then use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:</p><pre><code class="python">( define ( &gt;= x y )    ( or ( &gt; x y ) ( = x y ))</code></pre><p>That is all the syntax, <strong>there is no loop in a functional programming language!</strong><br><br></p><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>Considering the factorial function:</p><blockquote><p>n! = n ⋅ (n-1) ⋅ (n-2) ⋅ … ⋅2⋅1</p></blockquote><p>Which can be computed as:</p><blockquote><p>n! = n ⋅ (n-1)!</p></blockquote><p>If we end it up with <strong>1!</strong>, then simply output <strong>1</strong>. Then the factorial function can be implemented in <strong><em>linear recursion</em></strong>:</p><pre><code class="python">( define ( factorial n )    ( if ( = n 1 )        1        ( * n ( factorial ( - n 1 )))))</code></pre><p><strong><em>Linear recursion</em></strong> defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as <strong><em>Tree Recursion</em></strong>. The best example will be the Fibonacci series, in which each element is the sum of the previous two:</p><pre><code class="python">( define ( fib n )    ( cond ( = n 0 ) 0 )           ( = n 1 ) 1 )           ( else ( + ( fib ( - n 1 ) )                      ( fib ( - n 2 ) )))))</code></pre><p>You may find out that this procedure is not really efficient because to compute <strong>fib( - n 1)</strong>, <strong>fib( - n 2)</strong> has to be computed one more time which causes duplicated work.<br><img src="../images/treeRecursion.png" alt="Tree Recursion"><br>Therefore, instead of <strong><em>Tree Recursion</em></strong>, let’s try to convert it to be <strong><em>Linear Recursion</em></strong>. Reasign the sum of <strong>a</strong> and <strong>b</strong> to <strong>a</strong>, and the previous <strong>a</strong> to <strong>b</strong>:</p><pre><code class="python">( define ( fib n )    ( iterate 1 0 n ))( define ( iterate a b count )    ( if ( = count 0 )        b        ( iterate ( + a b ) a ( - count 1 ))))</code></pre><p><br></p><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>Instead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides <strong><em>Lambda Expression</em></strong>:</p><blockquote><p>( lambda ( &lt;\formal-param&gt; ) &lt;\body&gt; )</p></blockquote><p>For instance,</p><pre><code class="python">( define ( Add a b ) ( + a b ))</code></pre><p>can be written as:</p><pre><code class="python">( define add ( lambda ( a b ) ( + a b )))</code></pre><p>And operators can also be represented by <strong><em>Lambda Expression</em></strong>:</p><pre><code class="python">(( lambda ( a b ) ( + ( * a a ) ( * b b ))) 2 3 )</code></pre><p>Another use of <strong><em>Lambda Expression</em></strong> is creating local variables. An expression can be binded with a specific name by using keyword <strong><em>let</em></strong>. The above example then can be interpreted as:</p><pre><code class="python">( define ( sumsqr x y )    ( let ( a ( * x x ))          ( b ( * y y ))        ( + a b )))</code></pre><p><strong><em>Note:</em></strong> The scope of a variable specified by a <strong><em>let</em></strong> is only applied to the <strong>body</strong> of the <strong><em>let</em></strong>. For example, if the evalue of <strong>x</strong> is <strong>2</strong>, then the expression:</p><pre><code class="python">( let (( x 3 )        ( y ( + x 2 )))    ( * x y ))</code></pre><p>The value of <strong>y</strong> will be <strong>4</strong> as being outside of the <strong>let</strong> body, and the output will be <strong>3 * 4 = 12</strong>. It seems like <strong><em>let</em></strong> is really similar to <strong><em>define</em></strong>; however, in the most cases, we much prefer using <strong><em>let</em></strong> and only apply <strong><em>define</em></strong> to <strong>internal procedures</strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code class=&quot;python&quot;&gt;( 20 + 5 )
( 16 / 4 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such expressions which denote procedures, are called &lt;strong&gt;&lt;em&gt;combinations&lt;/em&gt;&lt;/strong&gt;. The left and the right elements are called &lt;strong&gt;&lt;em&gt;operands&lt;/em&gt;&lt;/strong&gt;, and the element in the middle to indicate the operation is called &lt;strong&gt;&lt;em&gt;operator&lt;/em&gt;&lt;/strong&gt;. This is the most common style we have seen by now; however there is another way to construct a procedure known as &lt;strong&gt;&lt;em&gt;prefix notation&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;( + 20 5 )
( / 16 4 )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.
    
    </summary>
    
    
      <category term="Lisp" scheme="https://ohyoooo.github.io/tags/Lisp/"/>
    
      <category term="Scheme" scheme="https://ohyoooo.github.io/tags/Scheme/"/>
    
      <category term="Prefix Notation" scheme="https://ohyoooo.github.io/tags/Prefix-Notation/"/>
    
      <category term="Functional Programming" scheme="https://ohyoooo.github.io/tags/Functional-Programming/"/>
    
  </entry>
  
  <entry>
    <title>A Brief Introduce to Redux Saga</title>
    <link href="https://ohyoooo.github.io/2019/04/28/A-Brief-Introduce-to-Redux-Saga/"/>
    <id>https://ohyoooo.github.io/2019/04/28/A-Brief-Introduce-to-Redux-Saga/</id>
    <published>2019-04-28T05:35:50.000Z</published>
    <updated>2019-05-10T08:40:12.520Z</updated>
    
    <content type="html"><![CDATA[<p>If you are quite experienced with redux, which is a predictable state container for JavaScript applications (<strong>Note:</strong> even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, <a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="noopener">here</a> is the guide to dive before we start our topic.<a id="more"></a></p><p>In a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with <strong><em>call back hell</em></strong>.<br><br></p><h2 id="Haven’t-heard-of-CallBack-Hell"><a href="#Haven’t-heard-of-CallBack-Hell" class="headerlink" title="Haven’t heard of CallBack Hell?"></a><strong>Haven’t heard of <em>CallBack Hell</em>?</strong></h2><p>Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a <strong><em>Promise</em></strong> (And has a type of <strong><em>Promise&lt;\any&gt;</em></strong>). In order to easily mark those async functions, after <strong><em>ES6</em></strong> javascript provides extra modifiers <strong><em>async</em></strong> and <strong><em>await</em></strong>, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better… <del><strong>NO!! It doesn’t resolve anything!</strong></del> The core problem leads to a callback hell is the hierarchical async calls, for example</p><p>you have some simple synchronous functions which are in a chain to accomplish some logics:</p><pre><code class="javascript">a = getSomething();b = getMore(a);c = getMoreAndMore(b);...</code></pre><p>It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</p><pre><code class="javascript">getSomthing(function(a) {    getMore(a, function(b) {        getMoreAndMore(b, function(c) {            //keep going...        });    });});</code></pre><p>Or you prefer <strong><em>ES6</em></strong>:</p><pre><code class="javascript">async function getSomething(a) {    await b = ToDo(a);    return await getMore((b) =&gt; {        return await ToDo(b);    }).then((c) =&gt; {        return await ToDo(c);    }).then(...);}</code></pre><p>Looks really confused? This will getting even uglier if we are using callbacks in loops.<br><br></p><h2 id="Redux-Thunks"><a href="#Redux-Thunks" class="headerlink" title="Redux Thunks"></a>Redux Thunks</h2><p>Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</p><pre><code class="javascript">async const callAPI = () =&gt; {    ...    return response;};...async const updateUI = (...params) =&gt; {    const res = await callAPI();    if (res.status === 200)        dispatch({type: &quot;UPDATE&quot;, isSuccess: true});};...render({    ...    this.props.isSuccess?        showData() : showError()});</code></pre><p>This isn’t bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. <strong><em>Middleware</em></strong> is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</p><pre><code class="javascript">function logger(store) {    return function wrapDispatch (next) {        return function dispatchAndLog (action) {            console.log(&quot;dispatching.. &quot;, action);            let result = next(action);            console.log(&quot;new state&quot;, store.getState());            return result;        }    }}</code></pre><p>There are more advanced ways to add a logger. If you are interested, please refer to the <a href="https://redux.js.org/advanced/middleware" target="_blank" rel="noopener">offical documentation</a>. With our middleware, the previous example can be written in a cleaner way:</p><pre><code class="javascript">const callAPI = () =&gt; {    return((dispatch) =&gt; {        dispatch(startCallingApiAction);        actualCallApi().then(data =&gt; {            dispatch(successAction(data));        }).fail(err =&gt; {            dispatch(failedAction(err));        });    });};</code></pre><p>The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called <strong><em>thunk</em></strong>. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</p><p>This is great, so why are we even considering <strong><em>saga</em></strong>? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in <strong><em>NodeJS</em></strong>). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to… <strong>Wait! That sounds quite familiar!! Is that the case of callback hell??</strong> Unfortunately, a good thing plus another good feature doesn’t always end up with something better. <del>It could be some shit as well (笑)</del> In this case, true, this is exactly the callback hell.<br><br></p><h2 id="Redux-Saga"><a href="#Redux-Saga" class="headerlink" title="Redux Saga"></a>Redux Saga</h2><p>To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to <strong>give instructions about what to do next</strong> and we don’t care about how those instructions will be executed (Saga handles the executions).</p><p>Then the thunks example can be changed as following:</p><pre><code class="javascript">export function* apiSideEffect(action) {    try{        const data = yield call(actualCallApi);        yield put({ type:&quot;SUCCESS&quot;, payload: data });    } catch(err) {        yield put({ type:&quot;FAILED&quot;, payload: err });    }}export function* apiSaga() {    yield takeEvery(&quot;CLICK_TO_CALL_API&quot;, apiSideEffect);}</code></pre><p>There are serval fucntions already being integrated in Saga:</p><blockquote><p><strong><em>Call:</em></strong> the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.</p></blockquote><blockquote><p><strong><em>Put:</em></strong> Instead of dispatching an action inside the generator (Don’t ever ever do that), <strong><em>put</em></strong> Returns an object with instructions for the middleware to dispatch the action.</p></blockquote><blockquote><p><strong><em>Select:</em></strong> Returns value from the selector function, similar with <strong>getState( )</strong>. <strong><em>Note:</em></strong> It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is <strong>mutable</strong> (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).</p></blockquote><blockquote><p><strong><em>Take:</em></strong> It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a <strong><em>promise</em></strong> resolves. In the take case, it’ll suspend the generator until a matching action is dispatched</p></blockquote><p>By working with Saga, we make the side effects to be <strong><em>declarative</em></strong> rather than <strong><em>imperative</em></strong>.</p><blockquote><p><strong><em>Declarative:</em></strong> describing what the program must accomplish, rather than describe how to accomplish it</p></blockquote><blockquote><p><strong><em>Imperative:</em></strong> consists of commands for the computer to perform, focuses on describing how a program operates</p></blockquote><p>In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the <strong>Saga is pulling the action by itself</strong>. An additional generator, known as <strong><em>watcher</em></strong> which contains <strong><em>take</em></strong> has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (<strong><em>Saga Helper</em></strong>):</p><pre><code class="javascript">function* watchFetchData() {    yield takeEvery(&quot;FETCH_REQUEST&quot;, callFetchDataApi);}</code></pre><p><strong><em>takeEvery</em></strong> allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered</p><pre><code class="javascript">function* watchFetchData() {    yield takeLatest(&quot;FETCH_REQUEST&quot;, callFetchDataApi);}</code></pre><p>However by using <strong><em>take</em></strong>, it is possible to fully control an action observation process to build complex control flow:</p><pre><code class="javascript">function* watchFetchData() {    while(true) {        const action = yield take(&quot;FETCH_REQUEST&quot;);        console.log(action);        yield call(callFetchDataApi, action.payload);    }}</code></pre><p>All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:<br>Store:</p><pre><code class="javascript">const sagaMiddleware = createSagaMiddleware();const store = createStore(rootReducer, appluMiddleware(sagaMiddleware));    sagaMiddleware.run(watchFetch);</code></pre><p>Sagas:</p><pre><code class="javascript">function* watchFetch(): Generator&lt;*, *, *&gt; {    yield takeEvery(&quot;FETCH_ACTION&quot;, callFetchAPI);}function* callFetchAPI(): Generator&lt;*, *, *&gt; {    try {        yield put({ type: &quot;FETCHING&quot;, payload: ... });        const data = yield call(actualCallApi);        yield put({ type: &quot;FETCH_SUCCESS&quot;, payload: data });    } catch(err) {        yield put({ type: &quot;FETCH_FAILED&quot;, payload: err });    }}</code></pre><p>Reducer:</p><pre><code class="javascript">const reducer = (state = initState, action) =&gt; {    switch(action) {        case &quot;FETCHING&quot;:            return { loading: true, ...state };        case &quot;FETCH_SUCCESS&quot;:            return { loading: false, success: true, data: action.payload, ...state };           case &quot;FETCH_FAILED&quot;:            return { loading: false, success: false, error: true, ...state };        default:            return { ...state };    }};</code></pre><p>Component:</p><pre><code class="javascript">class myComponent extends React.Component {    const mapStateToProps = ...    const mapDispatchToProps = ...    render() {        return (            &lt;button onClick = { () =&gt; this.props.dispatch({type: &quot;FETCH_ACTION&quot;}) }/&gt;               {                this.props.loading?                    &lt;p&gt;Loading..&lt;/p&gt; : this.props.error?                        &lt;p&gt;Error!&lt;/p&gt; : &lt;p&gt;{this.props.data}&lt;/p&gt;            }        );    }}export default connect(mapStateToProps, mapDispatchToProps)(myComponent);</code></pre><p>For more advanced concepts, there is a well-organized <a href="https://redux-saga.js.org/docs/advanced/" target="_blank" rel="noopener">Saga offical documentation</a> you can refer to if you want to dive deeper.<br><br></p><h2 id="How-to-test-Saga"><a href="#How-to-test-Saga" class="headerlink" title="How to test Saga?"></a>How to test Saga?</h2><p>A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</p><pre><code class="javascript">describe(&quot;fetch work flow&quot;, () =&gt; {    const generator = cloneableGenerator(callFetchAPI)({ type: &quot;FETCH_ACTION&quot; });    expect(generator.next().value).toEqual(put({ type: &quot;FETCHING&quot;, payload: ... }));        test(&quot;fetch success&quot;, () =&gt; {        const clone = generator.clone();        expect(clone.next().value).toEqual(put({ type: &quot;FETCH_SUCCESS&quot; }));        expect(generator.next().done).toEqual(true);    });});</code></pre><p>In the above example, we use <strong>clone( )</strong> to test different control flows and <strong>next( )</strong> to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of <strong>next( )</strong>:</p><pre><code class="javascript">expect(clone.next(false).value).toEqual( put(fetchFailedAction()) );      </code></pre><p><br></p><h2 id="Saga-vs-Observables"><a href="#Saga-vs-Observables" class="headerlink" title="Saga vs Observables"></a>Saga vs Observables</h2><p>Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good <a href="https://hackmd.io/s/H1xLHUQ8e" target="_blank" rel="noopener">code snippets</a> of saga vs observables that can open your mind :D</p><p><br><br><br></p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p><a href="https://redux-saga.js.org/" target="_blank" rel="noopener">https://redux-saga.js.org/</a><br><a href="https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it" target="_blank" rel="noopener">https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it</a><br><a href="https://redux.js.org/advanced/middleware" target="_blank" rel="noopener">https://redux.js.org/advanced/middleware</a><br><a href="https://pub.dartlang.org/packages/redux_thunk" target="_blank" rel="noopener">https://pub.dartlang.org/packages/redux_thunk</a><br><a href="https://codeburst.io/how-i-test-redux-saga-fcc425cda018" target="_blank" rel="noopener">https://codeburst.io/how-i-test-redux-saga-fcc425cda018</a><br><a href="https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1" target="_blank" rel="noopener">https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1</a><br><a href="https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/" target="_blank" rel="noopener">https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/</a><br><a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="noopener">https://redux.js.org/introduction/getting-started</a><br><a href="https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71" target="_blank" rel="noopener">https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you are quite experienced with redux, which is a predictable state container for JavaScript applications (&lt;strong&gt;Note:&lt;/strong&gt; even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, &lt;a href=&quot;https://redux.js.org/introduction/getting-started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; is the guide to dive before we start our topic.
    
    </summary>
    
    
      <category term="Redux" scheme="https://ohyoooo.github.io/tags/Redux/"/>
    
      <category term="Saga" scheme="https://ohyoooo.github.io/tags/Saga/"/>
    
      <category term="React" scheme="https://ohyoooo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ohyoooo.github.io/2019/04/27/hello-world/"/>
    <id>https://ohyoooo.github.io/2019/04/27/hello-world/</id>
    <published>2019-04-27T07:51:40.239Z</published>
    <updated>2019-04-29T07:18:13.367Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.
    
    </summary>
    
    
  </entry>
  
</feed>
