{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/Memory-Leaks.JPG","path":"images/Memory-Leaks.JPG","modified":1,"renderable":0},{"_id":"source/images/cli.JPG","path":"images/cli.JPG","modified":1,"renderable":0},{"_id":"source/images/treeRecursion.JPG","path":"images/treeRecursion.JPG","modified":1,"renderable":0},{"_id":"source/images/redux-saga.JPG","path":"images/redux-saga.JPG","modified":1,"renderable":0},{"_id":"source/images/treeRecursion11.JPG","path":"images/treeRecursion11.JPG","modified":1,"renderable":0},{"_id":"source/images/vscode.JPG","path":"images/vscode.JPG","modified":1,"renderable":0},{"_id":"themes/ocean/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/images/lisp.JPG","path":"images/lisp.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0504.JPG","path":"images/IMG_0504.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0606.JPG","path":"images/IMG_0606.JPG","modified":1,"renderable":0},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/hexo.svg","path":"images/hexo.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/hexo-inverted.svg","path":"images/hexo-inverted.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/searchfooter.png","path":"images/searchfooter.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","path":"images/ocean/overlay-hero.png","modified":1,"renderable":1},{"_id":"source/images/IMG_2148.JPG","path":"images/IMG_2148.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_1891.JPG","path":"images/IMG_1891.JPG","modified":1,"renderable":0},{"_id":"source/images/futako010010.JPG","path":"images/futako010010.JPG","modified":1,"renderable":0},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":1,"renderable":1},{"_id":"source/images/IMG_0874.JPG","path":"images/IMG_0874.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_4200.JPG","path":"images/IMG_4200.JPG","modified":1,"renderable":0},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":1,"renderable":1},{"_id":"source/images/IMG_0444.JPG","path":"images/IMG_0444.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_4201.JPG","path":"images/IMG_4201.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0875.JPG","path":"images/IMG_0875.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_1333.JPG","path":"images/IMG_1333.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0226.JPG","path":"images/IMG_0226.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0518.JPG","path":"images/IMG_0518.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2194.JPG","path":"images/IMG_2194.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2221.JPG","path":"images/IMG_2221.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0637.JPG","path":"images/IMG_0637.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2151.JPG","path":"images/IMG_2151.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0222.JPG","path":"images/IMG_0222.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2192.JPG","path":"images/IMG_2192.JPG","modified":1,"renderable":0},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","path":"images/ocean/ocean.ogv","modified":1,"renderable":1},{"_id":"source/images/IMG_0873.JPG","path":"images/IMG_0873.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2209.JPG","path":"images/IMG_2209.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_1331.JPG","path":"images/IMG_1331.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2195.JPG","path":"images/IMG_2195.JPG","modified":1,"renderable":0},{"_id":"source/images/futako010029.JPG","path":"images/futako010029.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0077.JPG","path":"images/IMG_0077.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0605.JPG","path":"images/IMG_0605.JPG","modified":1,"renderable":0},{"_id":"source/images/futako010013.JPG","path":"images/futako010013.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_2200.JPG","path":"images/IMG_2200.JPG","modified":1,"renderable":0},{"_id":"source/images/IMG_0519.JPG","path":"images/IMG_0519.JPG","modified":1,"renderable":0},{"_id":"source/images/futako010041.JPG","path":"images/futako010041.JPG","modified":1,"renderable":0},{"_id":"themes/ocean/source/images/ocean/ocean.png","path":"images/ocean/ocean.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.webm","path":"images/ocean/ocean.webm","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","path":"images/ocean/ocean.mp4","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ac6410f8fc9e742ade10c208ce5113bea9136db1","modified":1557390070903},{"_id":"themes/ocean/.DS_Store","hash":"f08403479608f818fca2bb5936636cca8b2c5da8","modified":1556683233172},{"_id":"themes/ocean/README.md","hash":"0a5f44c3b9f6757ffdb3576f57afa53f203ea985","modified":1556351608519},{"_id":"themes/ocean/_config.yml","hash":"47b265d984ab07f28744025ce97efda24a257675","modified":1556620349317},{"_id":"themes/ocean/package.json","hash":"b993176f8c35bc3ab9dbd8642ec6cd125fcb447e","modified":1556351608530},{"_id":"source/_posts/A-Brief-Introduce-to-Redux-Saga.md","hash":"cf7e821320d98d2742c679352b44865d4938c546","modified":1556522277585},{"_id":"source/_posts/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages.md","hash":"b2d9f70bec80075d9854356090a4aa2a7382edf5","modified":1557127541838},{"_id":"source/_posts/How-to-debug-NodeJS-on-VS-Code.md","hash":"dc4502c7d043be71f885a635e246410b545fe08a","modified":1557390103107},{"_id":"source/_posts/hello-world.md","hash":"b28643c0f92783a2204f2bffd1031a6ecae5b0d2","modified":1556522293367},{"_id":"source/_posts/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X.md","hash":"20026113a7848e2960779f3a11e5c8dec5c51137","modified":1557136107090},{"_id":"source/_posts/Prefix-Notation.md","hash":"631e0d1a804c60c67bf5d06d626259ff63a24b12","modified":1557038335791},{"_id":"source/about/index.md","hash":"d91209004b506f3aa81f86f94a6482e1138aaeac","modified":1556364296199},{"_id":"source/images/.DS_Store","hash":"d144c4ebaa2edb901642095d308fb14694d35727","modified":1557189120846},{"_id":"source/gallery/index.md","hash":"81878942167add6fa3ed58c994176e6573a859d8","modified":1556357667537},{"_id":"source/images/Memory-Leaks.JPG","hash":"88744198f42bcd6b31e70e82f798645cb453e2e1","modified":1557038733681},{"_id":"source/images/cli.JPG","hash":"9dc4dd69083df96b774dee488bb42cfe7dc35922","modified":1557132969055},{"_id":"source/images/treeRecursion.JPG","hash":"a09da0ab4779d513b081eeacff2ec0a80d78576a","modified":1556595372000},{"_id":"source/images/redux-saga.JPG","hash":"246254876cfd63cdbb5d31523d02d078daecf40e","modified":1556430638342},{"_id":"source/images/treeRecursion11.JPG","hash":"b3cb61f46ddff0067dc8ebe5357d21a37aeaecb7","modified":1556619951956},{"_id":"source/images/vscode.JPG","hash":"7d97031e400f3b8ad192de733d9711f52a7f80ad","modified":1557390022434},{"_id":"themes/ocean/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1556351608519},{"_id":"themes/ocean/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1556351608520},{"_id":"themes/ocean/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1556351608520},{"_id":"themes/ocean/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1556351608519},{"_id":"themes/ocean/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1556351608520},{"_id":"themes/ocean/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1556351608520},{"_id":"themes/ocean/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1556351608521},{"_id":"themes/ocean/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1556351608520},{"_id":"themes/ocean/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1556351608521},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1556351608521},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1556351608521},{"_id":"themes/ocean/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1556351608521},{"_id":"themes/ocean/layout/.DS_Store","hash":"acf7fef488db0d4e3170f1ce64478a72a6dd681a","modified":1556362284452},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1556351608528},{"_id":"themes/ocean/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1556351608528},{"_id":"themes/ocean/layout/index.ejs","hash":"dead30ea8014348cef977dcb44eea0ae0f0601c5","modified":1556351608529},{"_id":"themes/ocean/layout/layout.ejs","hash":"9ce598d82d973518e255fe64019b8523a2d65796","modified":1556351608529},{"_id":"themes/ocean/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1556351608529},{"_id":"themes/ocean/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1556351608530},{"_id":"themes/ocean/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1556351608530},{"_id":"themes/ocean/source/.DS_Store","hash":"6edbaaa4b4a2c5c04782739c8907c2604ffb9e98","modified":1556683233170},{"_id":"themes/ocean/source/404.html","hash":"fe1497ac9b2d47f4e3e880946e22fbfe3db7496e","modified":1556351608533},{"_id":"themes/ocean/source/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1556351608546},{"_id":"source/images/lisp.JPG","hash":"5f09d56757170819589f35eed3cb8397dea6c222","modified":1556618649935},{"_id":"source/images/IMG_0504.JPG","hash":"bdd3c4dcc7e813685793a2226728b0c60fb653b9","modified":1556355556624},{"_id":"source/images/IMG_0606.JPG","hash":"1aa6473addf50803fef60b42e90cdb2d71113db8","modified":1556355554985},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"9b985a9e230b1e0243b9ce2ec79cdb07f4c8e007","modified":1556353600250},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"6c6cf7d1acb6548396183ce4836f1f9a3a1a4d10","modified":1556351608523},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"8f46a5a73c95827d812ca3e90ebb0ad8f16fb7b2","modified":1556351608522},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"875408862fa6048e08fe04cfb1864af2ae4ef81a","modified":1556619274055},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"b8174a6094f859ce82e8af2f1b30e1ce03fd0eb2","modified":1556351608524},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"be76e0cbc4ecd9171972fabed6830cb592b5b343","modified":1556351608524},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"259129dfc8a952f81be494751982dc3d2c763037","modified":1556360249353},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"6e5fadba43415d4605593674591cce822b6fb8bf","modified":1556351608528},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"70176e319a1558c8b61abecfedbbc08b258e7beb","modified":1556351608528},{"_id":"themes/ocean/source/css/404.styl","hash":"25bf5e29c00d57f90f30673912e13478e47db69c","modified":1556514756850},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1556351608532},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"8494f0e869411781264868f08eda62fd838e0cee","modified":1556351608534},{"_id":"themes/ocean/source/css/_extend.styl","hash":"1fb5b31668579d177b340e03a78136bc04e22a36","modified":1556513611196},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"fbe77673e6f8c714a90daabba6c94cf491650887","modified":1556351608535},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1556351608535},{"_id":"themes/ocean/source/css/_variables.styl","hash":"a91de5d66d44a31b7ea7b2e918e47f9d7c662434","modified":1556514844779},{"_id":"themes/ocean/source/css/style.styl","hash":"e01e1b4e5350c162f3bec32dc5befbad7b7914ec","modified":1556351608544},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1556351608545},{"_id":"themes/ocean/source/images/.DS_Store","hash":"758d8ae8486197e8ad1b0dc53b5b7ce7ad19c6db","modified":1556701955107},{"_id":"themes/ocean/source/images/hexo.svg","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1556351608549},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"525309ea3c7360f83d1d9df6d04c256d7171950d","modified":1556351608548},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1556351608607},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1556351608608},{"_id":"themes/ocean/source/js/ocean.js","hash":"3457be62843930ad58997cd6fd387783285242c7","modified":1556351608609},{"_id":"themes/ocean/source/images/searchfooter.png","hash":"519b76e799d2a45a456c3a90fb1308cdb011b352","modified":1556683156662},{"_id":"themes/ocean/source/js/search.js","hash":"88fa5c780f9093f70d6e3066cca0d6165a8364b4","modified":1556683974980},{"_id":"themes/ocean/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1556351608609},{"_id":"themes/ocean/source/css/_partial/comment.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556351608536},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1556351608546},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1556351608608},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"dcfea9a328f5e1d90758ac71d7d7555b31b93bcb","modified":1556351608525},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"88462d160479cc3f0cc58efcd888fbaf22b0d4d8","modified":1556351608525},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1556351608525},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1556351608526},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1556351608526},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"e36d149ad83c3a52562dbef61a0083957eb24578","modified":1556351608526},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1556351608527},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1556351608527},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1556351608527},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"f8c9cb35d8d1975aa3b457d9a92f38c462e97732","modified":1556351608527},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1556351608535},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"8aefdcf2d542ad839018c2c58511e3318a38490d","modified":1556351608536},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"93905de0339f3e831a383739bdc477c29c1914c4","modified":1556351608536},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1556351608537},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"7bf289013d304505984b251be725b49165a694fd","modified":1556351608536},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"24779cbce1012d4f35ffc6b3ec0830cbc2ea3b3f","modified":1556351608537},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1556351608537},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1556351608537},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"c6e99fd23056fb01177aeefbc5dd4a8e88cf8f81","modified":1556351608538},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"47a8a98aaaf7db4d2d89b8c41b43394d1cc92849","modified":1556351608538},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"087f08e0ce9aca48e096dabca6eed2368b5bcd6b","modified":1556351608538},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1556351608539},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"fb32443da45975567ebae8683c18f0cda0aa0a3d","modified":1556351608539},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"6c68a00bcd69853711db48f5fdd02544d8a6152e","modified":1556351608539},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"e326918ba276ee332d0598d8193ccd8353e7d916","modified":1556351608540},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"a81fe253dae61b114d9cdb15673d1588aae35285","modified":1556513307655},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1556351608540},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"69fcb0c9adb45f592838c3babc58d3490f413db2","modified":1556351608541},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1556351608542},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1556351608544},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1556351608543},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1556351608544},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1556351608606},{"_id":"source/images/IMG_2148.JPG","hash":"9f08338b4842b7853a7132a098c0d2440afc8fd8","modified":1556356922750},{"_id":"source/images/IMG_1891.JPG","hash":"676dcaf369929ef6b3d9ec8e8f7cf088c8ecdae4","modified":1556357445197},{"_id":"source/images/futako010010.JPG","hash":"6f13fba723f69932261d8db10e2af818aa52dac4","modified":1556356904280},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1556351608543},{"_id":"source/images/IMG_0874.JPG","hash":"09ef9b6fe4b1f11b2adc52865f98a66f79bdbe58","modified":1556357450715},{"_id":"source/images/IMG_4200.JPG","hash":"b66b09b2026648ca9bff1b9d7f3adbbe0f5a0413","modified":1556357449003},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1556351608548},{"_id":"source/images/IMG_0444.JPG","hash":"a07f11160a4ff6ebfdbc4faf25868ea8c3f18b71","modified":1556356906367},{"_id":"source/images/IMG_4201.JPG","hash":"df6d4734798dbbe1b22e82864ab38739fecce8d3","modified":1556357442956},{"_id":"source/images/IMG_0875.JPG","hash":"de4c08db2a5751996b99fbc8dfded7c53da935f9","modified":1556357449935},{"_id":"source/images/IMG_1333.JPG","hash":"176423f03fdb3bf5e56643027cf01005a5eb2a74","modified":1556357447915},{"_id":"source/images/IMG_0226.JPG","hash":"08238c849695d9214b2f5b8d807a9f5c22d805cd","modified":1556356907611},{"_id":"source/images/IMG_0518.JPG","hash":"cdf83313366ef6bfedc05f8127d08e4897de5154","modified":1556355555852},{"_id":"source/images/IMG_2194.JPG","hash":"cb802e60eb35ea0e5135c786cef1608b1f32f1c0","modified":1556356920498},{"_id":"source/images/IMG_2221.JPG","hash":"707dfcc82b32818ff8b1d12840a863bca517cd16","modified":1556356919011},{"_id":"source/images/IMG_0637.JPG","hash":"bd5f1d97a0be08a89769b01429a35465e0fc85d7","modified":1556355551809},{"_id":"source/images/IMG_2151.JPG","hash":"a22eccebcc934cb9ce8e4038fee0d39d0469f1a2","modified":1556357444520},{"_id":"source/images/IMG_0222.JPG","hash":"8424385dc15a5f8069190386292cce0fbfdc086f","modified":1556356908641},{"_id":"source/images/IMG_2192.JPG","hash":"e725c4037834f60d40b777244edbeb6de337ad9a","modified":1556356911364},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1556351608579},{"_id":"source/images/IMG_0873.JPG","hash":"e4754500a08ed9a78e9154e67c67eb61daa9d3ab","modified":1556357452650},{"_id":"source/images/IMG_2209.JPG","hash":"0045c460208e70189907588d74542e7dd7a9537b","modified":1556356917888},{"_id":"source/images/IMG_1331.JPG","hash":"1274e2476d4aaa0b24eb6330cdf87e238595c0f2","modified":1556357446640},{"_id":"source/images/IMG_2195.JPG","hash":"dbf948d502538248eef8e73df5418530b8cc891c","modified":1556356912377},{"_id":"source/images/futako010029.JPG","hash":"8438933ed62e1cf5b2db488140fb3d93d6bae0f5","modified":1556356902207},{"_id":"source/images/IMG_0077.JPG","hash":"33b8f580dd1c24eaf7e2c2ed42958638637da02a","modified":1556356909567},{"_id":"source/images/IMG_0605.JPG","hash":"fe5cfd86c45ddba8ac06c7834deb3acb0ca21ba0","modified":1556355554106},{"_id":"source/images/futako010013.JPG","hash":"d2bc5d03172a0664ae145288257d1dac48047cb5","modified":1556356901206},{"_id":"source/images/IMG_2200.JPG","hash":"6741848ea3e666881f9dc9a31efa817207a7a1c2","modified":1556356921703},{"_id":"source/images/IMG_0519.JPG","hash":"af2e9071c8f319b00bf4a84ff6b78e2d413c46b6","modified":1556355557862},{"_id":"source/images/futako010041.JPG","hash":"06474d6fa82c7e0183f90fb6a1660280a87f2d89","modified":1556356903293},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1556351608586},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1556351608604},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1556351608572}],"Category":[],"Data":[],"Page":[{"title":"My Gallery","date":"2019-04-27T08:49:44.000Z","albums":[["../images/IMG_0504.JPG","Nikko, JP"],["../images/IMG_0518.JPG","Meguro, JP"],["../images/IMG_0519.JPG","Meguro, JP"],["../images/IMG_0605.JPG","Kyoto Yasaka Shrine, JP"],["../images/IMG_0606.JPG","Kyoto Kiyomizu, JP"],["../images/IMG_0637.JPG","Odaiba, JP"],["../images/futako010010.JPG","Futakotawagama, JP"],["../images/futako010013.JPG","Futakotawagama, JP"],["../images/futako010029.JPG","Futakotawagama, JP"],["../images/futako010041.JPG","Futakotawagama, JP"],["../images/IMG_0077.JPG","Kamakura, JP"],["../images/IMG_0222.JPG","Roppongi Hills, JP"],["../images/IMG_0226.JPG","Roppongi Hills, JP"],["../images/IMG_0444.JPG","Nara, JP"],["../images/IMG_2148.JPG","Niagara Falls, CA"],["../images/IMG_2192.JPG","Banff National Parks, CA"],["../images/IMG_2194.JPG","Banff National Parks, CA"],["../images/IMG_2195.JPG","Banff National Parks, CA"],["../images/IMG_2200.JPG","Banff National Parks, CA"],["../images/IMG_2209.JPG","Banff Town, CA"],["../images/IMG_2221.JPG","Banff, Lake Louis, CA"],["../images/IMG_4200.JPG","Waterloo, CA"],["../images/IMG_4201.JPG","Niagara Falls, CA"],["../images/IMG_1331.JPG","Waterloo, CA"],["../images/IMG_1333.JPG","Waterloo, CA"],["../images/IMG_2151.JPG","Niagara Falls, CA"],["../images/IMG_1891.JPG","Montreal, CA"],["../images/IMG_0873.JPG","Dali, CN"],["../images/IMG_0874.JPG","Dali, CN"],["../images/IMG_0875.JPG","Dali, CN"]],"_content":"","source":"gallery/index.md","raw":"---\ntitle: My Gallery\ndate: 2019-04-27 17:49:44\nalbums: [\n    [\"../images/IMG_0504.JPG\", \"Nikko, JP\"],\n    [\"../images/IMG_0518.JPG\", \"Meguro, JP\"],\n    [\"../images/IMG_0519.JPG\", \"Meguro, JP\"],\n    [\"../images/IMG_0605.JPG\", \"Kyoto Yasaka Shrine, JP\"],\n    [\"../images/IMG_0606.JPG\", \"Kyoto Kiyomizu, JP\"],\n    [\"../images/IMG_0637.JPG\", \"Odaiba, JP\"],\n    [\"../images/futako010010.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/futako010013.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/futako010029.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/futako010041.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/IMG_0077.JPG\", \"Kamakura, JP\"],\n    [\"../images/IMG_0222.JPG\", \"Roppongi Hills, JP\"],\n    [\"../images/IMG_0226.JPG\", \"Roppongi Hills, JP\"],\n    [\"../images/IMG_0444.JPG\", \"Nara, JP\"],\n    [\"../images/IMG_2148.JPG\", \"Niagara Falls, CA\"],\n    [\"../images/IMG_2192.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2194.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2195.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2200.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2209.JPG\", \"Banff Town, CA\"],\n    [\"../images/IMG_2221.JPG\", \"Banff, Lake Louis, CA\"],\n    [\"../images/IMG_4200.JPG\", \"Waterloo, CA\"],\n    [\"../images/IMG_4201.JPG\", \"Niagara Falls, CA\"],\n    [\"../images/IMG_1331.JPG\", \"Waterloo, CA\"],\n    [\"../images/IMG_1333.JPG\", \"Waterloo, CA\"],\n    [\"../images/IMG_2151.JPG\", \"Niagara Falls, CA\"],\n    [\"../images/IMG_1891.JPG\", \"Montreal, CA\"],\n    [\"../images/IMG_0873.JPG\", \"Dali, CN\"],\n    [\"../images/IMG_0874.JPG\", \"Dali, CN\"],\n    [\"../images/IMG_0875.JPG\", \"Dali, CN\"]\n]\n---\n","updated":"2019-04-27T09:34:27.537Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"cjvgduyrl00010sao573e4eh1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2019-04-27T11:24:18.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-04-27 20:24:18\n---\n","updated":"2019-04-27T11:24:56.199Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjvgduyrq00030saof3djgg1w","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"A Brief Introduce to Redux Saga","date":"2019-04-28T05:35:50.000Z","photos":["../images/redux-saga.JPG"],"_content":"<div style=\"text-align: justify\">\nIf you are quite experienced with redux, which is a predictable state container for JavaScript applications (**Note:** even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, [here](https://redux.js.org/introduction/getting-started) is the guide to dive before we start our topic.</div><!-- more -->\n<div style=\"text-align: justify\">\nIn a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with ***call back hell***.\n</div>\n\n## **Haven't heard of *CallBack Hell*?**\n<div style=\"text-align: justify\">Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a ***Promise*** (And has a type of ***Promise<\\any>***). In order to easily mark those async functions, after ***ES6*** javascript provides extra modifiers ***async*** and ***await***, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better... ~~**NO!! It doesn't resolve anything!**~~ The core problem leads to a callback hell is the hierarchical async calls, for example</div>\n\nyou have some simple synchronous functions which are in a chain to accomplish some logics:\n```javascript\na = getSomething( );\nb = getMore(a);\nc = getMoreAndMore(b);\n...\n```\n<div style=\"text-align: justify\">It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</div>```javascript\ngetSomthing( function( a ) {\n    getMore( a, function( b ) {\n        getMoreAndMore( b, function( c ) {\n            //keep going...\n        });\n    });\n});\n```\nOr you prefer ***ES6***:\n```javascript\nasync function getSomething( a ) {\n    await b = ToDo( a );\n    return await getMore( ( b ) => {\n        return await ToDo( b );\n    }).then( ( c ) => {\n        return await ToDo( c );\n    }).then(...);\n}\n```\nLooks really confused? This will getting even uglier if we are using callbacks in loops. \n</br>\n## Redux Thunks\n<div style=\"text-align: justify\">Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</div>```javascript\nasync const callAPI = ( ) => {\n    ...\n    return response;\n}\n...\nasync const updateUI = ( ...params ) => {\n    const res = await callAPI( );\n    if (res.status === 200)\n        dispatch( {type: \"UPDATE\", isSuccess: true} );\n}\n...\nrender ( ) {\n    ...\n    this.props.isSuccess?\n        showData( ) : showError( )\n}\n```\n<div style=\"text-align: justify\">This isn't bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. ***Middleware*** is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</div>```javascript\nfunction logger( store ) {\n    return function wrapDispatch ( next ) {\n        return function dispatchAndLog ( action ) {\n            console.log( \"dispatching.. \", action );\n            let result = next( action );\n            console.log( \"new state\", store.getState( ) );\n            return result;\n        }\n    }\n}\n```\n<div style=\"text-align: justify\">There are more advanced ways to add a logger. If you are interested, please refer to the [offical documentation](https://redux.js.org/advanced/middleware). With our middleware, the previous example can be written in a cleaner way:</div>```javascript\nconst callAPI = ( ) => {\n    return( ( dispatch ) => {\n        dispatch( startCallingApiAction );\n        actualCallApi( ).then( data => {\n            dispatch(successAction( data ));\n        }).fail( err => {\n            dispatch( failedAction(err) );\n        });\n    });\n}\n```\n<div style=\"text-align: justify\">The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called ***thunk***. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</div>\n<div style=\"text-align: justify\">This is great, so why are we even considering ***saga***? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in ***NodeJS***). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to... **Wait! That sounds quite familiar!! Is that the case of callback hell??** Unfortunately, a good thing plus another good feature doesn't always end up with something better. ~~It could be some shit as well (笑)~~ In this case, true, this is exactly the callback hell.</div></br>\n## Redux Saga\n<div style=\"text-align: justify\">To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to **give instructions about what to do next** and we don't care about how those instructions will be executed (Saga handles the executions).</div>\nThen the thunks example can be changed as following:\n```javascript\nexport function* apiSideEffect( action ) {\n    try{\n        const data = yield call( actualCallApi );\n        yield put({ type: \"SUCCESS\", payload: data });\n    } catch ( err ) {\n        yield put({ type: \"FAILED\", payload: err });\n    }\n}\n\nexport function* apiSaga( ) {\n    yield takeEvery( \"CLICK_TO_CALL_API\", apiSideEffect );\n}\n```\nThere are serval fucntions already being integrated in Saga:\n>***Call:*** the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.\n\n>***Put:*** Instead of dispatching an action inside the generator (Don't ever ever do that), ***put*** Returns an object with instructions for the middleware to dispatch the action.\n\n>***Select:*** Returns value from the selector function, similar with **getState( )**. ***Note:*** It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is **mutable** (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).\n\n>***Take:*** It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a ***promise*** resolves. In the take case, it'll suspend the generator until a matching action is dispatched\n\nBy working with Saga, we make the side effects to be ***declarative*** rather than ***imperative***.\n>***Declarative:*** describing what the program must accomplish, rather than describe how to accomplish it\n\n>***Imperative:*** consists of commands for the computer to perform, focuses on describing how a program operates\n\n<div style=\"text-align: justify\">In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the **Saga is pulling the action by itself**. An additional generator, known as ***watcher*** which contains ***take*** has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (***Saga Helper***):</div>```javascript\nfunction* watchFetchData( ) {\n    yield takeEvery( \"FETCH_REQUEST\", callFetchDataApi );\n}\n```\n<div style=\"text-align: justify\">***takeEvery*** allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered):</div>```javascript\nfunction* watchFetchData( ) {\n    yield takeLatest( \"FETCH_REQUEST\", callFetchDataApi );\n}\n```\n<div style=\"text-align: justify\">However by using ***take***, it is possible to fully control an action observation process to build complex control flow:</div>```javascript\nfunction* watchFetchData( ) {\n    while(true) {\n        const action = yield take( \"FETCH_REQUEST\" );\n        console.log( action );\n        yield call( callFetchDataApi, action.payload );\n    }\n}\n```\n<div style=\"text-align: justify\">All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:</div>\nStore:\n```javascript\nconst sagaMiddleware = createSagaMiddleware( );\nconst store = createStore( rootReducer, appluMiddleware(sagaMiddleware) );\nsagaMiddleware.run( watchFetch );\n```\nSagas:\n```javascript\nfunction* watchFetch( ): Generator<*, *, *> {\n    yield takeEvery( \"FETCH_ACTION\", callFetchAPI );\n}\n\nfunction* callFetchAPI( ): Generator<*, *, *> {\n    try {\n        yield put({ type: \"FETCHING\", payload: ... });\n        const data = yield call( actualCallApi );\n        yield put({ type: \"FETCH_SUCCESS\", payload: data });\n    } catch ( err ) {\n        yield put({ type: \"FETCH_FAILED\", payload: err });\n    }\n}\n```\nReducer:\n```javascript\nconst reducer = ( state = initState, action ) => {\n    switch( action ) {\n        case \"FETCHING\":\n            return { loading: true, ...state };\n        case \"FETCH_SUCCESS\":\n            return { loading: false, success: true, data: action.payload, ...state };\n        case \"FETCH_FAILED\":\n            return { loading: false, success: false, error: true, ...state };\n        default:\n            return { ...state };\n    }\n}\n```\nComponent:\n```javascript\nclass myComponent extends React.Component {\n    const mapStateToProps = ...\n    const mapDispatchToProps = ...\n    render( ) {\n        return (\n            <button onClick = { ( ) => this.props.dispatch({ type: \"FETCH_ACTION\" }) }/>\n            {\n                this.props.loading?\n                    <p>Loading..</p> : this.props.error?\n                        <p>Error!</p> : <p>{this.props.data}</p>\n            }\n        );\n    }\n}\nexport default connect( mapStateToProps, mapDispatchToProps )( myComponent );\n\n```\n<div style=\"text-align: justify\">For more advanced concepts, there is a well-organized [Saga offical documentation](https://redux-saga.js.org/docs/advanced/) you can refer to if you want to dive deeper.</div></br>\n## How to test Saga?\n<div style=\"text-align: justify\">A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</div>```javascript\ndescribe( \"fetch work flow\", ( ) => {\n    const generator = cloneableGenerator( callFetchAPI )({ type: \"FETCH_ACTION\" });\n    expect( generator.next( ).value ).toEqual( put({ type: \"FETCHING\", payload: ... }) );\n\n    test( \"fetch success\", ( ) => {\n        const clone = generator.clone( );\n        expect( clone.next( ).value ).toEqual( put({ type: \"FETCH_SUCCESS\" }) );\n        expect( generator.next( ).done ).toEqual( true );\n    });\n});\n```\n<div style=\"text-align: justify\">In the above example, we use **clone( )** to test different control flows and **next( )** to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of **next( )**:</div>```javascript\nexpect( clone.next( false ).value ).toEqual( put( fetchFailedAction( ) ) );\n```\n</br>\n## Saga vs Observables\n<div style=\"text-align: justify\">Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good [code snippets](https://hackmd.io/s/H1xLHUQ8e) of saga vs observables that can open your mind :D</div>\n</br>\n</br>\n## References:\nhttps://redux-saga.js.org/\nhttps://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\nhttps://redux.js.org/advanced/middleware\nhttps://pub.dartlang.org/packages/redux_thunk\nhttps://codeburst.io/how-i-test-redux-saga-fcc425cda018\nhttps://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\nhttps://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\nhttps://redux.js.org/introduction/getting-started\nhttps://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\n","source":"_posts/A-Brief-Introduce-to-Redux-Saga.md","raw":"---\ntitle: A Brief Introduce to Redux Saga\ndate: 2019-04-28 14:35:50\ntags: [Redux, Saga, React]\nphotos: [\"../images/redux-saga.JPG\"]\n---\n<div style=\"text-align: justify\">\nIf you are quite experienced with redux, which is a predictable state container for JavaScript applications (**Note:** even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, [here](https://redux.js.org/introduction/getting-started) is the guide to dive before we start our topic.</div><!-- more -->\n<div style=\"text-align: justify\">\nIn a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with ***call back hell***.\n</div>\n\n## **Haven't heard of *CallBack Hell*?**\n<div style=\"text-align: justify\">Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a ***Promise*** (And has a type of ***Promise<\\any>***). In order to easily mark those async functions, after ***ES6*** javascript provides extra modifiers ***async*** and ***await***, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better... ~~**NO!! It doesn't resolve anything!**~~ The core problem leads to a callback hell is the hierarchical async calls, for example</div>\n\nyou have some simple synchronous functions which are in a chain to accomplish some logics:\n```javascript\na = getSomething( );\nb = getMore(a);\nc = getMoreAndMore(b);\n...\n```\n<div style=\"text-align: justify\">It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</div>```javascript\ngetSomthing( function( a ) {\n    getMore( a, function( b ) {\n        getMoreAndMore( b, function( c ) {\n            //keep going...\n        });\n    });\n});\n```\nOr you prefer ***ES6***:\n```javascript\nasync function getSomething( a ) {\n    await b = ToDo( a );\n    return await getMore( ( b ) => {\n        return await ToDo( b );\n    }).then( ( c ) => {\n        return await ToDo( c );\n    }).then(...);\n}\n```\nLooks really confused? This will getting even uglier if we are using callbacks in loops. \n</br>\n## Redux Thunks\n<div style=\"text-align: justify\">Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</div>```javascript\nasync const callAPI = ( ) => {\n    ...\n    return response;\n}\n...\nasync const updateUI = ( ...params ) => {\n    const res = await callAPI( );\n    if (res.status === 200)\n        dispatch( {type: \"UPDATE\", isSuccess: true} );\n}\n...\nrender ( ) {\n    ...\n    this.props.isSuccess?\n        showData( ) : showError( )\n}\n```\n<div style=\"text-align: justify\">This isn't bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. ***Middleware*** is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</div>```javascript\nfunction logger( store ) {\n    return function wrapDispatch ( next ) {\n        return function dispatchAndLog ( action ) {\n            console.log( \"dispatching.. \", action );\n            let result = next( action );\n            console.log( \"new state\", store.getState( ) );\n            return result;\n        }\n    }\n}\n```\n<div style=\"text-align: justify\">There are more advanced ways to add a logger. If you are interested, please refer to the [offical documentation](https://redux.js.org/advanced/middleware). With our middleware, the previous example can be written in a cleaner way:</div>```javascript\nconst callAPI = ( ) => {\n    return( ( dispatch ) => {\n        dispatch( startCallingApiAction );\n        actualCallApi( ).then( data => {\n            dispatch(successAction( data ));\n        }).fail( err => {\n            dispatch( failedAction(err) );\n        });\n    });\n}\n```\n<div style=\"text-align: justify\">The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called ***thunk***. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</div>\n<div style=\"text-align: justify\">This is great, so why are we even considering ***saga***? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in ***NodeJS***). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to... **Wait! That sounds quite familiar!! Is that the case of callback hell??** Unfortunately, a good thing plus another good feature doesn't always end up with something better. ~~It could be some shit as well (笑)~~ In this case, true, this is exactly the callback hell.</div></br>\n## Redux Saga\n<div style=\"text-align: justify\">To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to **give instructions about what to do next** and we don't care about how those instructions will be executed (Saga handles the executions).</div>\nThen the thunks example can be changed as following:\n```javascript\nexport function* apiSideEffect( action ) {\n    try{\n        const data = yield call( actualCallApi );\n        yield put({ type: \"SUCCESS\", payload: data });\n    } catch ( err ) {\n        yield put({ type: \"FAILED\", payload: err });\n    }\n}\n\nexport function* apiSaga( ) {\n    yield takeEvery( \"CLICK_TO_CALL_API\", apiSideEffect );\n}\n```\nThere are serval fucntions already being integrated in Saga:\n>***Call:*** the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.\n\n>***Put:*** Instead of dispatching an action inside the generator (Don't ever ever do that), ***put*** Returns an object with instructions for the middleware to dispatch the action.\n\n>***Select:*** Returns value from the selector function, similar with **getState( )**. ***Note:*** It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is **mutable** (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).\n\n>***Take:*** It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a ***promise*** resolves. In the take case, it'll suspend the generator until a matching action is dispatched\n\nBy working with Saga, we make the side effects to be ***declarative*** rather than ***imperative***.\n>***Declarative:*** describing what the program must accomplish, rather than describe how to accomplish it\n\n>***Imperative:*** consists of commands for the computer to perform, focuses on describing how a program operates\n\n<div style=\"text-align: justify\">In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the **Saga is pulling the action by itself**. An additional generator, known as ***watcher*** which contains ***take*** has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (***Saga Helper***):</div>```javascript\nfunction* watchFetchData( ) {\n    yield takeEvery( \"FETCH_REQUEST\", callFetchDataApi );\n}\n```\n<div style=\"text-align: justify\">***takeEvery*** allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered):</div>```javascript\nfunction* watchFetchData( ) {\n    yield takeLatest( \"FETCH_REQUEST\", callFetchDataApi );\n}\n```\n<div style=\"text-align: justify\">However by using ***take***, it is possible to fully control an action observation process to build complex control flow:</div>```javascript\nfunction* watchFetchData( ) {\n    while(true) {\n        const action = yield take( \"FETCH_REQUEST\" );\n        console.log( action );\n        yield call( callFetchDataApi, action.payload );\n    }\n}\n```\n<div style=\"text-align: justify\">All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:</div>\nStore:\n```javascript\nconst sagaMiddleware = createSagaMiddleware( );\nconst store = createStore( rootReducer, appluMiddleware(sagaMiddleware) );\nsagaMiddleware.run( watchFetch );\n```\nSagas:\n```javascript\nfunction* watchFetch( ): Generator<*, *, *> {\n    yield takeEvery( \"FETCH_ACTION\", callFetchAPI );\n}\n\nfunction* callFetchAPI( ): Generator<*, *, *> {\n    try {\n        yield put({ type: \"FETCHING\", payload: ... });\n        const data = yield call( actualCallApi );\n        yield put({ type: \"FETCH_SUCCESS\", payload: data });\n    } catch ( err ) {\n        yield put({ type: \"FETCH_FAILED\", payload: err });\n    }\n}\n```\nReducer:\n```javascript\nconst reducer = ( state = initState, action ) => {\n    switch( action ) {\n        case \"FETCHING\":\n            return { loading: true, ...state };\n        case \"FETCH_SUCCESS\":\n            return { loading: false, success: true, data: action.payload, ...state };\n        case \"FETCH_FAILED\":\n            return { loading: false, success: false, error: true, ...state };\n        default:\n            return { ...state };\n    }\n}\n```\nComponent:\n```javascript\nclass myComponent extends React.Component {\n    const mapStateToProps = ...\n    const mapDispatchToProps = ...\n    render( ) {\n        return (\n            <button onClick = { ( ) => this.props.dispatch({ type: \"FETCH_ACTION\" }) }/>\n            {\n                this.props.loading?\n                    <p>Loading..</p> : this.props.error?\n                        <p>Error!</p> : <p>{this.props.data}</p>\n            }\n        );\n    }\n}\nexport default connect( mapStateToProps, mapDispatchToProps )( myComponent );\n\n```\n<div style=\"text-align: justify\">For more advanced concepts, there is a well-organized [Saga offical documentation](https://redux-saga.js.org/docs/advanced/) you can refer to if you want to dive deeper.</div></br>\n## How to test Saga?\n<div style=\"text-align: justify\">A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</div>```javascript\ndescribe( \"fetch work flow\", ( ) => {\n    const generator = cloneableGenerator( callFetchAPI )({ type: \"FETCH_ACTION\" });\n    expect( generator.next( ).value ).toEqual( put({ type: \"FETCHING\", payload: ... }) );\n\n    test( \"fetch success\", ( ) => {\n        const clone = generator.clone( );\n        expect( clone.next( ).value ).toEqual( put({ type: \"FETCH_SUCCESS\" }) );\n        expect( generator.next( ).done ).toEqual( true );\n    });\n});\n```\n<div style=\"text-align: justify\">In the above example, we use **clone( )** to test different control flows and **next( )** to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of **next( )**:</div>```javascript\nexpect( clone.next( false ).value ).toEqual( put( fetchFailedAction( ) ) );\n```\n</br>\n## Saga vs Observables\n<div style=\"text-align: justify\">Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good [code snippets](https://hackmd.io/s/H1xLHUQ8e) of saga vs observables that can open your mind :D</div>\n</br>\n</br>\n## References:\nhttps://redux-saga.js.org/\nhttps://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\nhttps://redux.js.org/advanced/middleware\nhttps://pub.dartlang.org/packages/redux_thunk\nhttps://codeburst.io/how-i-test-redux-saga-fcc425cda018\nhttps://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\nhttps://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\nhttps://redux.js.org/introduction/getting-started\nhttps://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\n","slug":"A-Brief-Introduce-to-Redux-Saga","published":1,"updated":"2019-04-29T07:17:57.585Z","comments":1,"layout":"post","link":"","_id":"cjvgduyrd00000saoyhtzr1bv","content":"<div style=\"text-align: justify\"><br>If you are quite experienced with redux, which is a predictable state container for JavaScript applications (<strong>Note:</strong> even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, <a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">here</a> is the guide to dive before we start our topic.</div><a id=\"more\"></a><br><div style=\"text-align: justify\"><br>In a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with <strong><em>call back hell</em></strong>.<br></div>\n\n<h2 id=\"Haven’t-heard-of-CallBack-Hell\"><a href=\"#Haven’t-heard-of-CallBack-Hell\" class=\"headerlink\" title=\"Haven’t heard of CallBack Hell?\"></a><strong>Haven’t heard of <em>CallBack Hell</em>?</strong></h2><div style=\"text-align: justify\">Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a <strong><em>Promise</em></strong> (And has a type of <strong><em>Promise&lt;\\any&gt;</em></strong>). In order to easily mark those async functions, after <strong><em>ES6</em></strong> javascript provides extra modifiers <strong><em>async</em></strong> and <strong><em>await</em></strong>, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better… <del><strong>NO!! It doesn’t resolve anything!</strong></del> The core problem leads to a callback hell is the hierarchical async calls, for example</div>\n\n<p>you have some simple synchronous functions which are in a chain to accomplish some logics:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = getSomething( );</span><br><span class=\"line\">b = getMore(a);</span><br><span class=\"line\">c = getMoreAndMore(b);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSomthing( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> a </span>) </span>&#123;</span><br><span class=\"line\">    getMore( a, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> b </span>) </span>&#123;</span><br><span class=\"line\">        getMoreAndMore( b, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> c </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//keep going...</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Or you prefer <strong><em>ES6</em></strong>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span>(<span class=\"params\"> a </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> b = ToDo( a );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> getMore( <span class=\"function\">(<span class=\"params\"> b </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> ToDo( b );</span><br><span class=\"line\">    &#125;).then( <span class=\"function\">(<span class=\"params\"> c </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> ToDo( c );</span><br><span class=\"line\">    &#125;).then(...);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Looks really confused? This will getting even uglier if we are using callbacks in loops.<br><br></p>\n<h2 id=\"Redux-Thunks\"><a href=\"#Redux-Thunks\" class=\"headerlink\" title=\"Redux Thunks\"></a>Redux Thunks</h2><p><div style=\"text-align: justify\">Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">const</span> callAPI = <span class=\"function\"><span class=\"params\">( )</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">const</span> updateUI = <span class=\"function\">(<span class=\"params\"> ...params </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> callAPI( );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.status === <span class=\"number\">200</span>)</span><br><span class=\"line\">        dispatch( &#123;<span class=\"attr\">type</span>: <span class=\"string\">\"UPDATE\"</span>, <span class=\"attr\">isSuccess</span>: <span class=\"literal\">true</span>&#125; );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">render ( ) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.isSuccess?</span><br><span class=\"line\">        showData( ) : showError( )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">This isn’t bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. <strong><em>Middleware</em></strong> is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"> store </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapDispatch</span> (<span class=\"params\"> next </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchAndLog</span> (<span class=\"params\"> action </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">\"dispatching.. \"</span>, action );</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = next( action );</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">\"new state\"</span>, store.getState( ) );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">There are more advanced ways to add a logger. If you are interested, please refer to the <a href=\"https://redux.js.org/advanced/middleware\" target=\"_blank\" rel=\"noopener\">offical documentation</a>. With our middleware, the previous example can be written in a cleaner way:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callAPI = <span class=\"function\"><span class=\"params\">( )</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span><span class=\"function\">(<span class=\"params\"> ( dispatch </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        dispatch( startCallingApiAction );</span><br><span class=\"line\">        actualCallApi( ).then( <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch(successAction( data ));</span><br><span class=\"line\">        &#125;).fail( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch( failedAction(err) );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called <strong><em>thunk</em></strong>. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</div></p>\n<p><div style=\"text-align: justify\">This is great, so why are we even considering <strong><em>saga</em></strong>? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in <strong><em>NodeJS</em></strong>). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to… <strong>Wait! That sounds quite familiar!! Is that the case of callback hell??</strong> Unfortunately, a good thing plus another good feature doesn’t always end up with something better. <del>It could be some shit as well (笑)</del> In this case, true, this is exactly the callback hell.</div><br></p>\n<h2 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux Saga\"></a>Redux Saga</h2><p><div style=\"text-align: justify\">To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to <strong>give instructions about what to do next</strong> and we don’t care about how those instructions will be executed (Saga handles the executions).</div><br>Then the thunks example can be changed as following:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">apiSideEffect</span>(<span class=\"params\"> action </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> call( actualCallApi );</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"SUCCESS\"</span>, <span class=\"attr\">payload</span>: data &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> ( err ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FAILED\"</span>, <span class=\"attr\">payload</span>: err &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">apiSaga</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeEvery( <span class=\"string\">\"CLICK_TO_CALL_API\"</span>, apiSideEffect );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There are serval fucntions already being integrated in Saga:</p>\n<blockquote>\n<p><strong><em>Call:</em></strong> the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Put:</em></strong> Instead of dispatching an action inside the generator (Don’t ever ever do that), <strong><em>put</em></strong> Returns an object with instructions for the middleware to dispatch the action.</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Select:</em></strong> Returns value from the selector function, similar with <strong>getState( )</strong>. <strong><em>Note:</em></strong> It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is <strong>mutable</strong> (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Take:</em></strong> It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a <strong><em>promise</em></strong> resolves. In the take case, it’ll suspend the generator until a matching action is dispatched</p>\n</blockquote>\n<p>By working with Saga, we make the side effects to be <strong><em>declarative</em></strong> rather than <strong><em>imperative</em></strong>.</p>\n<blockquote>\n<p><strong><em>Declarative:</em></strong> describing what the program must accomplish, rather than describe how to accomplish it</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Imperative:</em></strong> consists of commands for the computer to perform, focuses on describing how a program operates</p>\n</blockquote>\n<p><div style=\"text-align: justify\">In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the <strong>Saga is pulling the action by itself</strong>. An additional generator, known as <strong><em>watcher</em></strong> which contains <strong><em>take</em></strong> has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (<strong><em>Saga Helper</em></strong>):</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeEvery( <span class=\"string\">\"FETCH_REQUEST\"</span>, callFetchDataApi );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\"><strong><em>takeEvery</em></strong> allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered):</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeLatest( <span class=\"string\">\"FETCH_REQUEST\"</span>, callFetchDataApi );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">However by using <strong><em>take</em></strong>, it is possible to fully control an action observation process to build complex control flow:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = <span class=\"keyword\">yield</span> take( <span class=\"string\">\"FETCH_REQUEST\"</span> );</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( action );</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> call( callFetchDataApi, action.payload );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:</div><br>Store:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware( );</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore( rootReducer, appluMiddleware(sagaMiddleware) );</span><br><span class=\"line\">sagaMiddleware.run( watchFetch );</span><br></pre></td></tr></table></figure></p>\n<p>Sagas:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetch</span>(<span class=\"params\"> </span>): <span class=\"title\">Generator</span>&lt;*, *, *&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeEvery( <span class=\"string\">\"FETCH_ACTION\"</span>, callFetchAPI );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">callFetchAPI</span>(<span class=\"params\"> </span>): <span class=\"title\">Generator</span>&lt;*, *, *&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCHING\"</span>, <span class=\"attr\">payload</span>: ... &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> call( actualCallApi );</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_SUCCESS\"</span>, <span class=\"attr\">payload</span>: data &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> ( err ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_FAILED\"</span>, <span class=\"attr\">payload</span>: err &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Reducer:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\"> state = initState, action </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( action ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"FETCHING\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">loading</span>: <span class=\"literal\">true</span>, ...state &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"FETCH_SUCCESS\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">success</span>: <span class=\"literal\">true</span>, <span class=\"attr\">data</span>: action.payload, ...state &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"FETCH_FAILED\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">error</span>: <span class=\"literal\">true</span>, ...state &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; ...state &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Component:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapStateToProps = ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapDispatchToProps = ...</span><br><span class=\"line\">    render( ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;button onClick = &#123; ( ) =&gt; <span class=\"keyword\">this</span>.props.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_ACTION\"</span> &#125;) &#125;/&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.props.loading?</span><br><span class=\"line\">                    &lt;p&gt;Loading..&lt;<span class=\"regexp\">/p&gt; : this.props.error?</span></span><br><span class=\"line\"><span class=\"regexp\">                        &lt;p&gt;Error!&lt;/</span>p&gt; : &lt;p&gt;&#123;this.props.data&#125;&lt;/p&gt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect( mapStateToProps, mapDispatchToProps )( myComponent );</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">For more advanced concepts, there is a well-organized <a href=\"https://redux-saga.js.org/docs/advanced/\" target=\"_blank\" rel=\"noopener\">Saga offical documentation</a> you can refer to if you want to dive deeper.</div><br></p>\n<h2 id=\"How-to-test-Saga\"><a href=\"#How-to-test-Saga\" class=\"headerlink\" title=\"How to test Saga?\"></a>How to test Saga?</h2><p><div style=\"text-align: justify\">A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe( <span class=\"string\">\"fetch work flow\"</span>, ( ) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> generator = cloneableGenerator( callFetchAPI )(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_ACTION\"</span> &#125;);</span><br><span class=\"line\">    expect( generator.next( ).value ).toEqual( put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCHING\"</span>, <span class=\"attr\">payload</span>: ... &#125;) );</span><br><span class=\"line\"></span><br><span class=\"line\">    test( <span class=\"string\">\"fetch success\"</span>, ( ) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> clone = generator.clone( );</span><br><span class=\"line\">        expect( clone.next( ).value ).toEqual( put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_SUCCESS\"</span> &#125;) );</span><br><span class=\"line\">        expect( generator.next( ).done ).toEqual( <span class=\"literal\">true</span> );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">In the above example, we use <strong>clone( )</strong> to test different control flows and <strong>next( )</strong> to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of <strong>next( )</strong>:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect( clone.next( <span class=\"literal\">false</span> ).value ).toEqual( put( fetchFailedAction( ) ) );</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"Saga-vs-Observables\"><a href=\"#Saga-vs-Observables\" class=\"headerlink\" title=\"Saga vs Observables\"></a>Saga vs Observables</h2><p><div style=\"text-align: justify\">Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good <a href=\"https://hackmd.io/s/H1xLHUQ8e\" target=\"_blank\" rel=\"noopener\">code snippets</a> of saga vs observables that can open your mind :D</div><br><br><br><br></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p><a href=\"https://redux-saga.js.org/\" target=\"_blank\" rel=\"noopener\">https://redux-saga.js.org/</a><br><a href=\"https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it</a><br><a href=\"https://redux.js.org/advanced/middleware\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/advanced/middleware</a><br><a href=\"https://pub.dartlang.org/packages/redux_thunk\" target=\"_blank\" rel=\"noopener\">https://pub.dartlang.org/packages/redux_thunk</a><br><a href=\"https://codeburst.io/how-i-test-redux-saga-fcc425cda018\" target=\"_blank\" rel=\"noopener\">https://codeburst.io/how-i-test-redux-saga-fcc425cda018</a><br><a href=\"https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\" target=\"_blank\" rel=\"noopener\">https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1</a><br><a href=\"https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\" target=\"_blank\" rel=\"noopener\">https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/</a><br><a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/introduction/getting-started</a><br><a href=\"https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\" target=\"_blank\" rel=\"noopener\">https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71</a></p>\n","site":{"data":{}},"excerpt":"<div style=\"text-align: justify\"><br>If you are quite experienced with redux, which is a predictable state container for JavaScript applications (<strong>Note:</strong> even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, <a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">here</a> is the guide to dive before we start our topic.</div>","more":"<br><div style=\"text-align: justify\"><br>In a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with <strong><em>call back hell</em></strong>.<br></div>\n\n<h2 id=\"Haven’t-heard-of-CallBack-Hell\"><a href=\"#Haven’t-heard-of-CallBack-Hell\" class=\"headerlink\" title=\"Haven’t heard of CallBack Hell?\"></a><strong>Haven’t heard of <em>CallBack Hell</em>?</strong></h2><div style=\"text-align: justify\">Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a <strong><em>Promise</em></strong> (And has a type of <strong><em>Promise&lt;\\any&gt;</em></strong>). In order to easily mark those async functions, after <strong><em>ES6</em></strong> javascript provides extra modifiers <strong><em>async</em></strong> and <strong><em>await</em></strong>, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better… <del><strong>NO!! It doesn’t resolve anything!</strong></del> The core problem leads to a callback hell is the hierarchical async calls, for example</div>\n\n<p>you have some simple synchronous functions which are in a chain to accomplish some logics:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = getSomething( );</span><br><span class=\"line\">b = getMore(a);</span><br><span class=\"line\">c = getMoreAndMore(b);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSomthing( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> a </span>) </span>&#123;</span><br><span class=\"line\">    getMore( a, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> b </span>) </span>&#123;</span><br><span class=\"line\">        getMoreAndMore( b, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> c </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//keep going...</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>Or you prefer <strong><em>ES6</em></strong>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span>(<span class=\"params\"> a </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> b = ToDo( a );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> getMore( <span class=\"function\">(<span class=\"params\"> b </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> ToDo( b );</span><br><span class=\"line\">    &#125;).then( <span class=\"function\">(<span class=\"params\"> c </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> ToDo( c );</span><br><span class=\"line\">    &#125;).then(...);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Looks really confused? This will getting even uglier if we are using callbacks in loops.<br><br></p>\n<h2 id=\"Redux-Thunks\"><a href=\"#Redux-Thunks\" class=\"headerlink\" title=\"Redux Thunks\"></a>Redux Thunks</h2><p><div style=\"text-align: justify\">Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">const</span> callAPI = <span class=\"function\"><span class=\"params\">( )</span> =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">const</span> updateUI = <span class=\"function\">(<span class=\"params\"> ...params </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> callAPI( );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.status === <span class=\"number\">200</span>)</span><br><span class=\"line\">        dispatch( &#123;<span class=\"attr\">type</span>: <span class=\"string\">\"UPDATE\"</span>, <span class=\"attr\">isSuccess</span>: <span class=\"literal\">true</span>&#125; );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">render ( ) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.props.isSuccess?</span><br><span class=\"line\">        showData( ) : showError( )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">This isn’t bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. <strong><em>Middleware</em></strong> is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logger</span>(<span class=\"params\"> store </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapDispatch</span> (<span class=\"params\"> next </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchAndLog</span> (<span class=\"params\"> action </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">\"dispatching.. \"</span>, action );</span><br><span class=\"line\">            <span class=\"keyword\">let</span> result = next( action );</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">\"new state\"</span>, store.getState( ) );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">There are more advanced ways to add a logger. If you are interested, please refer to the <a href=\"https://redux.js.org/advanced/middleware\" target=\"_blank\" rel=\"noopener\">offical documentation</a>. With our middleware, the previous example can be written in a cleaner way:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callAPI = <span class=\"function\"><span class=\"params\">( )</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span><span class=\"function\">(<span class=\"params\"> ( dispatch </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        dispatch( startCallingApiAction );</span><br><span class=\"line\">        actualCallApi( ).then( <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch(successAction( data ));</span><br><span class=\"line\">        &#125;).fail( <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            dispatch( failedAction(err) );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called <strong><em>thunk</em></strong>. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</div></p>\n<p><div style=\"text-align: justify\">This is great, so why are we even considering <strong><em>saga</em></strong>? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in <strong><em>NodeJS</em></strong>). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to… <strong>Wait! That sounds quite familiar!! Is that the case of callback hell??</strong> Unfortunately, a good thing plus another good feature doesn’t always end up with something better. <del>It could be some shit as well (笑)</del> In this case, true, this is exactly the callback hell.</div><br></p>\n<h2 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux Saga\"></a>Redux Saga</h2><p><div style=\"text-align: justify\">To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to <strong>give instructions about what to do next</strong> and we don’t care about how those instructions will be executed (Saga handles the executions).</div><br>Then the thunks example can be changed as following:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">apiSideEffect</span>(<span class=\"params\"> action </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> call( actualCallApi );</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"SUCCESS\"</span>, <span class=\"attr\">payload</span>: data &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> ( err ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FAILED\"</span>, <span class=\"attr\">payload</span>: err &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">apiSaga</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeEvery( <span class=\"string\">\"CLICK_TO_CALL_API\"</span>, apiSideEffect );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>There are serval fucntions already being integrated in Saga:</p>\n<blockquote>\n<p><strong><em>Call:</em></strong> the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Put:</em></strong> Instead of dispatching an action inside the generator (Don’t ever ever do that), <strong><em>put</em></strong> Returns an object with instructions for the middleware to dispatch the action.</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Select:</em></strong> Returns value from the selector function, similar with <strong>getState( )</strong>. <strong><em>Note:</em></strong> It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is <strong>mutable</strong> (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Take:</em></strong> It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a <strong><em>promise</em></strong> resolves. In the take case, it’ll suspend the generator until a matching action is dispatched</p>\n</blockquote>\n<p>By working with Saga, we make the side effects to be <strong><em>declarative</em></strong> rather than <strong><em>imperative</em></strong>.</p>\n<blockquote>\n<p><strong><em>Declarative:</em></strong> describing what the program must accomplish, rather than describe how to accomplish it</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Imperative:</em></strong> consists of commands for the computer to perform, focuses on describing how a program operates</p>\n</blockquote>\n<p><div style=\"text-align: justify\">In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the <strong>Saga is pulling the action by itself</strong>. An additional generator, known as <strong><em>watcher</em></strong> which contains <strong><em>take</em></strong> has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (<strong><em>Saga Helper</em></strong>):</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeEvery( <span class=\"string\">\"FETCH_REQUEST\"</span>, callFetchDataApi );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\"><strong><em>takeEvery</em></strong> allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered):</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeLatest( <span class=\"string\">\"FETCH_REQUEST\"</span>, callFetchDataApi );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">However by using <strong><em>take</em></strong>, it is possible to fully control an action observation process to build complex control flow:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"> </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> action = <span class=\"keyword\">yield</span> take( <span class=\"string\">\"FETCH_REQUEST\"</span> );</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( action );</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> call( callFetchDataApi, action.payload );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:</div><br>Store:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sagaMiddleware = createSagaMiddleware( );</span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore( rootReducer, appluMiddleware(sagaMiddleware) );</span><br><span class=\"line\">sagaMiddleware.run( watchFetch );</span><br></pre></td></tr></table></figure></p>\n<p>Sagas:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetch</span>(<span class=\"params\"> </span>): <span class=\"title\">Generator</span>&lt;*, *, *&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> takeEvery( <span class=\"string\">\"FETCH_ACTION\"</span>, callFetchAPI );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">callFetchAPI</span>(<span class=\"params\"> </span>): <span class=\"title\">Generator</span>&lt;*, *, *&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCHING\"</span>, <span class=\"attr\">payload</span>: ... &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> call( actualCallApi );</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_SUCCESS\"</span>, <span class=\"attr\">payload</span>: data &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> ( err ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_FAILED\"</span>, <span class=\"attr\">payload</span>: err &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Reducer:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\"> state = initState, action </span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>( action ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"FETCHING\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">loading</span>: <span class=\"literal\">true</span>, ...state &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"FETCH_SUCCESS\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">success</span>: <span class=\"literal\">true</span>, <span class=\"attr\">data</span>: action.payload, ...state &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"FETCH_FAILED\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>, <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">error</span>: <span class=\"literal\">true</span>, ...state &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123; ...state &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Component:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapStateToProps = ...</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapDispatchToProps = ...</span><br><span class=\"line\">    render( ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;button onClick = &#123; ( ) =&gt; <span class=\"keyword\">this</span>.props.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_ACTION\"</span> &#125;) &#125;/&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.props.loading?</span><br><span class=\"line\">                    &lt;p&gt;Loading..&lt;<span class=\"regexp\">/p&gt; : this.props.error?</span></span><br><span class=\"line\"><span class=\"regexp\">                        &lt;p&gt;Error!&lt;/</span>p&gt; : &lt;p&gt;&#123;this.props.data&#125;&lt;/p&gt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect( mapStateToProps, mapDispatchToProps )( myComponent );</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">For more advanced concepts, there is a well-organized <a href=\"https://redux-saga.js.org/docs/advanced/\" target=\"_blank\" rel=\"noopener\">Saga offical documentation</a> you can refer to if you want to dive deeper.</div><br></p>\n<h2 id=\"How-to-test-Saga\"><a href=\"#How-to-test-Saga\" class=\"headerlink\" title=\"How to test Saga?\"></a>How to test Saga?</h2><p><div style=\"text-align: justify\">A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe( <span class=\"string\">\"fetch work flow\"</span>, ( ) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> generator = cloneableGenerator( callFetchAPI )(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_ACTION\"</span> &#125;);</span><br><span class=\"line\">    expect( generator.next( ).value ).toEqual( put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCHING\"</span>, <span class=\"attr\">payload</span>: ... &#125;) );</span><br><span class=\"line\"></span><br><span class=\"line\">    test( <span class=\"string\">\"fetch success\"</span>, ( ) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> clone = generator.clone( );</span><br><span class=\"line\">        expect( clone.next( ).value ).toEqual( put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">\"FETCH_SUCCESS\"</span> &#125;) );</span><br><span class=\"line\">        expect( generator.next( ).done ).toEqual( <span class=\"literal\">true</span> );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><div style=\"text-align: justify\">In the above example, we use <strong>clone( )</strong> to test different control flows and <strong>next( )</strong> to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of <strong>next( )</strong>:</div><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect( clone.next( <span class=\"literal\">false</span> ).value ).toEqual( put( fetchFailedAction( ) ) );</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"Saga-vs-Observables\"><a href=\"#Saga-vs-Observables\" class=\"headerlink\" title=\"Saga vs Observables\"></a>Saga vs Observables</h2><p><div style=\"text-align: justify\">Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good <a href=\"https://hackmd.io/s/H1xLHUQ8e\" target=\"_blank\" rel=\"noopener\">code snippets</a> of saga vs observables that can open your mind :D</div><br><br><br><br></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p><a href=\"https://redux-saga.js.org/\" target=\"_blank\" rel=\"noopener\">https://redux-saga.js.org/</a><br><a href=\"https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it</a><br><a href=\"https://redux.js.org/advanced/middleware\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/advanced/middleware</a><br><a href=\"https://pub.dartlang.org/packages/redux_thunk\" target=\"_blank\" rel=\"noopener\">https://pub.dartlang.org/packages/redux_thunk</a><br><a href=\"https://codeburst.io/how-i-test-redux-saga-fcc425cda018\" target=\"_blank\" rel=\"noopener\">https://codeburst.io/how-i-test-redux-saga-fcc425cda018</a><br><a href=\"https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\" target=\"_blank\" rel=\"noopener\">https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1</a><br><a href=\"https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\" target=\"_blank\" rel=\"noopener\">https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/</a><br><a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/introduction/getting-started</a><br><a href=\"https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\" target=\"_blank\" rel=\"noopener\">https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71</a></p>"},{"title":"Memory Leaks in Serveral Commonly Used Programming Languages","date":"2019-05-05T06:37:22.000Z","photos":["../images/Memory-Leaks.JPG"],"_content":"Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<!-- more -->\n\nWiki's Def:\n>[**Memory leak**](https://en.wikipedia.org/wiki/Memory_leak) is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: \n- memory which is no longer needed is not released\n- an object is stored in memory but cannot be accessed by the running code\n\nWe usually encounter this issue in programming languages that don't have [**GC**](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science), for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.\n</br>\n\n## This is really common in C++\nLet's take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won't be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.\n\nWe all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function ***free( )*** or ***delete[ ]***. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn't ever reach the line to release memory:\n```c++\nint sample( int n ) {\n    void  *ptr = malloc( 16 );\n    if ( n )\n        return -1; //memory leak here\n    free( ptr );\n    return 0;\n}\n```\nor:\n```c++\nclass Sample {\n    public:\n        init( ) { int *n = new int;  throw any_exception( ); }\n        ~init( ) { delete n; }\n    private:\n        int *n;\n};\nSample *n = new Sample; //memory leak here\n```\nThe solution to the above examples is also really simple: check control flows and **do remember to call the destructor before anywhere the procedure may exit**. Well if you want to do it in a fancy way, you can use ***smart pointer*** alternatively:\n```c++\nclass Sample {\n    public:\n        init( ) { n = std::make_shared<\\int>( new int ) }\n        ~init( ) {}\n    private:\n        std::shared_ptr<\\int> n;\n};\n```\nSmart pointer helps you manage this object and if it is not referred anymore, release its memory.\n</br>\n\n## free( )/delete is not enough\nNow your program has such a concrete control flow that **free( )** or **delete** is called before all the possible drop out. That is great but still not enough. **free( )** and **delete** can **only release the memory where the pointer is currently pointing to but not the pointer itself!** The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to **NULL**, instead some random values that cannot be predicted.\n```c++\nint main( ) {\n    char *p = ( char* ) malloc( sizeof( char ) * 100 );\n    strcpy( p, \"hello\" );\n    free( p );\n    if ( p != NULL ) //doesn't prevent issue\n        strcpy( p, \"world\" ); // error\n}\n```\nThis pointer p is called [***dangling pointer*** or ***wild pointer***](https://en.wikipedia.org/wiki/Dangling_pointer) and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called ***wild pointer***, and in real life it is called [**cat**](https://en.wikipedia.org/wiki/Cat). To prevent it, we should **always set the pointer to be NULL when it is not used/the memory is released**.\n\n***Note***: when you define a pointer without setting up its initial value, that pointer will also be a ***wild pointer*** and has a value of some random number (which doesn't equal to **NULL**). Hence it is necessary to set the value of a pointer to be **NULL** if it cannot be asigned a value at the beginning.\n\nFor some simple pointers, they can be reasigned to **NULL** to prevent ***wild pointer***, however for a pointer referring to a hierarchical object, simply setting to **NULL** cannot resolve the potential issues. For example, you are using a ***vector*** in C++ :\n```c++\nvector <\\string> v\nint main( ) {\n    for ( int i=0; i<1000000; i++ )\n        v.push_back( \"test\" );\n    \n    cout << v.capacity( ) << endl;  //memory usage: 54M\n    v.clear( );\n    cout << v.capacity( ) << endl;  //memory usage: still 54M\n}\n```\nEven though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. **clear( )** removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as **deque**. To handle this, before **C++ 11**, we can swap the pointers:\n```c++\nint main( ) {\n    ...\n    v.clear( );\n    vector</string>(v).swap(v); //new a vector with the same content and swap\n    cout << v.capacity( ) << endl;  //memory usage: 0\n}\n```\nafter C++ 11, it provides function **shrink_to_fit( )** to remove the extra allocated memory.\n</br>\n\n## GC doesn't avoid memory leaks\nIt's not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. **Java** is such language which has powerful and unruly GC that can be hardly controlled (call **System.gc( )** doesn't certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.\n\nThere are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:\n```java\npublic class Sample {\n    Object object;\n    public void anymethod( ){\n        object = new Object( );\n        ...\n    }\n    ...\n}\n```\nIf ***object*** is only used inside ***anymethod( )***, then after stack pops ***anymethod( )***, the lifecycle of ***object*** should also be ended. But for here, because class ***Sample*** is still proceeding and keeps the reference of ***object***, ***object*** cannot be collected by GC and hence leaks the memory. The solution will be either init ***object*** inside ***anymethod( )*** (as a local varible) or set ***object*** to be ***null*** after ***anymethod*** is finished.\n\nAnother case is the use of ***HashSet***. ***HashSet*** is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the ***HashSet***, we need to override the method ***HashCode( )*** so that the same object has the same hash vaule and being stored in the same place in ***HashSet***. However, if we push something into the ***HashSet*** and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our ***HashSet*** to do some operations, for example delete this object from the ***HashSet***, this object might not be found in the set and hence cannot be deleted:\n```java\n    HashSet<Obejct> set = new HashSet<Object>( );\n    Object something = new Object( );\n    set.add( something );\n    something.doSomethingChanges( );\n    set.contains( something );  //this may return false\n    set.remove( something );  //'something' cannot be removed if the previous line returns false\n```\n</br>\n\n## Python\n\n","source":"_posts/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages.md","raw":"---\ntitle: Memory Leaks in Serveral Commonly Used Programming Languages\ndate: 2019-05-05 15:37:22\ntags: [C++, Java, Python, NodeJS]\nphotos: [\"../images/Memory-Leaks.JPG\"]\n---\nUsually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<!-- more -->\n\nWiki's Def:\n>[**Memory leak**](https://en.wikipedia.org/wiki/Memory_leak) is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: \n- memory which is no longer needed is not released\n- an object is stored in memory but cannot be accessed by the running code\n\nWe usually encounter this issue in programming languages that don't have [**GC**](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science), for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.\n</br>\n\n## This is really common in C++\nLet's take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won't be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.\n\nWe all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function ***free( )*** or ***delete[ ]***. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn't ever reach the line to release memory:\n```c++\nint sample( int n ) {\n    void  *ptr = malloc( 16 );\n    if ( n )\n        return -1; //memory leak here\n    free( ptr );\n    return 0;\n}\n```\nor:\n```c++\nclass Sample {\n    public:\n        init( ) { int *n = new int;  throw any_exception( ); }\n        ~init( ) { delete n; }\n    private:\n        int *n;\n};\nSample *n = new Sample; //memory leak here\n```\nThe solution to the above examples is also really simple: check control flows and **do remember to call the destructor before anywhere the procedure may exit**. Well if you want to do it in a fancy way, you can use ***smart pointer*** alternatively:\n```c++\nclass Sample {\n    public:\n        init( ) { n = std::make_shared<\\int>( new int ) }\n        ~init( ) {}\n    private:\n        std::shared_ptr<\\int> n;\n};\n```\nSmart pointer helps you manage this object and if it is not referred anymore, release its memory.\n</br>\n\n## free( )/delete is not enough\nNow your program has such a concrete control flow that **free( )** or **delete** is called before all the possible drop out. That is great but still not enough. **free( )** and **delete** can **only release the memory where the pointer is currently pointing to but not the pointer itself!** The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to **NULL**, instead some random values that cannot be predicted.\n```c++\nint main( ) {\n    char *p = ( char* ) malloc( sizeof( char ) * 100 );\n    strcpy( p, \"hello\" );\n    free( p );\n    if ( p != NULL ) //doesn't prevent issue\n        strcpy( p, \"world\" ); // error\n}\n```\nThis pointer p is called [***dangling pointer*** or ***wild pointer***](https://en.wikipedia.org/wiki/Dangling_pointer) and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called ***wild pointer***, and in real life it is called [**cat**](https://en.wikipedia.org/wiki/Cat). To prevent it, we should **always set the pointer to be NULL when it is not used/the memory is released**.\n\n***Note***: when you define a pointer without setting up its initial value, that pointer will also be a ***wild pointer*** and has a value of some random number (which doesn't equal to **NULL**). Hence it is necessary to set the value of a pointer to be **NULL** if it cannot be asigned a value at the beginning.\n\nFor some simple pointers, they can be reasigned to **NULL** to prevent ***wild pointer***, however for a pointer referring to a hierarchical object, simply setting to **NULL** cannot resolve the potential issues. For example, you are using a ***vector*** in C++ :\n```c++\nvector <\\string> v\nint main( ) {\n    for ( int i=0; i<1000000; i++ )\n        v.push_back( \"test\" );\n    \n    cout << v.capacity( ) << endl;  //memory usage: 54M\n    v.clear( );\n    cout << v.capacity( ) << endl;  //memory usage: still 54M\n}\n```\nEven though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. **clear( )** removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as **deque**. To handle this, before **C++ 11**, we can swap the pointers:\n```c++\nint main( ) {\n    ...\n    v.clear( );\n    vector</string>(v).swap(v); //new a vector with the same content and swap\n    cout << v.capacity( ) << endl;  //memory usage: 0\n}\n```\nafter C++ 11, it provides function **shrink_to_fit( )** to remove the extra allocated memory.\n</br>\n\n## GC doesn't avoid memory leaks\nIt's not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. **Java** is such language which has powerful and unruly GC that can be hardly controlled (call **System.gc( )** doesn't certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.\n\nThere are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:\n```java\npublic class Sample {\n    Object object;\n    public void anymethod( ){\n        object = new Object( );\n        ...\n    }\n    ...\n}\n```\nIf ***object*** is only used inside ***anymethod( )***, then after stack pops ***anymethod( )***, the lifecycle of ***object*** should also be ended. But for here, because class ***Sample*** is still proceeding and keeps the reference of ***object***, ***object*** cannot be collected by GC and hence leaks the memory. The solution will be either init ***object*** inside ***anymethod( )*** (as a local varible) or set ***object*** to be ***null*** after ***anymethod*** is finished.\n\nAnother case is the use of ***HashSet***. ***HashSet*** is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the ***HashSet***, we need to override the method ***HashCode( )*** so that the same object has the same hash vaule and being stored in the same place in ***HashSet***. However, if we push something into the ***HashSet*** and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our ***HashSet*** to do some operations, for example delete this object from the ***HashSet***, this object might not be found in the set and hence cannot be deleted:\n```java\n    HashSet<Obejct> set = new HashSet<Object>( );\n    Object something = new Object( );\n    set.add( something );\n    something.doSomethingChanges( );\n    set.contains( something );  //this may return false\n    set.remove( something );  //'something' cannot be removed if the previous line returns false\n```\n</br>\n\n## Python\n\n","slug":"Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages","published":1,"updated":"2019-05-06T07:25:41.838Z","comments":1,"layout":"post","link":"","_id":"cjvgduyrn00020saors67eo3d","content":"<p>Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<a id=\"more\"></a></p>\n<p>Wiki’s Def:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Memory_leak\" target=\"_blank\" rel=\"noopener\"><strong>Memory leak</strong></a> is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: </p>\n<ul>\n<li>memory which is no longer needed is not released</li>\n<li>an object is stored in memory but cannot be accessed by the running code</li>\n</ul>\n</blockquote>\n<p>We usually encounter this issue in programming languages that don’t have <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science\" target=\"_blank\" rel=\"noopener\"><strong>GC</strong></a>, for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.<br><br></p>\n<h2 id=\"This-is-really-common-in-C\"><a href=\"#This-is-really-common-in-C\" class=\"headerlink\" title=\"This is really common in C++\"></a>This is really common in C++</h2><p>Let’s take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won’t be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.</p>\n<p>We all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function <strong><em>free( )</em></strong> or <strong><em>delete[ ]</em></strong>. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn’t ever reach the line to release memory:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sample</span><span class=\"params\">( <span class=\"keyword\">int</span> n )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span>  *ptr = <span class=\"built_in\">malloc</span>( <span class=\"number\">16</span> );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( n )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">//memory leak here</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>( ptr );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>or:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        init( ) &#123; <span class=\"keyword\">int</span> *n = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;  <span class=\"keyword\">throw</span> any_exception( ); &#125;</span><br><span class=\"line\">        ~init( ) &#123; <span class=\"keyword\">delete</span> n; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> *n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Sample *n = <span class=\"keyword\">new</span> Sample; <span class=\"comment\">//memory leak here</span></span><br></pre></td></tr></table></figure></p>\n<p>The solution to the above examples is also really simple: check control flows and <strong>do remember to call the destructor before anywhere the procedure may exit</strong>. Well if you want to do it in a fancy way, you can use <strong><em>smart pointer</em></strong> alternatively:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        init( ) &#123; n = <span class=\"built_in\">std</span>::make_shared&lt;\\<span class=\"keyword\">int</span>&gt;( <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> ) &#125;</span><br><span class=\"line\">        ~init( ) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;\\<span class=\"keyword\">int</span>&gt; n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>Smart pointer helps you manage this object and if it is not referred anymore, release its memory.<br><br></p>\n<h2 id=\"free-delete-is-not-enough\"><a href=\"#free-delete-is-not-enough\" class=\"headerlink\" title=\"free( )/delete is not enough\"></a>free( )/delete is not enough</h2><p>Now your program has such a concrete control flow that <strong>free( )</strong> or <strong>delete</strong> is called before all the possible drop out. That is great but still not enough. <strong>free( )</strong> and <strong>delete</strong> can <strong>only release the memory where the pointer is currently pointing to but not the pointer itself!</strong> The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to <strong>NULL</strong>, instead some random values that cannot be predicted.<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p = ( <span class=\"keyword\">char</span>* ) <span class=\"built_in\">malloc</span>( <span class=\"keyword\">sizeof</span>( <span class=\"keyword\">char</span> ) * <span class=\"number\">100</span> );</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>( p, <span class=\"string\">\"hello\"</span> );</span><br><span class=\"line\">    <span class=\"built_in\">free</span>( p );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( p != <span class=\"literal\">NULL</span> ) <span class=\"comment\">//doesn't prevent issue</span></span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>( p, <span class=\"string\">\"world\"</span> ); <span class=\"comment\">// error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This pointer p is called <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\" target=\"_blank\" rel=\"noopener\"><strong><em>dangling pointer</em></strong> or <strong><em>wild pointer</em></strong></a> and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called <strong><em>wild pointer</em></strong>, and in real life it is called <a href=\"https://en.wikipedia.org/wiki/Cat\" target=\"_blank\" rel=\"noopener\"><strong>cat</strong></a>. To prevent it, we should <strong>always set the pointer to be NULL when it is not used/the memory is released</strong>.</p>\n<p><strong><em>Note</em></strong>: when you define a pointer without setting up its initial value, that pointer will also be a <strong><em>wild pointer</em></strong> and has a value of some random number (which doesn’t equal to <strong>NULL</strong>). Hence it is necessary to set the value of a pointer to be <strong>NULL</strong> if it cannot be asigned a value at the beginning.</p>\n<p>For some simple pointers, they can be reasigned to <strong>NULL</strong> to prevent <strong><em>wild pointer</em></strong>, however for a pointer referring to a hierarchical object, simply setting to <strong>NULL</strong> cannot resolve the potential issues. For example, you are using a <strong><em>vector</em></strong> in C++ :<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> &lt;\\<span class=\"built_in\">string</span>&gt; v</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000000</span>; i++ )</span><br><span class=\"line\">        v.push_back( <span class=\"string\">\"test\"</span> );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v.capacity( ) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//memory usage: 54M</span></span><br><span class=\"line\">    v.clear( );</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v.capacity( ) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//memory usage: still 54M</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Even though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. <strong>clear( )</strong> removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as <strong>deque</strong>. To handle this, before <strong>C++ 11</strong>, we can swap the pointers:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    v.clear( );</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;/<span class=\"built_in\">string</span>&gt;(v).swap(v); <span class=\"comment\">//new a vector with the same content and swap</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v.capacity( ) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//memory usage: 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>after C++ 11, it provides function <strong>shrink_to_fit( )</strong> to remove the extra allocated memory.<br><br></p>\n<h2 id=\"GC-doesn’t-avoid-memory-leaks\"><a href=\"#GC-doesn’t-avoid-memory-leaks\" class=\"headerlink\" title=\"GC doesn’t avoid memory leaks\"></a>GC doesn’t avoid memory leaks</h2><p>It’s not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. <strong>Java</strong> is such language which has powerful and unruly GC that can be hardly controlled (call <strong>System.gc( )</strong> doesn’t certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.</p>\n<p>There are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> </span>&#123;</span><br><span class=\"line\">    Object object;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">anymethod</span><span class=\"params\">( )</span></span>&#123;</span><br><span class=\"line\">        object = <span class=\"keyword\">new</span> Object( );</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If <strong><em>object</em></strong> is only used inside <strong><em>anymethod( )</em></strong>, then after stack pops <strong><em>anymethod( )</em></strong>, the lifecycle of <strong><em>object</em></strong> should also be ended. But for here, because class <strong><em>Sample</em></strong> is still proceeding and keeps the reference of <strong><em>object</em></strong>, <strong><em>object</em></strong> cannot be collected by GC and hence leaks the memory. The solution will be either init <strong><em>object</em></strong> inside <strong><em>anymethod( )</em></strong> (as a local varible) or set <strong><em>object</em></strong> to be <strong><em>null</em></strong> after <strong><em>anymethod</em></strong> is finished.</p>\n<p>Another case is the use of <strong><em>HashSet</em></strong>. <strong><em>HashSet</em></strong> is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the <strong><em>HashSet</em></strong>, we need to override the method <strong><em>HashCode( )</em></strong> so that the same object has the same hash vaule and being stored in the same place in <strong><em>HashSet</em></strong>. However, if we push something into the <strong><em>HashSet</em></strong> and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our <strong><em>HashSet</em></strong> to do some operations, for example delete this object from the <strong><em>HashSet</em></strong>, this object might not be found in the set and hence cannot be deleted:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet&lt;Obejct&gt; set = <span class=\"keyword\">new</span> HashSet&lt;Object&gt;( );</span><br><span class=\"line\">Object something = <span class=\"keyword\">new</span> Object( );</span><br><span class=\"line\">set.add( something );</span><br><span class=\"line\">something.doSomethingChanges( );</span><br><span class=\"line\">set.contains( something );  <span class=\"comment\">//this may return false</span></span><br><span class=\"line\">set.remove( something );  <span class=\"comment\">//'something' cannot be removed if the previous line returns false</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2>","site":{"data":{}},"excerpt":"<p>Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.","more":"</p>\n<p>Wiki’s Def:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Memory_leak\" target=\"_blank\" rel=\"noopener\"><strong>Memory leak</strong></a> is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: </p>\n<ul>\n<li>memory which is no longer needed is not released</li>\n<li>an object is stored in memory but cannot be accessed by the running code</li>\n</ul>\n</blockquote>\n<p>We usually encounter this issue in programming languages that don’t have <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science\" target=\"_blank\" rel=\"noopener\"><strong>GC</strong></a>, for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.<br><br></p>\n<h2 id=\"This-is-really-common-in-C\"><a href=\"#This-is-really-common-in-C\" class=\"headerlink\" title=\"This is really common in C++\"></a>This is really common in C++</h2><p>Let’s take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won’t be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.</p>\n<p>We all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function <strong><em>free( )</em></strong> or <strong><em>delete[ ]</em></strong>. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn’t ever reach the line to release memory:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sample</span><span class=\"params\">( <span class=\"keyword\">int</span> n )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span>  *ptr = <span class=\"built_in\">malloc</span>( <span class=\"number\">16</span> );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( n )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">//memory leak here</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>( ptr );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>or:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        init( ) &#123; <span class=\"keyword\">int</span> *n = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;  <span class=\"keyword\">throw</span> any_exception( ); &#125;</span><br><span class=\"line\">        ~init( ) &#123; <span class=\"keyword\">delete</span> n; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> *n;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Sample *n = <span class=\"keyword\">new</span> Sample; <span class=\"comment\">//memory leak here</span></span><br></pre></td></tr></table></figure></p>\n<p>The solution to the above examples is also really simple: check control flows and <strong>do remember to call the destructor before anywhere the procedure may exit</strong>. Well if you want to do it in a fancy way, you can use <strong><em>smart pointer</em></strong> alternatively:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        init( ) &#123; n = <span class=\"built_in\">std</span>::make_shared&lt;\\<span class=\"keyword\">int</span>&gt;( <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> ) &#125;</span><br><span class=\"line\">        ~init( ) &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">shared_ptr</span>&lt;\\<span class=\"keyword\">int</span>&gt; n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>Smart pointer helps you manage this object and if it is not referred anymore, release its memory.<br><br></p>\n<h2 id=\"free-delete-is-not-enough\"><a href=\"#free-delete-is-not-enough\" class=\"headerlink\" title=\"free( )/delete is not enough\"></a>free( )/delete is not enough</h2><p>Now your program has such a concrete control flow that <strong>free( )</strong> or <strong>delete</strong> is called before all the possible drop out. That is great but still not enough. <strong>free( )</strong> and <strong>delete</strong> can <strong>only release the memory where the pointer is currently pointing to but not the pointer itself!</strong> The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to <strong>NULL</strong>, instead some random values that cannot be predicted.<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p = ( <span class=\"keyword\">char</span>* ) <span class=\"built_in\">malloc</span>( <span class=\"keyword\">sizeof</span>( <span class=\"keyword\">char</span> ) * <span class=\"number\">100</span> );</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>( p, <span class=\"string\">\"hello\"</span> );</span><br><span class=\"line\">    <span class=\"built_in\">free</span>( p );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( p != <span class=\"literal\">NULL</span> ) <span class=\"comment\">//doesn't prevent issue</span></span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>( p, <span class=\"string\">\"world\"</span> ); <span class=\"comment\">// error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This pointer p is called <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\" target=\"_blank\" rel=\"noopener\"><strong><em>dangling pointer</em></strong> or <strong><em>wild pointer</em></strong></a> and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called <strong><em>wild pointer</em></strong>, and in real life it is called <a href=\"https://en.wikipedia.org/wiki/Cat\" target=\"_blank\" rel=\"noopener\"><strong>cat</strong></a>. To prevent it, we should <strong>always set the pointer to be NULL when it is not used/the memory is released</strong>.</p>\n<p><strong><em>Note</em></strong>: when you define a pointer without setting up its initial value, that pointer will also be a <strong><em>wild pointer</em></strong> and has a value of some random number (which doesn’t equal to <strong>NULL</strong>). Hence it is necessary to set the value of a pointer to be <strong>NULL</strong> if it cannot be asigned a value at the beginning.</p>\n<p>For some simple pointers, they can be reasigned to <strong>NULL</strong> to prevent <strong><em>wild pointer</em></strong>, however for a pointer referring to a hierarchical object, simply setting to <strong>NULL</strong> cannot resolve the potential issues. For example, you are using a <strong><em>vector</em></strong> in C++ :<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> &lt;\\<span class=\"built_in\">string</span>&gt; v</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">1000000</span>; i++ )</span><br><span class=\"line\">        v.push_back( <span class=\"string\">\"test\"</span> );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v.capacity( ) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//memory usage: 54M</span></span><br><span class=\"line\">    v.clear( );</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v.capacity( ) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//memory usage: still 54M</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Even though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. <strong>clear( )</strong> removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as <strong>deque</strong>. To handle this, before <strong>C++ 11</strong>, we can swap the pointers:<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( )</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    v.clear( );</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;/<span class=\"built_in\">string</span>&gt;(v).swap(v); <span class=\"comment\">//new a vector with the same content and swap</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v.capacity( ) &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//memory usage: 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>after C++ 11, it provides function <strong>shrink_to_fit( )</strong> to remove the extra allocated memory.<br><br></p>\n<h2 id=\"GC-doesn’t-avoid-memory-leaks\"><a href=\"#GC-doesn’t-avoid-memory-leaks\" class=\"headerlink\" title=\"GC doesn’t avoid memory leaks\"></a>GC doesn’t avoid memory leaks</h2><p>It’s not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. <strong>Java</strong> is such language which has powerful and unruly GC that can be hardly controlled (call <strong>System.gc( )</strong> doesn’t certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.</p>\n<p>There are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> </span>&#123;</span><br><span class=\"line\">    Object object;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">anymethod</span><span class=\"params\">( )</span></span>&#123;</span><br><span class=\"line\">        object = <span class=\"keyword\">new</span> Object( );</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If <strong><em>object</em></strong> is only used inside <strong><em>anymethod( )</em></strong>, then after stack pops <strong><em>anymethod( )</em></strong>, the lifecycle of <strong><em>object</em></strong> should also be ended. But for here, because class <strong><em>Sample</em></strong> is still proceeding and keeps the reference of <strong><em>object</em></strong>, <strong><em>object</em></strong> cannot be collected by GC and hence leaks the memory. The solution will be either init <strong><em>object</em></strong> inside <strong><em>anymethod( )</em></strong> (as a local varible) or set <strong><em>object</em></strong> to be <strong><em>null</em></strong> after <strong><em>anymethod</em></strong> is finished.</p>\n<p>Another case is the use of <strong><em>HashSet</em></strong>. <strong><em>HashSet</em></strong> is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the <strong><em>HashSet</em></strong>, we need to override the method <strong><em>HashCode( )</em></strong> so that the same object has the same hash vaule and being stored in the same place in <strong><em>HashSet</em></strong>. However, if we push something into the <strong><em>HashSet</em></strong> and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our <strong><em>HashSet</em></strong> to do some operations, for example delete this object from the <strong><em>HashSet</em></strong>, this object might not be found in the set and hence cannot be deleted:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashSet&lt;Obejct&gt; set = <span class=\"keyword\">new</span> HashSet&lt;Object&gt;( );</span><br><span class=\"line\">Object something = <span class=\"keyword\">new</span> Object( );</span><br><span class=\"line\">set.add( something );</span><br><span class=\"line\">something.doSomethingChanges( );</span><br><span class=\"line\">set.contains( something );  <span class=\"comment\">//this may return false</span></span><br><span class=\"line\">set.remove( something );  <span class=\"comment\">//'something' cannot be removed if the previous line returns false</span></span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2>"},{"title":"How to debug NodeJS on VS Code","date":"2019-05-08T02:50:53.000Z","photos":["../images/vscode.JPG"],"_content":"Here are the steps to start debug mode in VS Code:\n\n1. On the left side bar, click \"debug\" icon to switch to debug viewlet\n\n2. On the top left, click the gear icon\n\n3. Then `launch.json` will be opened in the editor\n\n4. Replace the content of the file to be:\n<!-- more -->\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n5. Replace the command line arguments to whatever you need\n\n6. Start the debugger or press `F5`\n\nYou are all good to go!\n\nIf your program reads from **stdin**, please add a \"console\" attribute to the launch config:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t],\n\t\t\t\"console\": \"integratedTerminal\"\n\t\t}\n\t]\n}\n```\n\nIf you are running the program in the **terminal**, you can change the content alternatively to be:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"name\": \"Attach to app.js\",\n\t\t\t\"port\": \"5858\"\n\t\t}\n\t]\n}\n```\nThe port is the **debug port** and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run:\n```shell\nnode --debug-brk app.js arg1 arg2 arg3...\n```\n>The`--debug-brk` lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.\n\nRunning such command, you may encounter a problem like this:\n```\n(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.\n```\nAs discussed in [microsoft github offical repository](https://github.com/Microsoft/vscode/issues/32529), currently there is **no way** to prevent this happening. The reason why using `--inspect --debug-brk` is explained [here](https://github.com/microsoft/vscode/issues/27731):\n>This combination of args is the only way to enter debug mode across all node versions. At some point I'll switch to inspect-brk if we don't want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.\n\n>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.\n\n","source":"_posts/How-to-debug-NodeJS-on-VS-Code.md","raw":"---\ntitle: How to debug NodeJS on VS Code\ndate: 2019-05-08 11:50:53\ntags: [VS Code, NodeJS]\nphotos: [\"../images/vscode.JPG\"]\n---\nHere are the steps to start debug mode in VS Code:\n\n1. On the left side bar, click \"debug\" icon to switch to debug viewlet\n\n2. On the top left, click the gear icon\n\n3. Then `launch.json` will be opened in the editor\n\n4. Replace the content of the file to be:\n<!-- more -->\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n5. Replace the command line arguments to whatever you need\n\n6. Start the debugger or press `F5`\n\nYou are all good to go!\n\nIf your program reads from **stdin**, please add a \"console\" attribute to the launch config:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t],\n\t\t\t\"console\": \"integratedTerminal\"\n\t\t}\n\t]\n}\n```\n\nIf you are running the program in the **terminal**, you can change the content alternatively to be:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"name\": \"Attach to app.js\",\n\t\t\t\"port\": \"5858\"\n\t\t}\n\t]\n}\n```\nThe port is the **debug port** and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run:\n```shell\nnode --debug-brk app.js arg1 arg2 arg3...\n```\n>The`--debug-brk` lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.\n\nRunning such command, you may encounter a problem like this:\n```\n(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.\n```\nAs discussed in [microsoft github offical repository](https://github.com/Microsoft/vscode/issues/32529), currently there is **no way** to prevent this happening. The reason why using `--inspect --debug-brk` is explained [here](https://github.com/microsoft/vscode/issues/27731):\n>This combination of args is the only way to enter debug mode across all node versions. At some point I'll switch to inspect-brk if we don't want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.\n\n>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.\n\n","slug":"How-to-debug-NodeJS-on-VS-Code","published":1,"updated":"2019-05-09T08:21:43.107Z","comments":1,"layout":"post","link":"","_id":"cjvgduyrw00050saop1fwwjka","content":"<p>Here are the steps to start debug mode in VS Code:</p>\n<ol>\n<li><p>On the left side bar, click “debug” icon to switch to debug viewlet</p>\n</li>\n<li><p>On the top left, click the gear icon</p>\n</li>\n<li><p>Then <code>launch.json</code> will be opened in the editor</p>\n</li>\n<li><p>Replace the content of the file to be:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"arg1\"</span>, <span class=\"string\">\"arg2\"</span>, <span class=\"string\">\"arg3\"</span></span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Replace the command line arguments to whatever you need</p>\n</li>\n<li><p>Start the debugger or press <code>F5</code></p>\n</li>\n</ol>\n<p>You are all good to go!</p>\n<p>If your program reads from <strong>stdin</strong>, please add a “console” attribute to the launch config:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"arg1\"</span>, <span class=\"string\">\"arg2\"</span>, <span class=\"string\">\"arg3\"</span></span><br><span class=\"line\">\t\t\t],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"console\"</span>: <span class=\"string\">\"integratedTerminal\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you are running the program in the <strong>terminal</strong>, you can change the content alternatively to be:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"request\"</span>: <span class=\"string\">\"attach\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Attach to app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"port\"</span>: <span class=\"string\">\"5858\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The port is the <strong>debug port</strong> and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --debug-brk app.js arg1 arg2 arg3...</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>The<code>--debug-brk</code> lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.</p>\n</blockquote>\n<p>Running such command, you may encounter a problem like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.</span><br></pre></td></tr></table></figure></p>\n<p>As discussed in <a href=\"https://github.com/Microsoft/vscode/issues/32529\" target=\"_blank\" rel=\"noopener\">microsoft github offical repository</a>, currently there is <strong>no way</strong> to prevent this happening. The reason why using <code>--inspect --debug-brk</code> is explained <a href=\"https://github.com/microsoft/vscode/issues/27731\" target=\"_blank\" rel=\"noopener\">here</a>:</p>\n<blockquote>\n<p>This combination of args is the only way to enter debug mode across all node versions. At some point I’ll switch to inspect-brk if we don’t want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.</p>\n</blockquote>\n<blockquote>\n<p>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Here are the steps to start debug mode in VS Code:</p>\n<ol>\n<li><p>On the left side bar, click “debug” icon to switch to debug viewlet</p>\n</li>\n<li><p>On the top left, click the gear icon</p>\n</li>\n<li><p>Then <code>launch.json</code> will be opened in the editor</p>\n</li>\n<li><p>Replace the content of the file to be:</p>","more":"<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"arg1\"</span>, <span class=\"string\">\"arg2\"</span>, <span class=\"string\">\"arg3\"</span></span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Replace the command line arguments to whatever you need</p>\n</li>\n<li><p>Start the debugger or press <code>F5</code></p>\n</li>\n</ol>\n<p>You are all good to go!</p>\n<p>If your program reads from <strong>stdin</strong>, please add a “console” attribute to the launch config:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Launch app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"stopOnEntry\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"args\"</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"arg1\"</span>, <span class=\"string\">\"arg2\"</span>, <span class=\"string\">\"arg3\"</span></span><br><span class=\"line\">\t\t\t],</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"console\"</span>: <span class=\"string\">\"integratedTerminal\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>If you are running the program in the <strong>terminal</strong>, you can change the content alternatively to be:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.2.0\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"configurations\"</span>: [</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"node\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"request\"</span>: <span class=\"string\">\"attach\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Attach to app.js\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"port\"</span>: <span class=\"string\">\"5858\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The port is the <strong>debug port</strong> and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --debug-brk app.js arg1 arg2 arg3...</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>The<code>--debug-brk</code> lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.</p>\n</blockquote>\n<p>Running such command, you may encounter a problem like this:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.</span><br></pre></td></tr></table></figure></p>\n<p>As discussed in <a href=\"https://github.com/Microsoft/vscode/issues/32529\" target=\"_blank\" rel=\"noopener\">microsoft github offical repository</a>, currently there is <strong>no way</strong> to prevent this happening. The reason why using <code>--inspect --debug-brk</code> is explained <a href=\"https://github.com/microsoft/vscode/issues/27731\" target=\"_blank\" rel=\"noopener\">here</a>:</p>\n<blockquote>\n<p>This combination of args is the only way to enter debug mode across all node versions. At some point I’ll switch to inspect-brk if we don’t want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.</p>\n</blockquote>\n<blockquote>\n<p>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.</p>\n</blockquote>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-27T07:51:40.239Z","updated":"2019-04-29T07:18:13.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvgduys000060saoffk0w01a","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"How to Check Open TCP/IP Ports in Mac OS X","date":"2019-05-06T08:48:23.000Z","photos":["../images/cli.JPG"],"_content":"The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command **`netstat`** is useful:\n>netstat -ap tcp | grep -i \"listen\"\n\n<!-- more -->\nThat will print out something like this in the console:\n```\nAchive Internet connections (including servers)\nProto       Recv-Q      Send-Q      Local Address       Foreign Address     (state)   \ntcp4         0                0                ocalhost.25035      *.*                          LISTEN\n```\nThat works but the problem is that it doesn't show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. \n\nThen found out that there is another command **`lsof`**:\n>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN\n\n```\nCOMMAND     PID     USER   FD   TYPE    DEVICE      SIZE/OFF    NODE          NAME\nsyslogd           350      root     5w     VREG  222,5          0                 440818        /var/adm/messages\nsyslogd           350      root     6w     VREG  222,5          339098       6248            /var/log/syslog\ncron                353      root     cwd   VDIR    222,5          512             254550        /var -- atjobs\n```\n\n**`-n`** : No dns (no host name)\n**`-P`** : List port number instead of its name\n**`-i `** : Lists IP sockets\n\nTo view the port associated with a daemon:\n>lsof -i -n -P | grep python\n\n</br>\n\nIf we just want to see the name:\n>sudo lsof -i :PortNumber | grep LISTEN\n\n</br>\n\nGet all running **PID** in a specific port:\n>sudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID\n\n</br>\n\nAnd then we can kill all the processes:\n>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID)\n\n</br>\n\nlist all commands:\n>lsof -h\n\n","source":"_posts/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X.md","raw":"---\ntitle: How to Check Open TCP/IP Ports in Mac OS X\ndate: 2019-05-06 17:48:23\ntags: [CLI, Mac OS, port]\nphotos: [\"../images/cli.JPG\"]\n---\nThe core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command **`netstat`** is useful:\n>netstat -ap tcp | grep -i \"listen\"\n\n<!-- more -->\nThat will print out something like this in the console:\n```\nAchive Internet connections (including servers)\nProto       Recv-Q      Send-Q      Local Address       Foreign Address     (state)   \ntcp4         0                0                ocalhost.25035      *.*                          LISTEN\n```\nThat works but the problem is that it doesn't show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. \n\nThen found out that there is another command **`lsof`**:\n>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN\n\n```\nCOMMAND     PID     USER   FD   TYPE    DEVICE      SIZE/OFF    NODE          NAME\nsyslogd           350      root     5w     VREG  222,5          0                 440818        /var/adm/messages\nsyslogd           350      root     6w     VREG  222,5          339098       6248            /var/log/syslog\ncron                353      root     cwd   VDIR    222,5          512             254550        /var -- atjobs\n```\n\n**`-n`** : No dns (no host name)\n**`-P`** : List port number instead of its name\n**`-i `** : Lists IP sockets\n\nTo view the port associated with a daemon:\n>lsof -i -n -P | grep python\n\n</br>\n\nIf we just want to see the name:\n>sudo lsof -i :PortNumber | grep LISTEN\n\n</br>\n\nGet all running **PID** in a specific port:\n>sudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID\n\n</br>\n\nAnd then we can kill all the processes:\n>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID)\n\n</br>\n\nlist all commands:\n>lsof -h\n\n","slug":"How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X","published":1,"updated":"2019-05-06T09:48:27.090Z","comments":1,"layout":"post","link":"","_id":"cjvgduys200070saom1wdvesh","content":"<p>The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command <strong><code>netstat</code></strong> is useful:</p>\n<blockquote>\n<p>netstat -ap tcp | grep -i “listen”</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>That will print out something like this in the console:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Achive Internet connections (including servers)</span><br><span class=\"line\">Proto       Recv-Q      Send-Q      Local Address       Foreign Address     (state)   </span><br><span class=\"line\">tcp4         0                0                ocalhost.25035      *.*                          LISTEN</span><br></pre></td></tr></table></figure></p>\n<p>That works but the problem is that it doesn’t show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. </p>\n<p>Then found out that there is another command <strong><code>lsof</code></strong>:</p>\n<blockquote>\n<p>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMAND     PID     USER   FD   TYPE    DEVICE      SIZE/OFF    NODE          NAME</span><br><span class=\"line\">syslogd           350      root     5w     VREG  222,5          0                 440818        /var/adm/messages</span><br><span class=\"line\">syslogd           350      root     6w     VREG  222,5          339098       6248            /var/log/syslog</span><br><span class=\"line\">cron                353      root     cwd   VDIR    222,5          512             254550        /var -- atjobs</span><br></pre></td></tr></table></figure>\n<p><strong><code>-n</code></strong> : No dns (no host name)<br><strong><code>-P</code></strong> : List port number instead of its name<br><strong><code>-i</code></strong> : Lists IP sockets</p>\n<p>To view the port associated with a daemon:</p>\n<blockquote>\n<p>lsof -i -n -P | grep python</p>\n</blockquote>\n<p><br></p>\n<p>If we just want to see the name:</p>\n<blockquote>\n<p>sudo lsof -i :PortNumber | grep LISTEN</p>\n</blockquote>\n<p><br></p>\n<p>Get all running <strong>PID</strong> in a specific port:</p>\n<blockquote>\n<p>sudo lsof -i :PortNumber| grep LISTEN | awk ‘{ print $2; }’ | head -n 2 | grep -v PID</p>\n</blockquote>\n<p><br></p>\n<p>And then we can kill all the processes:</p>\n<blockquote>\n<p>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk ‘{ print $2; }’ | head -n 2 | grep -v PID)</p>\n</blockquote>\n<p><br></p>\n<p>list all commands:</p>\n<blockquote>\n<p>lsof -h</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command <strong><code>netstat</code></strong> is useful:</p>\n<blockquote>\n<p>netstat -ap tcp | grep -i “listen”</p>\n</blockquote>","more":"<p>That will print out something like this in the console:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Achive Internet connections (including servers)</span><br><span class=\"line\">Proto       Recv-Q      Send-Q      Local Address       Foreign Address     (state)   </span><br><span class=\"line\">tcp4         0                0                ocalhost.25035      *.*                          LISTEN</span><br></pre></td></tr></table></figure></p>\n<p>That works but the problem is that it doesn’t show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. </p>\n<p>Then found out that there is another command <strong><code>lsof</code></strong>:</p>\n<blockquote>\n<p>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">COMMAND     PID     USER   FD   TYPE    DEVICE      SIZE/OFF    NODE          NAME</span><br><span class=\"line\">syslogd           350      root     5w     VREG  222,5          0                 440818        /var/adm/messages</span><br><span class=\"line\">syslogd           350      root     6w     VREG  222,5          339098       6248            /var/log/syslog</span><br><span class=\"line\">cron                353      root     cwd   VDIR    222,5          512             254550        /var -- atjobs</span><br></pre></td></tr></table></figure>\n<p><strong><code>-n</code></strong> : No dns (no host name)<br><strong><code>-P</code></strong> : List port number instead of its name<br><strong><code>-i</code></strong> : Lists IP sockets</p>\n<p>To view the port associated with a daemon:</p>\n<blockquote>\n<p>lsof -i -n -P | grep python</p>\n</blockquote>\n<p><br></p>\n<p>If we just want to see the name:</p>\n<blockquote>\n<p>sudo lsof -i :PortNumber | grep LISTEN</p>\n</blockquote>\n<p><br></p>\n<p>Get all running <strong>PID</strong> in a specific port:</p>\n<blockquote>\n<p>sudo lsof -i :PortNumber| grep LISTEN | awk ‘{ print $2; }’ | head -n 2 | grep -v PID</p>\n</blockquote>\n<p><br></p>\n<p>And then we can kill all the processes:</p>\n<blockquote>\n<p>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk ‘{ print $2; }’ | head -n 2 | grep -v PID)</p>\n</blockquote>\n<p><br></p>\n<p>list all commands:</p>\n<blockquote>\n<p>lsof -h</p>\n</blockquote>"},{"title":"Prefix Notation","date":"2019-04-30T02:11:21.000Z","photos":["../images/lisp.JPG"],"_content":"```python\n( 20 + 5 )\n( 16 / 4 )\n```\nSuch expressions which denote procedures, are called ***combinations***. The left and the right elements are called ***operands***, and the element in the middle to indicate the operation is called ***operator***. This is the most common style we have seen by now; however there is another way to construct a procedure known as ***prefix notation***:\n```python\n( + 20 5 )\n( / 16 4 )\n```\nInstead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<!-- more -->\n\nconditions:\n```python\n( define ( abs x )\n    ( cond (( > x 0 ) x )\n           (( = x 0 ) 0 )\n           (( < x 0 ) ( - x ))))\n```\nThe general form can be expressed as:\n>( cond (<\\P1> <\\E1>)\n>       (<\\P2> <\\E2>)\n>            ...\n>       (<\\Pn> <\\En>))\n\nIf none of them is evaluated to be **true**, then the value of the **cond** will be **undefined**. It can also be simplified by using ***else***:\n```python\n( define ( abs x )\n    ( cond (( < x 0 ) ( - x ))\n           ( else  x )))\n```\nIf there is only two ***predicates*** (the expression to be interpreted as either true of false), then it can use a special form ***if***:\n```python\n( define ( abs x )\n    ( if ( < x 0 )\n         ( - x )\n         x ))\n```\nThe general form of an ***if*** expression is:\n>( if <\\predicate> <\\consequent> <\\alternative> )\n\nThe logic operators:\n>( and <\\E1> ... <\\En> )\n>( or <\\E1> ... <\\En> )\n>( not <E> )\n\nThen use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:\n```python\n( define ( >= x y )\n    ( or ( > x y ) ( = x y ))\n```\nThat is all the syntax, **there is no loop in a functional programming language!**</br></br>\n## Recursion\nConsidering the factorial function:\n> n! = n ⋅ (n-1) ⋅ (n-2) ⋅ ... ⋅2⋅1\n\nWhich can be computed as:\n> n! = n ⋅ (n-1)!\n\nIf we end it up with **1!**, then simply output **1**. Then the factorial function can be implemented in ***linear recursion***:\n```python\n( define ( factorial n )\n    ( if ( = n 1 )\n        1\n        ( * n ( factorial ( - n 1 )))))\n```\n***Linear recursion*** defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as ***Tree Recursion***. The best example will be the Fibonacci series, in which each element is the sum of the previous two:\n```python\n( define ( fib n )\n    ( cond ( = n 0 ) 0 )\n           ( = n 1 ) 1 )\n           ( else ( + ( fib( - n 1 ) )\n                      ( fib( - n 2 ) )))))\n```\nYou may find out that this procedure is not really efficient because to compute **fib( - n 1)**, **fib( - n 2)** has to be computed one more time which causes duplicated work.\n![Tree Recursion](../images/treeRecursion.png)\nTherefore, instead of ***Tree Recursion***, let's try to convert it to be ***Linear Recursion***. Reasign the sum of **a** and **b** to **a**, and the previous **a** to **b**:\n```python\n( define ( fib n )\n    ( iterate 1 0 n ))\n\n( define ( iterate a b count )\n    ( if ( = count 0 )\n        b\n        ( iterate ( + a b ) a ( - count 1 ))))\n```\n</br>\n## Lambda\nInstead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides ***Lambda Expression***:\n>( lambda ( <\\formal-param> ) <\\body> )\n\nFor instance,\n```python\n( define ( Add a b ) ( + a b ))\n```\ncan be written as:\n```python\n( define add ( lambda ( a b ) ( + a b ) ) )\n```\nAnd operators can also be represented by ***Lambda Expression***:\n```python\n( ( lambda ( a b ) ( + ( * a a ) ( * b b ) ) ) 2 3 )\n```\nAnother use of ***Lambda Expression*** is creating local variables. An expression can be binded with a specific name by using keyword ***let***. The above example then can be interpreted as:\n```python\n( define ( sumsqr x y )\n    ( let ( a ( * x x ) )\n          ( b ( * y y ) )\n        ( + a b ) ) )\n```\n***Note:*** The scope of a variable specified by a ***let*** is only applied to the **body** of the ***let***. For example, if the evalue of **x** is **2**, then the expression:\n```python\n( let ( ( x 3 )\n        ( y ( + x 2 ) ) )\n    ( * x y ) )\n```\nThe value of **y** will be **4** as being outside of the **let** body, and the output will be **3 * 4 = 12**. It seems like ***let*** is really similar to ***define***; however, in the most cases, we much prefer using ***let*** and only apply ***define*** to **internal procedures**.","source":"_posts/Prefix-Notation.md","raw":"---\ntitle: Prefix Notation\ndate: 2019-04-30 11:11:21\ntags: [Lisp, Scheme, Prefix Notation, Functional Programming]\nphotos: [\"../images/lisp.JPG\"]\n---\n```python\n( 20 + 5 )\n( 16 / 4 )\n```\nSuch expressions which denote procedures, are called ***combinations***. The left and the right elements are called ***operands***, and the element in the middle to indicate the operation is called ***operator***. This is the most common style we have seen by now; however there is another way to construct a procedure known as ***prefix notation***:\n```python\n( + 20 5 )\n( / 16 4 )\n```\nInstead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<!-- more -->\n\nconditions:\n```python\n( define ( abs x )\n    ( cond (( > x 0 ) x )\n           (( = x 0 ) 0 )\n           (( < x 0 ) ( - x ))))\n```\nThe general form can be expressed as:\n>( cond (<\\P1> <\\E1>)\n>       (<\\P2> <\\E2>)\n>            ...\n>       (<\\Pn> <\\En>))\n\nIf none of them is evaluated to be **true**, then the value of the **cond** will be **undefined**. It can also be simplified by using ***else***:\n```python\n( define ( abs x )\n    ( cond (( < x 0 ) ( - x ))\n           ( else  x )))\n```\nIf there is only two ***predicates*** (the expression to be interpreted as either true of false), then it can use a special form ***if***:\n```python\n( define ( abs x )\n    ( if ( < x 0 )\n         ( - x )\n         x ))\n```\nThe general form of an ***if*** expression is:\n>( if <\\predicate> <\\consequent> <\\alternative> )\n\nThe logic operators:\n>( and <\\E1> ... <\\En> )\n>( or <\\E1> ... <\\En> )\n>( not <E> )\n\nThen use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:\n```python\n( define ( >= x y )\n    ( or ( > x y ) ( = x y ))\n```\nThat is all the syntax, **there is no loop in a functional programming language!**</br></br>\n## Recursion\nConsidering the factorial function:\n> n! = n ⋅ (n-1) ⋅ (n-2) ⋅ ... ⋅2⋅1\n\nWhich can be computed as:\n> n! = n ⋅ (n-1)!\n\nIf we end it up with **1!**, then simply output **1**. Then the factorial function can be implemented in ***linear recursion***:\n```python\n( define ( factorial n )\n    ( if ( = n 1 )\n        1\n        ( * n ( factorial ( - n 1 )))))\n```\n***Linear recursion*** defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as ***Tree Recursion***. The best example will be the Fibonacci series, in which each element is the sum of the previous two:\n```python\n( define ( fib n )\n    ( cond ( = n 0 ) 0 )\n           ( = n 1 ) 1 )\n           ( else ( + ( fib( - n 1 ) )\n                      ( fib( - n 2 ) )))))\n```\nYou may find out that this procedure is not really efficient because to compute **fib( - n 1)**, **fib( - n 2)** has to be computed one more time which causes duplicated work.\n![Tree Recursion](../images/treeRecursion.png)\nTherefore, instead of ***Tree Recursion***, let's try to convert it to be ***Linear Recursion***. Reasign the sum of **a** and **b** to **a**, and the previous **a** to **b**:\n```python\n( define ( fib n )\n    ( iterate 1 0 n ))\n\n( define ( iterate a b count )\n    ( if ( = count 0 )\n        b\n        ( iterate ( + a b ) a ( - count 1 ))))\n```\n</br>\n## Lambda\nInstead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides ***Lambda Expression***:\n>( lambda ( <\\formal-param> ) <\\body> )\n\nFor instance,\n```python\n( define ( Add a b ) ( + a b ))\n```\ncan be written as:\n```python\n( define add ( lambda ( a b ) ( + a b ) ) )\n```\nAnd operators can also be represented by ***Lambda Expression***:\n```python\n( ( lambda ( a b ) ( + ( * a a ) ( * b b ) ) ) 2 3 )\n```\nAnother use of ***Lambda Expression*** is creating local variables. An expression can be binded with a specific name by using keyword ***let***. The above example then can be interpreted as:\n```python\n( define ( sumsqr x y )\n    ( let ( a ( * x x ) )\n          ( b ( * y y ) )\n        ( + a b ) ) )\n```\n***Note:*** The scope of a variable specified by a ***let*** is only applied to the **body** of the ***let***. For example, if the evalue of **x** is **2**, then the expression:\n```python\n( let ( ( x 3 )\n        ( y ( + x 2 ) ) )\n    ( * x y ) )\n```\nThe value of **y** will be **4** as being outside of the **let** body, and the output will be **3 * 4 = 12**. It seems like ***let*** is really similar to ***define***; however, in the most cases, we much prefer using ***let*** and only apply ***define*** to **internal procedures**.","slug":"Prefix-Notation","published":1,"updated":"2019-05-05T06:38:55.791Z","comments":1,"layout":"post","link":"","_id":"cjvgduys400090saolgkuo9x8","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( <span class=\"number\">20</span> + <span class=\"number\">5</span> )</span><br><span class=\"line\">( <span class=\"number\">16</span> / <span class=\"number\">4</span> )</span><br></pre></td></tr></table></figure>\n<p>Such expressions which denote procedures, are called <strong><em>combinations</em></strong>. The left and the right elements are called <strong><em>operands</em></strong>, and the element in the middle to indicate the operation is called <strong><em>operator</em></strong>. This is the most common style we have seen by now; however there is another way to construct a procedure known as <strong><em>prefix notation</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( + <span class=\"number\">20</span> <span class=\"number\">5</span> )</span><br><span class=\"line\">( / <span class=\"number\">16</span> <span class=\"number\">4</span> )</span><br></pre></td></tr></table></figure></p>\n<p>Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<a id=\"more\"></a></p>\n<p>conditions:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( abs x )</span><br><span class=\"line\">    ( cond (( &gt; x <span class=\"number\">0</span> ) x )</span><br><span class=\"line\">           (( = x <span class=\"number\">0</span> ) <span class=\"number\">0</span> )</span><br><span class=\"line\">           (( &lt; x <span class=\"number\">0</span> ) ( - x ))))</span><br></pre></td></tr></table></figure></p>\n<p>The general form can be expressed as:</p>\n<blockquote>\n<p>( cond (&lt;\\P1&gt; &lt;\\E1&gt;)<br>      (&lt;\\P2&gt; &lt;\\E2&gt;)<br>           …<br>      (&lt;\\Pn&gt; &lt;\\En&gt;))</p>\n</blockquote>\n<p>If none of them is evaluated to be <strong>true</strong>, then the value of the <strong>cond</strong> will be <strong>undefined</strong>. It can also be simplified by using <strong><em>else</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( abs x )</span><br><span class=\"line\">    ( cond (( &lt; x <span class=\"number\">0</span> ) ( - x ))</span><br><span class=\"line\">           ( <span class=\"keyword\">else</span>  x )))</span><br></pre></td></tr></table></figure></p>\n<p>If there is only two <strong><em>predicates</em></strong> (the expression to be interpreted as either true of false), then it can use a special form <strong><em>if</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( abs x )</span><br><span class=\"line\">    ( <span class=\"keyword\">if</span> ( &lt; x <span class=\"number\">0</span> )</span><br><span class=\"line\">         ( - x )</span><br><span class=\"line\">         x ))</span><br></pre></td></tr></table></figure></p>\n<p>The general form of an <strong><em>if</em></strong> expression is:</p>\n<blockquote>\n<p>( if &lt;\\predicate&gt; &lt;\\consequent&gt; &lt;\\alternative&gt; )</p>\n</blockquote>\n<p>The logic operators:</p>\n<blockquote>\n<p>( and &lt;\\E1&gt; … &lt;\\En&gt; )<br>( or &lt;\\E1&gt; … &lt;\\En&gt; )<br>( not <e> )</e></p>\n</blockquote>\n<p>Then use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( &gt;= x y )</span><br><span class=\"line\">    ( <span class=\"keyword\">or</span> ( &gt; x y ) ( = x y ))</span><br></pre></td></tr></table></figure></p>\n<p>That is all the syntax, <strong>there is no loop in a functional programming language!</strong><br><br></p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>Considering the factorial function:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1) ⋅ (n-2) ⋅ … ⋅2⋅1</p>\n</blockquote>\n<p>Which can be computed as:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1)!</p>\n</blockquote>\n<p>If we end it up with <strong>1!</strong>, then simply output <strong>1</strong>. Then the factorial function can be implemented in <strong><em>linear recursion</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( factorial n )</span><br><span class=\"line\">    ( <span class=\"keyword\">if</span> ( = n <span class=\"number\">1</span> )</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">        ( * n ( factorial ( - n <span class=\"number\">1</span> )))))</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>Linear recursion</em></strong> defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as <strong><em>Tree Recursion</em></strong>. The best example will be the Fibonacci series, in which each element is the sum of the previous two:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( fib n )</span><br><span class=\"line\">    ( cond ( = n <span class=\"number\">0</span> ) <span class=\"number\">0</span> )</span><br><span class=\"line\">           ( = n <span class=\"number\">1</span> ) <span class=\"number\">1</span> )</span><br><span class=\"line\">           ( <span class=\"keyword\">else</span> ( + ( fib( - n <span class=\"number\">1</span> ) )</span><br><span class=\"line\">                      ( fib( - n <span class=\"number\">2</span> ) )))))</span><br></pre></td></tr></table></figure></p>\n<p>You may find out that this procedure is not really efficient because to compute <strong>fib( - n 1)</strong>, <strong>fib( - n 2)</strong> has to be computed one more time which causes duplicated work.<br><img src=\"../images/treeRecursion.png\" alt=\"Tree Recursion\"><br>Therefore, instead of <strong><em>Tree Recursion</em></strong>, let’s try to convert it to be <strong><em>Linear Recursion</em></strong>. Reasign the sum of <strong>a</strong> and <strong>b</strong> to <strong>a</strong>, and the previous <strong>a</strong> to <strong>b</strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( fib n )</span><br><span class=\"line\">    ( iterate <span class=\"number\">1</span> <span class=\"number\">0</span> n ))</span><br><span class=\"line\"></span><br><span class=\"line\">( define ( iterate a b count )</span><br><span class=\"line\">    ( <span class=\"keyword\">if</span> ( = count <span class=\"number\">0</span> )</span><br><span class=\"line\">        b</span><br><span class=\"line\">        ( iterate ( + a b ) a ( - count <span class=\"number\">1</span> ))))</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Instead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides <strong><em>Lambda Expression</em></strong>:</p>\n<blockquote>\n<p>( lambda ( &lt;\\formal-param&gt; ) &lt;\\body&gt; )</p>\n</blockquote>\n<p>For instance,<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( Add a b ) ( + a b ))</span><br></pre></td></tr></table></figure></p>\n<p>can be written as:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define add ( <span class=\"keyword\">lambda</span> ( a b ) ( + a b ) ) )</span><br></pre></td></tr></table></figure></p>\n<p>And operators can also be represented by <strong><em>Lambda Expression</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( ( <span class=\"keyword\">lambda</span> ( a b ) ( + ( * a a ) ( * b b ) ) ) <span class=\"number\">2</span> <span class=\"number\">3</span> )</span><br></pre></td></tr></table></figure></p>\n<p>Another use of <strong><em>Lambda Expression</em></strong> is creating local variables. An expression can be binded with a specific name by using keyword <strong><em>let</em></strong>. The above example then can be interpreted as:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( sumsqr x y )</span><br><span class=\"line\">    ( let ( a ( * x x ) )</span><br><span class=\"line\">          ( b ( * y y ) )</span><br><span class=\"line\">        ( + a b ) ) )</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>Note:</em></strong> The scope of a variable specified by a <strong><em>let</em></strong> is only applied to the <strong>body</strong> of the <strong><em>let</em></strong>. For example, if the evalue of <strong>x</strong> is <strong>2</strong>, then the expression:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( let ( ( x <span class=\"number\">3</span> )</span><br><span class=\"line\">        ( y ( + x <span class=\"number\">2</span> ) ) )</span><br><span class=\"line\">    ( * x y ) )</span><br></pre></td></tr></table></figure></p>\n<p>The value of <strong>y</strong> will be <strong>4</strong> as being outside of the <strong>let</strong> body, and the output will be <strong>3 * 4 = 12</strong>. It seems like <strong><em>let</em></strong> is really similar to <strong><em>define</em></strong>; however, in the most cases, we much prefer using <strong><em>let</em></strong> and only apply <strong><em>define</em></strong> to <strong>internal procedures</strong>.</p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( <span class=\"number\">20</span> + <span class=\"number\">5</span> )</span><br><span class=\"line\">( <span class=\"number\">16</span> / <span class=\"number\">4</span> )</span><br></pre></td></tr></table></figure>\n<p>Such expressions which denote procedures, are called <strong><em>combinations</em></strong>. The left and the right elements are called <strong><em>operands</em></strong>, and the element in the middle to indicate the operation is called <strong><em>operator</em></strong>. This is the most common style we have seen by now; however there is another way to construct a procedure known as <strong><em>prefix notation</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( + <span class=\"number\">20</span> <span class=\"number\">5</span> )</span><br><span class=\"line\">( / <span class=\"number\">16</span> <span class=\"number\">4</span> )</span><br></pre></td></tr></table></figure></p>\n<p>Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.","more":"</p>\n<p>conditions:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( abs x )</span><br><span class=\"line\">    ( cond (( &gt; x <span class=\"number\">0</span> ) x )</span><br><span class=\"line\">           (( = x <span class=\"number\">0</span> ) <span class=\"number\">0</span> )</span><br><span class=\"line\">           (( &lt; x <span class=\"number\">0</span> ) ( - x ))))</span><br></pre></td></tr></table></figure></p>\n<p>The general form can be expressed as:</p>\n<blockquote>\n<p>( cond (&lt;\\P1&gt; &lt;\\E1&gt;)<br>      (&lt;\\P2&gt; &lt;\\E2&gt;)<br>           …<br>      (&lt;\\Pn&gt; &lt;\\En&gt;))</p>\n</blockquote>\n<p>If none of them is evaluated to be <strong>true</strong>, then the value of the <strong>cond</strong> will be <strong>undefined</strong>. It can also be simplified by using <strong><em>else</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( abs x )</span><br><span class=\"line\">    ( cond (( &lt; x <span class=\"number\">0</span> ) ( - x ))</span><br><span class=\"line\">           ( <span class=\"keyword\">else</span>  x )))</span><br></pre></td></tr></table></figure></p>\n<p>If there is only two <strong><em>predicates</em></strong> (the expression to be interpreted as either true of false), then it can use a special form <strong><em>if</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( abs x )</span><br><span class=\"line\">    ( <span class=\"keyword\">if</span> ( &lt; x <span class=\"number\">0</span> )</span><br><span class=\"line\">         ( - x )</span><br><span class=\"line\">         x ))</span><br></pre></td></tr></table></figure></p>\n<p>The general form of an <strong><em>if</em></strong> expression is:</p>\n<blockquote>\n<p>( if &lt;\\predicate&gt; &lt;\\consequent&gt; &lt;\\alternative&gt; )</p>\n</blockquote>\n<p>The logic operators:</p>\n<blockquote>\n<p>( and &lt;\\E1&gt; … &lt;\\En&gt; )<br>( or &lt;\\E1&gt; … &lt;\\En&gt; )<br>( not <e> )</e></p>\n</blockquote>\n<p>Then use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( &gt;= x y )</span><br><span class=\"line\">    ( <span class=\"keyword\">or</span> ( &gt; x y ) ( = x y ))</span><br></pre></td></tr></table></figure></p>\n<p>That is all the syntax, <strong>there is no loop in a functional programming language!</strong><br><br></p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>Considering the factorial function:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1) ⋅ (n-2) ⋅ … ⋅2⋅1</p>\n</blockquote>\n<p>Which can be computed as:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1)!</p>\n</blockquote>\n<p>If we end it up with <strong>1!</strong>, then simply output <strong>1</strong>. Then the factorial function can be implemented in <strong><em>linear recursion</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( factorial n )</span><br><span class=\"line\">    ( <span class=\"keyword\">if</span> ( = n <span class=\"number\">1</span> )</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">        ( * n ( factorial ( - n <span class=\"number\">1</span> )))))</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>Linear recursion</em></strong> defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as <strong><em>Tree Recursion</em></strong>. The best example will be the Fibonacci series, in which each element is the sum of the previous two:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( fib n )</span><br><span class=\"line\">    ( cond ( = n <span class=\"number\">0</span> ) <span class=\"number\">0</span> )</span><br><span class=\"line\">           ( = n <span class=\"number\">1</span> ) <span class=\"number\">1</span> )</span><br><span class=\"line\">           ( <span class=\"keyword\">else</span> ( + ( fib( - n <span class=\"number\">1</span> ) )</span><br><span class=\"line\">                      ( fib( - n <span class=\"number\">2</span> ) )))))</span><br></pre></td></tr></table></figure></p>\n<p>You may find out that this procedure is not really efficient because to compute <strong>fib( - n 1)</strong>, <strong>fib( - n 2)</strong> has to be computed one more time which causes duplicated work.<br><img src=\"../images/treeRecursion.png\" alt=\"Tree Recursion\"><br>Therefore, instead of <strong><em>Tree Recursion</em></strong>, let’s try to convert it to be <strong><em>Linear Recursion</em></strong>. Reasign the sum of <strong>a</strong> and <strong>b</strong> to <strong>a</strong>, and the previous <strong>a</strong> to <strong>b</strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( fib n )</span><br><span class=\"line\">    ( iterate <span class=\"number\">1</span> <span class=\"number\">0</span> n ))</span><br><span class=\"line\"></span><br><span class=\"line\">( define ( iterate a b count )</span><br><span class=\"line\">    ( <span class=\"keyword\">if</span> ( = count <span class=\"number\">0</span> )</span><br><span class=\"line\">        b</span><br><span class=\"line\">        ( iterate ( + a b ) a ( - count <span class=\"number\">1</span> ))))</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Instead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides <strong><em>Lambda Expression</em></strong>:</p>\n<blockquote>\n<p>( lambda ( &lt;\\formal-param&gt; ) &lt;\\body&gt; )</p>\n</blockquote>\n<p>For instance,<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( Add a b ) ( + a b ))</span><br></pre></td></tr></table></figure></p>\n<p>can be written as:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define add ( <span class=\"keyword\">lambda</span> ( a b ) ( + a b ) ) )</span><br></pre></td></tr></table></figure></p>\n<p>And operators can also be represented by <strong><em>Lambda Expression</em></strong>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( ( <span class=\"keyword\">lambda</span> ( a b ) ( + ( * a a ) ( * b b ) ) ) <span class=\"number\">2</span> <span class=\"number\">3</span> )</span><br></pre></td></tr></table></figure></p>\n<p>Another use of <strong><em>Lambda Expression</em></strong> is creating local variables. An expression can be binded with a specific name by using keyword <strong><em>let</em></strong>. The above example then can be interpreted as:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( define ( sumsqr x y )</span><br><span class=\"line\">    ( let ( a ( * x x ) )</span><br><span class=\"line\">          ( b ( * y y ) )</span><br><span class=\"line\">        ( + a b ) ) )</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>Note:</em></strong> The scope of a variable specified by a <strong><em>let</em></strong> is only applied to the <strong>body</strong> of the <strong><em>let</em></strong>. For example, if the evalue of <strong>x</strong> is <strong>2</strong>, then the expression:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( let ( ( x <span class=\"number\">3</span> )</span><br><span class=\"line\">        ( y ( + x <span class=\"number\">2</span> ) ) )</span><br><span class=\"line\">    ( * x y ) )</span><br></pre></td></tr></table></figure></p>\n<p>The value of <strong>y</strong> will be <strong>4</strong> as being outside of the <strong>let</strong> body, and the output will be <strong>3 * 4 = 12</strong>. It seems like <strong><em>let</em></strong> is really similar to <strong><em>define</em></strong>; however, in the most cases, we much prefer using <strong><em>let</em></strong> and only apply <strong><em>define</em></strong> to <strong>internal procedures</strong>.</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjvgduyrd00000saoyhtzr1bv","tag_id":"cjvgduyrt00040saoxsow2yqk","_id":"cjvgduys8000c0saoq3yezd6w"},{"post_id":"cjvgduyrd00000saoyhtzr1bv","tag_id":"cjvgduys300080saov495hb4m","_id":"cjvgduys8000d0sao60c0n79v"},{"post_id":"cjvgduyrd00000saoyhtzr1bv","tag_id":"cjvgduys6000a0saooitweyvj","_id":"cjvgduys9000f0saotf90zwy3"},{"post_id":"cjvgduyrn00020saors67eo3d","tag_id":"cjvgduys7000b0sao64rdzjsu","_id":"cjvgduysd000j0sao0kxcxua5"},{"post_id":"cjvgduyrn00020saors67eo3d","tag_id":"cjvgduys9000e0saogrudmfqp","_id":"cjvgduyse000k0saoxerzy0oh"},{"post_id":"cjvgduyrn00020saors67eo3d","tag_id":"cjvgduysa000g0saojrosbz3p","_id":"cjvgduysg000m0sao5y3h2gc6"},{"post_id":"cjvgduyrn00020saors67eo3d","tag_id":"cjvgduysb000h0sao45blh4ao","_id":"cjvgduysg000n0saols6qzjuz"},{"post_id":"cjvgduyrw00050saop1fwwjka","tag_id":"cjvgduysc000i0saov7t603m1","_id":"cjvgduysh000p0sao7nlfk3r8"},{"post_id":"cjvgduyrw00050saop1fwwjka","tag_id":"cjvgduysb000h0sao45blh4ao","_id":"cjvgduysh000q0saoq3qhgrof"},{"post_id":"cjvgduys200070saom1wdvesh","tag_id":"cjvgduysg000o0sao8iafu6b2","_id":"cjvgduysk000u0saonvfvcc7v"},{"post_id":"cjvgduys200070saom1wdvesh","tag_id":"cjvgduysi000r0saok30ejagw","_id":"cjvgduysk000v0saov2dppzur"},{"post_id":"cjvgduys200070saom1wdvesh","tag_id":"cjvgduysj000s0saonk8je63g","_id":"cjvgduysl000x0saolzysbqni"},{"post_id":"cjvgduys400090saolgkuo9x8","tag_id":"cjvgduysk000t0saonki9pbm2","_id":"cjvgduysp00100saor4eq3940"},{"post_id":"cjvgduys400090saolgkuo9x8","tag_id":"cjvgduysl000w0saoh9sfthol","_id":"cjvgduysp00110sao4flkw49m"},{"post_id":"cjvgduys400090saolgkuo9x8","tag_id":"cjvgduysn000y0saoyofguoax","_id":"cjvgduysq00120saojd8nv9fu"},{"post_id":"cjvgduys400090saolgkuo9x8","tag_id":"cjvgduyso000z0saog1d8ft4r","_id":"cjvgduysq00130saof7wue9ro"}],"Tag":[{"name":"Redux","_id":"cjvgduyrt00040saoxsow2yqk"},{"name":"Saga","_id":"cjvgduys300080saov495hb4m"},{"name":"React","_id":"cjvgduys6000a0saooitweyvj"},{"name":"C++","_id":"cjvgduys7000b0sao64rdzjsu"},{"name":"Java","_id":"cjvgduys9000e0saogrudmfqp"},{"name":"Python","_id":"cjvgduysa000g0saojrosbz3p"},{"name":"NodeJS","_id":"cjvgduysb000h0sao45blh4ao"},{"name":"VS Code","_id":"cjvgduysc000i0saov7t603m1"},{"name":"CLI","_id":"cjvgduysg000o0sao8iafu6b2"},{"name":"Mac OS","_id":"cjvgduysi000r0saok30ejagw"},{"name":"port","_id":"cjvgduysj000s0saonk8je63g"},{"name":"Lisp","_id":"cjvgduysk000t0saonki9pbm2"},{"name":"Scheme","_id":"cjvgduysl000w0saoh9sfthol"},{"name":"Prefix Notation","_id":"cjvgduysn000y0saoyofguoax"},{"name":"Functional Programming","_id":"cjvgduyso000z0saog1d8ft4r"}]}}