{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/GoSlice.JPG","path":"images/GoSlice.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_000059.JPG","path":"images/IMG_000059.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0077.JPG","path":"images/IMG_0077.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0222.JPG","path":"images/IMG_0222.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0226.JPG","path":"images/IMG_0226.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0444.JPG","path":"images/IMG_0444.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0504.JPG","path":"images/IMG_0504.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0518.JPG","path":"images/IMG_0518.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0605.JPG","path":"images/IMG_0605.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0519.JPG","path":"images/IMG_0519.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0606.JPG","path":"images/IMG_0606.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0637.JPG","path":"images/IMG_0637.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0873.JPG","path":"images/IMG_0873.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0874.JPG","path":"images/IMG_0874.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_0875.JPG","path":"images/IMG_0875.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_1331.JPG","path":"images/IMG_1331.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_1333.JPG","path":"images/IMG_1333.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_1891.JPG","path":"images/IMG_1891.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2148.JPG","path":"images/IMG_2148.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2151.JPG","path":"images/IMG_2151.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2192.JPG","path":"images/IMG_2192.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2194.JPG","path":"images/IMG_2194.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2195.JPG","path":"images/IMG_2195.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2200.JPG","path":"images/IMG_2200.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2209.JPG","path":"images/IMG_2209.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_2221.JPG","path":"images/IMG_2221.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_4200.JPG","path":"images/IMG_4200.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_4201.JPG","path":"images/IMG_4201.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Fuji030020.JPG","path":"images/IMG_Fuji030020.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Fuji030025.JPG","path":"images/IMG_Fuji030025.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Fuji030030.JPG","path":"images/IMG_Fuji030030.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Fuji030031.JPG","path":"images/IMG_Fuji030031.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Takamatsu030041.JPG","path":"images/IMG_Takamatsu030041.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Takamatsu030042.JPG","path":"images/IMG_Takamatsu030042.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Takamatsu030050.JPG","path":"images/IMG_Takamatsu030050.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Takamatsu030053.JPG","path":"images/IMG_Takamatsu030053.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Takamatsu030055.JPG","path":"images/IMG_Takamatsu030055.JPG","modified":0,"renderable":0},{"_id":"source/images/IMG_Takamatsu030056.JPG","path":"images/IMG_Takamatsu030056.JPG","modified":0,"renderable":0},{"_id":"source/images/Memory-Leaks.JPG","path":"images/Memory-Leaks.JPG","modified":0,"renderable":0},{"_id":"source/images/LRU.png","path":"images/LRU.png","modified":0,"renderable":0},{"_id":"source/images/Min_Heap.png","path":"images/Min_Heap.png","modified":0,"renderable":0},{"_id":"source/images/Segment_Tree.png","path":"images/Segment_Tree.png","modified":0,"renderable":0},{"_id":"source/images/SuffixTree_Cover.JPG","path":"images/SuffixTree_Cover.JPG","modified":0,"renderable":0},{"_id":"source/images/TreeRecursion.JPG","path":"images/TreeRecursion.JPG","modified":0,"renderable":0},{"_id":"source/images/apache-kafka.png","path":"images/apache-kafka.png","modified":0,"renderable":0},{"_id":"source/images/cli.JPG","path":"images/cli.JPG","modified":0,"renderable":0},{"_id":"source/images/futako010010.JPG","path":"images/futako010010.JPG","modified":0,"renderable":0},{"_id":"source/images/futako010013.JPG","path":"images/futako010013.JPG","modified":0,"renderable":0},{"_id":"source/images/futako010029.JPG","path":"images/futako010029.JPG","modified":0,"renderable":0},{"_id":"source/images/futako010041.JPG","path":"images/futako010041.JPG","modified":0,"renderable":0},{"_id":"source/images/kerberos.png","path":"images/kerberos.png","modified":0,"renderable":0},{"_id":"source/images/mongodb_cover.JPG","path":"images/mongodb_cover.JPG","modified":0,"renderable":0},{"_id":"source/images/lisp.JPG","path":"images/lisp.JPG","modified":0,"renderable":0},{"_id":"source/images/neteaseMusic.JPG","path":"images/neteaseMusic.JPG","modified":0,"renderable":0},{"_id":"source/images/prefixTree.JPG","path":"images/prefixTree.JPG","modified":0,"renderable":0},{"_id":"source/images/redux-saga.JPG","path":"images/redux-saga.JPG","modified":0,"renderable":0},{"_id":"source/images/spark_kafka.JPG","path":"images/spark_kafka.JPG","modified":0,"renderable":0},{"_id":"source/images/treeRecursion11.JPG","path":"images/treeRecursion11.JPG","modified":0,"renderable":0},{"_id":"source/images/vscode.JPG","path":"images/vscode.JPG","modified":0,"renderable":0},{"_id":"themes/ocean/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/tranquilheart.css","path":"css/tranquilheart.css","modified":0,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/hexo-inverted.svg","path":"images/hexo-inverted.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/hexo.svg","path":"images/hexo.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/searchfooter.png","path":"images/searchfooter.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":0,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","path":"images/ocean/ocean.ogv","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.webm","path":"images/ocean/ocean.webm","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","path":"images/ocean/ocean.mp4","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.png","path":"images/ocean/ocean.png","modified":0,"renderable":1},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","path":"images/ocean/overlay-hero.png","modified":0,"renderable":1},{"_id":"source/images/stereo-cover.PNG","path":"images/stereo-cover.PNG","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"3811f4432fc2a2841913b8d53f59d9e2975e1228","modified":1610054000343},{"_id":"source/_posts/.DS_Store","hash":"a34b48b0277f5c7748c7a29f2409c887a7e7ac44","modified":1610054000359},{"_id":"source/_posts/A-Brief-Introduce-to-Redux-Saga.md","hash":"44be67538c8b60d7e8d2470056e058d62e6e77d6","modified":1610054000360},{"_id":"source/_posts/An-Brew-Error-When-Upgrade-Mongodb-to-4-2.md","hash":"890833cdbe9226d76b30607869a0de121d001ca7","modified":1610054000361},{"_id":"source/_posts/Computer-Vision-Stereo.md","hash":"77ac87a33794107a452e72009931a25e3673257f","modified":1610075153123},{"_id":"source/_posts/Configure-Kerberos-Authentication-in-Golang.md","hash":"37cfd2980c2a4a2522df17495dbdb90274cd3f69","modified":1610054000362},{"_id":"source/_posts/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X.md","hash":"769b25ce9a98e95e642366c54225c23f90b3b95b","modified":1610054000362},{"_id":"source/_posts/How-to-debug-NodeJS-on-VS-Code.md","hash":"bd502a77c978366068efdff8912fe4b3bcca5ff7","modified":1610054000363},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming.md","hash":"507314161b432701028dd638f2e07ff86725e0b7","modified":1610054000363},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation.md","hash":"9d44f51993a2bc47547f13511d2a0940784ec86b","modified":1610054000369},{"_id":"source/_posts/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages.md","hash":"7bb641146596822df7eb196771a3b61d068679d7","modified":1610054000372},{"_id":"source/_posts/Min-Heap-Python-Implementation.md","hash":"0885eb971fbcaa9b3ff500ab7faff7aeecee6df4","modified":1610054000373},{"_id":"source/_posts/Prefix-Notation.md","hash":"8a87c2bbb8f7fe2112468899691bea6d15428cce","modified":1610054000376},{"_id":"source/_posts/Prefix-Tree.md","hash":"99f997d7862faee38c6d6937ff16d3831f2f8925","modified":1610054000376},{"_id":"source/_posts/Segment-Tree.md","hash":"e0092a6d375672066de538a79ec84c1df320d6fb","modified":1610054000378},{"_id":"source/_posts/Suffix-Tree.md","hash":"9730c8c19d3192f886f9b4833865fb07a7b60312","modified":1610054000380},{"_id":"source/_posts/Type-slice-in-Golang.md","hash":"cadf3166461ee394c324b6e2e0c5679e00dbeaf6","modified":1610054000403},{"_id":"source/_posts/hello-world.md","hash":"b15d56f866a38a593c73f03752010197c2236317","modified":1610054000404},{"_id":"source/_posts/如何用VS-Code免翻墙听网易云音乐.md","hash":"61f0c2983f52c1f807f803565bb4f4454e2c8eb6","modified":1610054000404},{"_id":"source/about/index.md","hash":"5bb18c27c67f330eff517963d35ba3cd136e06f9","modified":1610054000405},{"_id":"source/gallery/index.md","hash":"72ebc4659b4019ac0b55683929ee739472a092b2","modified":1610054000405},{"_id":"source/images/.DS_Store","hash":"befa026766a193c4ba2cc45e45f23a63271bfd89","modified":1610054000406},{"_id":"source/images/Memory-Leaks.JPG","hash":"88744198f42bcd6b31e70e82f798645cb453e2e1","modified":1610054000699},{"_id":"source/images/LRU.png","hash":"924bfc5e57edf1a1f2a7464929fc935720ef02a7","modified":1610054000698},{"_id":"source/images/TreeRecursion.JPG","hash":"a09da0ab4779d513b081eeacff2ec0a80d78576a","modified":1610054000703},{"_id":"source/images/apache-kafka.png","hash":"829b8efa9a6c3d0cbcfa2309553fe8ae06cd052b","modified":1610054000704},{"_id":"source/images/cli.JPG","hash":"9dc4dd69083df96b774dee488bb42cfe7dc35922","modified":1610054000705},{"_id":"source/images/mongodb_cover.JPG","hash":"a8a897f72daa9aac541cc13bbeb131799c8415f5","modified":1610054000730},{"_id":"source/images/neteaseMusic.JPG","hash":"9a9ce2438064e78c0c3c596d22e879fad40727dd","modified":1610054000730},{"_id":"source/images/redux-saga.JPG","hash":"246254876cfd63cdbb5d31523d02d078daecf40e","modified":1610054000730},{"_id":"source/images/spark_kafka.JPG","hash":"aadd0a222fd5fd046ec3c68b8a914080a70bf3b1","modified":1610054000746},{"_id":"source/images/treeRecursion11.JPG","hash":"b3cb61f46ddff0067dc8ebe5357d21a37aeaecb7","modified":1610054000747},{"_id":"source/_posts/An-Brew-Error-When-Upgrade-Mongodb-to-4-2/mongodb_cover.JPG","hash":"a8a897f72daa9aac541cc13bbeb131799c8415f5","modified":1610054000362},{"_id":"source/images/vscode.JPG","hash":"7d97031e400f3b8ad192de733d9711f52a7f80ad","modified":1610054000747},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-image-integral.PNG","hash":"83761c0da1f283f51125ac441f1bf4741605a7b3","modified":1610059193862},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-window-based-intensity.png","hash":"88123dacbbf5722bab2ddecaab23cb1939f0e5d5","modified":1610058501074},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/.DS_Store","hash":"fead839a4167508f3ba9b76dc8eefa59b750acfe","modified":1610054000364},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/cpudiagram.png","hash":"81a835daa7656b74f239e0f7da5e2453b32b1a55","modified":1610054000366},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_after_second_insert.png","hash":"fe9f9228fce8fb82ed15d6ea24d11e406af434fa","modified":1610054000370},{"_id":"source/_posts/Prefix-Tree/prefix_tree.JPG","hash":"22e46566e03150b74cf2dee5dd95b77dbae76687","modified":1610054000377},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_before_second_insert.png","hash":"10fbd40a40253191f8d19be8e60cb469d937d0c2","modified":1610054000370},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_init_node.png","hash":"8ba6f131da35b9f1a540e2f8d1a4ef081ca7cd15","modified":1610054000372},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_first_insert.png","hash":"c2a107f5de90540ebfaa45b06a010fcbce829c54","modified":1610054000371},{"_id":"source/_posts/Segment-Tree/Full_Binary_Tree.png","hash":"a2af1eb98342fea4661c1c74136b3cfc57eb9703","modified":1610054000379},{"_id":"source/_posts/Min-Heap-Python-Implementation/Min_Heap_List.png","hash":"1bd20f37693f859187e5d6ef97d47344b990ad0b","modified":1610054000375},{"_id":"source/_posts/Segment-Tree/Segment_Tree_Left_Insert.png","hash":"3e5edee39b38b95aa7f02e12f64e66315edd1093","modified":1610054000380},{"_id":"source/_posts/Segment-Tree/Segment_Tree_Right_Insert.png","hash":"d4c13eaf96364f8485338d7b7cc2217494a9e2f7","modified":1610054000380},{"_id":"source/_posts/Segment-Tree/Segment_Tree_Split_Insert.png","hash":"5237da89cf136ed099cc2020f8bfd1b199de7c72","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/PrefixTree_StringProblem.JPG","hash":"5dfbc9a3742fe8d6104c4ae4897888fe907b8c18","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/PrefixTree_a.JPG","hash":"d2687016089e0da4fafc9965ac01e15ca0af40c3","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/PrefixTree_ab.JPG","hash":"23936e8d4c2cc5f217f842c87e8b8abd88f8c1dc","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/PrefixTree_abc.JPG","hash":"12a9a65511612ed9df05d7dde7edebe3f7a2dce4","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/PrefixTree_abca.JPG","hash":"820f8235c89ee191a5b818e327f509f1b7f3b45a","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-a.JPG","hash":"58f3e79049f14949fa5dccdbbcc07d83e05d940b","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-ab.JPG","hash":"35b79b36b1847ed79e99777b6e59f93d4ab60f22","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abc.JPG","hash":"d4aa8e3a1789d3b6af83fd149ae5dc51d76f97b3","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcab.JPG","hash":"b3d323bc4532f00a37c85e3a8bfafe4651a466e8","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx.JPG","hash":"6c6e807a675cb1ef4f528ac28d208db782007843","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/prefix_tree.JPG","hash":"22e46566e03150b74cf2dee5dd95b77dbae76687","modified":1610054000403},{"_id":"source/images/Min_Heap.png","hash":"d97a0400f0f67355e4da78946cc1f2dcc65276e7","modified":1610054000700},{"_id":"source/images/SuffixTree_Cover.JPG","hash":"c7a4ac6e63457e70557a58216eda678566987671","modified":1610054000703},{"_id":"source/images/lisp.JPG","hash":"5f09d56757170819589f35eed3cb8397dea6c222","modified":1610054000730},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/Spark-Streaming-flow-for-offsets.png","hash":"82f960e5571b62948edb9b71bdef88d0b30b94d2","modified":1610054000365},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/sparkworkflow.png","hash":"c7750b0cdad68726ad1c12cef55e939e2897b4cc","modified":1610054000367},{"_id":"source/_posts/Min-Heap-Python-Implementation/Min_Heap_Insert.png","hash":"bda0cdeda698ef4cc9edf1b913e889edf27ac03a","modified":1610054000374},{"_id":"source/_posts/Min-Heap-Python-Implementation/Min_Heap_Pop.png","hash":"f9119ece30b0022d88a07fd593ba27be32400353","modified":1610054000376},{"_id":"source/_posts/Suffix-Tree/Banana_SuffixTree.JPG","hash":"784d221ca8ad1a53104ac3543430f1a0c5a425fe","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx-2.JPG","hash":"fd4cb33e59e4d69c20a2d6b5890e8fade86d1a0e","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx-3.JPG","hash":"62c2f854d6baf1b3bfc1346193af5c9051caee9d","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx-4.JPG","hash":"963f569c79bc558bf6c8bc837032950c01ab28b2","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc.JPG","hash":"4d34855ac10bca7e10881b10942a3b9d3b1542e2","modified":1610054000402},{"_id":"themes/ocean/source/css/_partial/comment.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610054000767},{"_id":"source/images/GoSlice.JPG","hash":"920bdae1c37b54a35358ce3ed70ab278b8b96a7c","modified":1610054000407},{"_id":"source/images/IMG_0504.JPG","hash":"bdd3c4dcc7e813685793a2226728b0c60fb653b9","modified":1610054000439},{"_id":"source/images/IMG_0606.JPG","hash":"1aa6473addf50803fef60b42e90cdb2d71113db8","modified":1610054000454},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-window-based-result.png","hash":"d33985cb36ae89984433e4c838deabecfc84c8d1","modified":1610061305871},{"_id":"source/_posts/Suffix-Tree/Compressed_PrefixTree.JPG","hash":"86b37ab22ada28eb869e02db63f550f5203be62c","modified":1610054000380},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-1.JPG","hash":"028fab43638c973e69b2bad4ee1075ff73f2c881","modified":1610054000396},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-2.JPG","hash":"a7a66ad9abba7e5ee34635612b946dcd4c8e5c08","modified":1610054000398},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-3.JPG","hash":"ab57d95bb0fb636e247c57852aa8197e6ff98978","modified":1610054000399},{"_id":"themes/ocean/README.md","hash":"d04a79536c2f41b3c0c75127c4d26861b88f9897","modified":1610054000749},{"_id":"themes/ocean/_config.yml","hash":"d6fc2b2fdb92297900d8f888933e9f61c668e346","modified":1610054000749},{"_id":"themes/ocean/package.json","hash":"3976a703c6b3d903387a77cae8b732a7aeb83954","modified":1610054000765},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1610054000763},{"_id":"themes/ocean/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1610054000763},{"_id":"themes/ocean/layout/index.ejs","hash":"26fd534ae15b80631c6dad91825ee23faae59066","modified":1610054000763},{"_id":"themes/ocean/layout/layout.ejs","hash":"dad11fb60307129d36c5512ceff72e878ea7afdd","modified":1610054000764},{"_id":"themes/ocean/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1610054000750},{"_id":"themes/ocean/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1610054000750},{"_id":"themes/ocean/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1610054000751},{"_id":"themes/ocean/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1610054000751},{"_id":"themes/ocean/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1610054000764},{"_id":"themes/ocean/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1610054000752},{"_id":"themes/ocean/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1610054000764},{"_id":"themes/ocean/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1610054000765},{"_id":"themes/ocean/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1610054000753},{"_id":"themes/ocean/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1610054000752},{"_id":"themes/ocean/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1610054000753},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1610054000754},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1610054000754},{"_id":"themes/ocean/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1610054000753},{"_id":"themes/ocean/source/404.html","hash":"632991270d65accdfc9e3d37e18b2ce107814e60","modified":1610054000767},{"_id":"themes/ocean/source/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1610054000785},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"13a1fb286d696bd6a966e20fdd221f75ff1c1d98","modified":1610054000755},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"e225ae13929ea723a8f1c3f41b3fe68cd8e27a3e","modified":1610054000756},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"1f5795f54de3c4a3fd4dcbb08d72f94b087425c3","modified":1610054000756},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"7c15da753d09a2a716e5fa19396dda7fd26f4032","modified":1610054000756},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"014deebe61c4e7f21d6d634ef679e0c890283ad4","modified":1610054000757},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"8cda718ff6565aeaaaa70e4f6a939cf6280e8956","modified":1610054000757},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"ea84e6d574f411da1be89e717fc8dde6e4df6462","modified":1610054000757},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"1de8c2001059090f387ed5569fe94854252e82ed","modified":1610054000762},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"3adb8c20d05ec1edcd2bf67729d9f170d99ae4b3","modified":1610054000762},{"_id":"themes/ocean/source/css/404.styl","hash":"4b0cac7ef0ab445a780c2e7fd858e2022bb234d7","modified":1610054000767},{"_id":"themes/ocean/source/css/_extend.styl","hash":"d3e88bee23115a8f9a8f1a30e6e7e9106ed64df0","modified":1610054000767},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"537e194b6f619d121964243bb2a05ff26d6a1574","modified":1610054000767},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"29a06e1724b91225e42e9c69263b921182228af7","modified":1610054000767},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"df9ca719f651c45a88ab4d6afa6d29edf51aeba9","modified":1610054000767},{"_id":"themes/ocean/source/css/_variables.styl","hash":"d5351757891279a9607ed13fb3a48011a026484b","modified":1610054000767},{"_id":"themes/ocean/source/css/style.styl","hash":"7775f1a79c38af4f54a5481042c3422a4b5298af","modified":1610054000767},{"_id":"themes/ocean/source/css/tranquilheart.css","hash":"be3ef74c83f2261837c6bdcaaa6693467382a304","modified":1610054000783},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1610054000783},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"5f3b9981523bbec59669b6ff138b1e327d17dcd6","modified":1610054000787},{"_id":"themes/ocean/source/images/hexo.svg","hash":"35df818edc1b34e4172e39d6e1989f04a4addf78","modified":1610054000787},{"_id":"themes/ocean/source/images/searchfooter.png","hash":"519b76e799d2a45a456c3a90fb1308cdb011b352","modified":1610054000841},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1610054000841},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1610054000841},{"_id":"themes/ocean/source/js/ocean.js","hash":"9b627cd0a6b04dacd65caf414ad032d81146d462","modified":1610054000841},{"_id":"themes/ocean/source/js/pace.min.js","hash":"64759f14e0f92d62df57eb752f1745a16aba93ce","modified":1610054000841},{"_id":"themes/ocean/source/js/prettify.js","hash":"63b7bcb0e1030bddf7ebf8f25bf8409a6f876232","modified":1610054000841},{"_id":"themes/ocean/source/js/search.js","hash":"41684eb139f5a68a0eaadf6944d16598fd505a23","modified":1610054000841},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"375f018d2c25ad199e6b7d700a12464c3871ce2b","modified":1610054000758},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"7172f1126aec263fc408b3bb710f3f0f6fae9063","modified":1610054000759},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1610054000759},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1610054000760},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"6847735ec0397705c8125d76d6e872b1c2f36ea2","modified":1610054000760},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1610054000760},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1610054000759},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1610054000761},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1610054000761},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"543676889bad115ca8acda7d99f8e423b9aa6be2","modified":1610054000762},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"ed715125dbdddbd38e1592782c8a0508715f544b","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"f8d4680f40811b3f2f3afa7384bf94aa60da05ad","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"92da71c704ae6f69704211a124bd72c23e4069a4","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"ee5a84861cdecbc61f63c897eb43c872e4a8c778","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"ec817f8699d0402d2d73c923588eda1971fec9d1","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"c5c30693a8c0d9e61a84e49caea3fdf5efc23841","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"5db23a96d042686e51341f40da7f4d465a9847ad","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"ce073f60ab8ecc9ee8a6666f842961202cc93b25","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"da489a56e05903999c297c21b5c005570a2220e2","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"8e668f088e4ad042019e9fffbf8d78649ec98aa2","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/prettify.css","hash":"b9d15507b6786ca424301ff5d38333d658bf5837","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1610054000767},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"16ff8dc49c5c64acced021c16f5f551a895ba7af","modified":1610054000767},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"aebcd06a8e38eae97eae4ffcd9d9196234660a9e","modified":1610054000767},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1610054000767},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1610054000767},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1610054000767},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1610054000841},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-SSD.png","hash":"dc7b8e52a87cfef2c095be11e7db0c78da4626db","modified":1610061014761},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-dataset.png","hash":"6dbc51c911199ee47de89523e64f7c1f604013c1","modified":1610055856775},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/wal_spark.png","hash":"3feb86073a04c5b3ac86d535073fc38570838e42","modified":1610054000368},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-4.JPG","hash":"df209982ed4030f831332903ab2793652e567bb7","modified":1610054000401},{"_id":"themes/ocean/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1610054000750},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"3154fd527a002788848d9fec61d522048890e516","modified":1610054000784},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":1610054000841},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c868a01325d16441a50a94a13c623100a94a3a5c","modified":1610054000767},{"_id":"source/images/Segment_Tree.png","hash":"a9afeddb624d34ed5ea779483b40941a9df68d53","modified":1610054000702},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-intuition.PNG","hash":"4112f47f265e0625913e9c74889e2180cc081b9a","modified":1610056424451},{"_id":"source/_posts/Suffix-Tree/Banana_PrefixTree.JPG","hash":"b91a80fff213bea39331878b1e7ffa146636c7ab","modified":1610054000380},{"_id":"source/images/IMG_1891.JPG","hash":"676dcaf369929ef6b3d9ec8e8f7cf088c8ecdae4","modified":1610054000491},{"_id":"source/images/IMG_2148.JPG","hash":"9f08338b4842b7853a7132a098c0d2440afc8fd8","modified":1610054000491},{"_id":"source/images/kerberos.png","hash":"817f377f194647eade306f16d4f86a0721e9b9ad","modified":1610054000730},{"_id":"source/images/IMG_0444.JPG","hash":"a07f11160a4ff6ebfdbc4faf25868ea8c3f18b71","modified":1610054000438},{"_id":"source/images/IMG_0874.JPG","hash":"09ef9b6fe4b1f11b2adc52865f98a66f79bdbe58","modified":1610054000476},{"_id":"source/images/IMG_4200.JPG","hash":"b66b09b2026648ca9bff1b9d7f3adbbe0f5a0413","modified":1610054000547},{"_id":"source/images/futako010010.JPG","hash":"6f13fba723f69932261d8db10e2af818aa52dac4","modified":1610054000708},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1610054000767},{"_id":"source/images/IMG_0875.JPG","hash":"de4c08db2a5751996b99fbc8dfded7c53da935f9","modified":1610054000481},{"_id":"source/images/IMG_4201.JPG","hash":"df6d4734798dbbe1b22e82864ab38739fecce8d3","modified":1610054000551},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1610054000786},{"_id":"source/images/IMG_0226.JPG","hash":"08238c849695d9214b2f5b8d807a9f5c22d805cd","modified":1610054000433},{"_id":"source/images/IMG_1333.JPG","hash":"176423f03fdb3bf5e56643027cf01005a5eb2a74","modified":1610054000491},{"_id":"source/images/IMG_2194.JPG","hash":"cb802e60eb35ea0e5135c786cef1608b1f32f1c0","modified":1610054000515},{"_id":"source/images/IMG_2221.JPG","hash":"707dfcc82b32818ff8b1d12840a863bca517cd16","modified":1610054000544},{"_id":"source/images/prefixTree.JPG","hash":"d32a29f0a1bbb54b2dcf0834a1a9f1b38ee7c4ad","modified":1610054000730},{"_id":"source/images/IMG_0518.JPG","hash":"cdf83313366ef6bfedc05f8127d08e4897de5154","modified":1610054000444},{"_id":"source/images/IMG_0222.JPG","hash":"8424385dc15a5f8069190386292cce0fbfdc086f","modified":1610054000417},{"_id":"source/images/IMG_0637.JPG","hash":"bd5f1d97a0be08a89769b01429a35465e0fc85d7","modified":1610054000454},{"_id":"source/images/IMG_2151.JPG","hash":"a22eccebcc934cb9ce8e4038fee0d39d0469f1a2","modified":1610054000491},{"_id":"source/images/IMG_Takamatsu030042.JPG","hash":"db3b32e464530a7280379c0b8755901863737399","modified":1610054000651},{"_id":"source/images/IMG_0873.JPG","hash":"e4754500a08ed9a78e9154e67c67eb61daa9d3ab","modified":1610054000472},{"_id":"source/images/IMG_2192.JPG","hash":"e725c4037834f60d40b777244edbeb6de337ad9a","modified":1610054000510},{"_id":"source/images/IMG_2209.JPG","hash":"0045c460208e70189907588d74542e7dd7a9537b","modified":1610054000527},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1610054000804},{"_id":"source/images/futako010029.JPG","hash":"8438933ed62e1cf5b2db488140fb3d93d6bae0f5","modified":1610054000725},{"_id":"source/images/IMG_1331.JPG","hash":"1274e2476d4aaa0b24eb6330cdf87e238595c0f2","modified":1610054000489},{"_id":"source/images/IMG_2195.JPG","hash":"dbf948d502538248eef8e73df5418530b8cc891c","modified":1610054000523},{"_id":"source/images/IMG_Fuji030031.JPG","hash":"905891ed8c8136d1abc8ccbcc53dd1abe51b5189","modified":1610054000626},{"_id":"source/images/IMG_0077.JPG","hash":"33b8f580dd1c24eaf7e2c2ed42958638637da02a","modified":1610054000417},{"_id":"source/images/IMG_Takamatsu030050.JPG","hash":"f8e435fd57b027db18111a3efd93ab0caab9f9d8","modified":1610054000656},{"_id":"source/images/IMG_2200.JPG","hash":"6741848ea3e666881f9dc9a31efa817207a7a1c2","modified":1610054000527},{"_id":"source/images/IMG_0519.JPG","hash":"af2e9071c8f319b00bf4a84ff6b78e2d413c46b6","modified":1610054000453},{"_id":"source/images/IMG_Takamatsu030055.JPG","hash":"1ef7d0da9f09e0786160c90d9a7217ba08a73322","modified":1610054000680},{"_id":"source/images/futako010013.JPG","hash":"d2bc5d03172a0664ae145288257d1dac48047cb5","modified":1610054000717},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1610054000820},{"_id":"source/images/futako010041.JPG","hash":"06474d6fa82c7e0183f90fb6a1660280a87f2d89","modified":1610054000730},{"_id":"source/images/IMG_000059.JPG","hash":"37e76ed4b0b902b6b00500548d528c0d9d6d3c85","modified":1610054000415},{"_id":"source/images/IMG_0605.JPG","hash":"3549f55e964760c4dbcf15ffcbbf1bb0b0a992f3","modified":1610054000454},{"_id":"source/images/IMG_Takamatsu030053.JPG","hash":"f4396c4584d2b08d4b0df17f0b632df869e6be18","modified":1610054000673},{"_id":"source/images/IMG_Fuji030030.JPG","hash":"3a147075c4368bca991998d823aebd13a0dd4078","modified":1610054000619},{"_id":"source/images/IMG_Fuji030020.JPG","hash":"5b6e78dc770d426342face67269d6bf703efc1e3","modified":1610054000564},{"_id":"source/images/IMG_Takamatsu030056.JPG","hash":"422020a087c50a03916937c31e732c3552764b36","modified":1610054000697},{"_id":"source/images/IMG_Takamatsu030041.JPG","hash":"7d7d01969786364858f7825a97c281820897a730","modified":1610054000644},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1610054000840},{"_id":"source/images/IMG_Fuji030025.JPG","hash":"7704f9d0c8803f9e92f9939e4ce836a7cca255e7","modified":1610054000598},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1610054000804},{"_id":"public/search.xml","hash":"30b1db2d88cd8d33f031f806e58a8cf202dd9ef8","modified":1610075288095},{"_id":"public/atom.xml","hash":"100807b93809e6b37043520387e759fa9a3e2ee5","modified":1610075288095},{"_id":"public/about/index.html","hash":"6963ed255a3f904c9a7c21f37a26f09606838344","modified":1610072092336},{"_id":"public/2021/01/07/hello-world/index.html","hash":"3081ee4f3f78be1c06a31bc91d6b7c7c45d855c4","modified":1610072092336},{"_id":"public/2019/10/29/Segment-Tree/index.html","hash":"57faaeef2442d365b22da9ee63c88ad78aa4afb9","modified":1610072092336},{"_id":"public/2019/10/23/Min-Heap-Python-Implementation/index.html","hash":"e60cc9168baf9f16e823e570f912d446a4204483","modified":1610072092336},{"_id":"public/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/index.html","hash":"26a20015e44fbe1a9fde25ec3de5ea20c3d8856e","modified":1610072092336},{"_id":"public/2019/10/10/Configure-Kerberos-Authentication-in-Golang/index.html","hash":"1274ac310d06af3129e3e80415a87e011fcfa931","modified":1610072092336},{"_id":"public/2019/10/01/An-Brew-Error-When-Upgrade-Mongodb-to-4-2/index.html","hash":"a8171fbe7cc5e439efdb06ba12da940dc47c9964","modified":1610072092336},{"_id":"public/2019/07/18/Prefix-Tree/index.html","hash":"1023ac42bc83e85562a0d761cdff8658a95a1351","modified":1610072092336},{"_id":"public/2019/05/22/如何用VS-Code免翻墙听网易云音乐/index.html","hash":"10618a2d539ad151cbacae09ba9f90932c36639d","modified":1610072092336},{"_id":"public/2019/05/12/Type-slice-in-Golang/index.html","hash":"8427f3d2766a0bf827dd2d70bbb1c4fbc4d90e9c","modified":1610072092336},{"_id":"public/2019/05/08/How-to-debug-NodeJS-on-VS-Code/index.html","hash":"07887b02b5d275b61f71942e1189213761ff6684","modified":1610072092336},{"_id":"public/2019/05/06/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X/index.html","hash":"d7f7db4e8675e0ff9f4f383a7395efe03e332696","modified":1610072092336},{"_id":"public/2019/04/30/Prefix-Notation/index.html","hash":"e60e00902416c58a8c4f6849c51c4e587c8b6353","modified":1610072092336},{"_id":"public/archives/index.html","hash":"258e09c35716cf4ffa75043911128e777ff2d824","modified":1610072092336},{"_id":"public/archives/2019/index.html","hash":"e6b6a4d84530d24f93136fdb83b296f25a6798e2","modified":1610072092336},{"_id":"public/archives/page/2/index.html","hash":"7ac75ccd5b4e84c6200a714f20db8bbe7eb2ab14","modified":1610072092336},{"_id":"public/archives/2019/page/2/index.html","hash":"48c2a153b44fdf13787352ed39b333d18063b4c3","modified":1610072092336},{"_id":"public/archives/2019/04/index.html","hash":"9f113d2e73a9793d618a6d86315d5a53a714a11b","modified":1610072092336},{"_id":"public/archives/2019/05/index.html","hash":"8b7addb16c77cca3f1e8b8585250ba46022a8834","modified":1610072092336},{"_id":"public/archives/2019/07/index.html","hash":"2a2519f64a81bc5a5e3f8cb6cab050d8c723da80","modified":1610072092336},{"_id":"public/archives/2021/index.html","hash":"2b427f507e0860003adeae9abcfd142363519db1","modified":1610072092336},{"_id":"public/archives/2019/10/index.html","hash":"d95693f6d1492a53a4f9155d479659bff91f6369","modified":1610072092336},{"_id":"public/archives/2021/01/index.html","hash":"16ae587b68c6718d5bea0990d1d40a851efe5c69","modified":1610072092336},{"_id":"public/tags/Redux/index.html","hash":"93739bc81b577635c7519cbb4b744193ef62d80f","modified":1610072092336},{"_id":"public/tags/Saga/index.html","hash":"c49847f0d571f2d8efb39d8cf47cb2ad27f50953","modified":1610072092336},{"_id":"public/tags/React/index.html","hash":"85ae16374496f096526e79a58f6137f953561334","modified":1610072092336},{"_id":"public/tags/Brew/index.html","hash":"e3771744c75d61fd3ed1661960916f7783a37d40","modified":1610072092336},{"_id":"public/tags/Kafka/index.html","hash":"6d041859cca3235d147041ef250d7c3453cfbc1f","modified":1610072092336},{"_id":"public/tags/Golang/index.html","hash":"e51dc1c15e29c8a8840230fd92690d7aabf4362e","modified":1610072092336},{"_id":"public/tags/Kerberos/index.html","hash":"81659c652fe3d98786153a9a9c1129144d78da80","modified":1610072092336},{"_id":"public/tags/CLI/index.html","hash":"dc618fcece1b9800747b11109c42b2b05e32520b","modified":1610072092336},{"_id":"public/tags/Mac-OS/index.html","hash":"a7e2d0aaf19efb86b09d1fd1bd5a450c11c253f5","modified":1610072092336},{"_id":"public/tags/port/index.html","hash":"6733ce1bfd85a647036a3177e974f081bf200651","modified":1610072092336},{"_id":"public/tags/VS-Code/index.html","hash":"84d8eb8c11c6edb081e1cfd6f9f6b9d0d271cf80","modified":1610072092336},{"_id":"public/tags/NodeJS/index.html","hash":"d6c008df0fa254f2882cc367a29a07773e156fb4","modified":1610072092336},{"_id":"public/tags/Spark/index.html","hash":"3c346593296f1cfaae5ee907dcf7a5aa59ead15e","modified":1610072092336},{"_id":"public/tags/LRU/index.html","hash":"80d717a3014aa087d6f2631180addb2105fecf09","modified":1610072092336},{"_id":"public/tags/Algorithm/index.html","hash":"111d5d26c75034b201777cce865e2c0e4fdec5f1","modified":1610072092336},{"_id":"public/tags/Data-Structure/index.html","hash":"fd56c546bcb7cac4a1ef93b35997bb1e148c31cc","modified":1610072092336},{"_id":"public/tags/Mongo/index.html","hash":"fa920a33f6c86bd48e195b7f16c076da7321dbfa","modified":1610072092336},{"_id":"public/tags/C/index.html","hash":"ee5e76a42b841ca82219ad158fcd8f534e44eff4","modified":1610072092336},{"_id":"public/tags/Java/index.html","hash":"d60b63902009315b550e381c3497263fda63d576","modified":1610072092336},{"_id":"public/tags/Python/index.html","hash":"0477e966813d4d71456477202efd341fe0d777ea","modified":1610072092336},{"_id":"public/tags/Scheme/index.html","hash":"87198a8a78a527e319816101852f3f6eb88a0414","modified":1610072092336},{"_id":"public/tags/Lisp/index.html","hash":"ef2eeb78cdb618072d1166b4b19f1d2fba3be4c5","modified":1610072092336},{"_id":"public/tags/Prefix-Notation/index.html","hash":"0c964e1b5212a1623fe4544933eed7296cbdba82","modified":1610072092336},{"_id":"public/tags/Functional-Programming/index.html","hash":"5bd1c9a65970fb5101e0735354b799cfd5f72b3f","modified":1610072092336},{"_id":"public/tags/Prefix-Tree/index.html","hash":"8ebe3612a98f39e34159277343985199929c31ce","modified":1610072092336},{"_id":"public/tags/Segment-Tree/index.html","hash":"623926e225cad12d920297b9a0e87c7901e11b29","modified":1610072092336},{"_id":"public/tags/Min-Heap/index.html","hash":"1fc65ff26d073cb6e0da30de8f8141a9d189d459","modified":1610072092336},{"_id":"public/tags/Suffix-Tree/index.html","hash":"fb31e892694ea6160c5f889e0eecc61dcb25d1ef","modified":1610072092336},{"_id":"public/tags/Array/index.html","hash":"ee336c62f2c846af236a3cc65fa31131e357f451","modified":1610072092336},{"_id":"public/tags/Slice/index.html","hash":"1f3812d9281b1d3d8fb284a77a77acacd0b8c577","modified":1610072092336},{"_id":"public/tags/NeteaseMusic/index.html","hash":"855cc2c428813c380676cefd386e7a87b7f59806","modified":1610072092336},{"_id":"public/tags/网易云/index.html","hash":"50df63ff3efd0880e274f0135800e0230efd4ade","modified":1610072092336},{"_id":"public/gallery/index.html","hash":"554f6021e96115f67f6dfef831255c87e1f9e065","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/index.html","hash":"4b00770f5c7e11eb7c981c3a7234a455e3325d7b","modified":1610075288095},{"_id":"public/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/index.html","hash":"ca898217b96d80af766188a72b7918e90ebef905","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/index.html","hash":"31a414015a076bb73e550a62b6466f27a8e14269","modified":1610072092336},{"_id":"public/2019/05/05/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages/index.html","hash":"71013b6b32318a51b313a2209f5d7015097fe316","modified":1610072092336},{"_id":"public/index.html","hash":"6f4b48685bc2428b3c09e291aeb97392bed899f3","modified":1610075288095},{"_id":"public/page/2/index.html","hash":"ab1d21afd553a40a9bcc4438a667dca0b8caba47","modified":1610072092336},{"_id":"public/2019/04/28/A-Brief-Introduce-to-Redux-Saga/index.html","hash":"f2339f2fc13039f8ee2d4a062d11689cd2fbb8a4","modified":1610072092336},{"_id":"public/images/Memory-Leaks.JPG","hash":"88744198f42bcd6b31e70e82f798645cb453e2e1","modified":1610072092336},{"_id":"public/images/LRU.png","hash":"924bfc5e57edf1a1f2a7464929fc935720ef02a7","modified":1610072092336},{"_id":"public/images/TreeRecursion.JPG","hash":"a09da0ab4779d513b081eeacff2ec0a80d78576a","modified":1610072092336},{"_id":"public/images/apache-kafka.png","hash":"829b8efa9a6c3d0cbcfa2309553fe8ae06cd052b","modified":1610072092336},{"_id":"public/images/cli.JPG","hash":"9dc4dd69083df96b774dee488bb42cfe7dc35922","modified":1610072092336},{"_id":"public/images/neteaseMusic.JPG","hash":"9a9ce2438064e78c0c3c596d22e879fad40727dd","modified":1610072092336},{"_id":"public/images/redux-saga.JPG","hash":"246254876cfd63cdbb5d31523d02d078daecf40e","modified":1610072092336},{"_id":"public/images/mongodb_cover.JPG","hash":"a8a897f72daa9aac541cc13bbeb131799c8415f5","modified":1610072092336},{"_id":"public/images/spark_kafka.JPG","hash":"aadd0a222fd5fd046ec3c68b8a914080a70bf3b1","modified":1610072092336},{"_id":"public/images/treeRecursion11.JPG","hash":"b3cb61f46ddff0067dc8ebe5357d21a37aeaecb7","modified":1610072092336},{"_id":"public/images/vscode.JPG","hash":"7d97031e400f3b8ad192de733d9711f52a7f80ad","modified":1610072092336},{"_id":"public/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1610072092336},{"_id":"public/images/hexo-inverted.svg","hash":"5f3b9981523bbec59669b6ff138b1e327d17dcd6","modified":1610072092336},{"_id":"public/images/hexo.svg","hash":"35df818edc1b34e4172e39d6e1989f04a4addf78","modified":1610072092336},{"_id":"public/images/searchfooter.png","hash":"519b76e799d2a45a456c3a90fb1308cdb011b352","modified":1610072092336},{"_id":"public/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1610072092336},{"_id":"public/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1610072092336},{"_id":"public/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1610072092336},{"_id":"public/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1610072092336},{"_id":"public/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1610072092336},{"_id":"public/2019/10/01/An-Brew-Error-When-Upgrade-Mongodb-to-4-2/mongodb_cover.JPG","hash":"a8a897f72daa9aac541cc13bbeb131799c8415f5","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-image-integral.PNG","hash":"83761c0da1f283f51125ac441f1bf4741605a7b3","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-window-based-intensity.png","hash":"88123dacbbf5722bab2ddecaab23cb1939f0e5d5","modified":1610072092336},{"_id":"public/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_after_second_insert.png","hash":"fe9f9228fce8fb82ed15d6ea24d11e406af434fa","modified":1610072092336},{"_id":"public/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/cpudiagram.png","hash":"81a835daa7656b74f239e0f7da5e2453b32b1a55","modified":1610072092336},{"_id":"public/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_before_second_insert.png","hash":"10fbd40a40253191f8d19be8e60cb469d937d0c2","modified":1610072092336},{"_id":"public/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_List.png","hash":"1bd20f37693f859187e5d6ef97d47344b990ad0b","modified":1610072092336},{"_id":"public/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_init_node.png","hash":"8ba6f131da35b9f1a540e2f8d1a4ef081ca7cd15","modified":1610072092336},{"_id":"public/2019/07/18/Prefix-Tree/prefix_tree.JPG","hash":"22e46566e03150b74cf2dee5dd95b77dbae76687","modified":1610072092336},{"_id":"public/2019/10/29/Segment-Tree/Full_Binary_Tree.png","hash":"a2af1eb98342fea4661c1c74136b3cfc57eb9703","modified":1610072092336},{"_id":"public/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_first_insert.png","hash":"c2a107f5de90540ebfaa45b06a010fcbce829c54","modified":1610072092336},{"_id":"public/2019/10/29/Segment-Tree/Segment_Tree_Right_Insert.png","hash":"d4c13eaf96364f8485338d7b7cc2217494a9e2f7","modified":1610072092336},{"_id":"public/2019/10/29/Segment-Tree/Segment_Tree_Left_Insert.png","hash":"3e5edee39b38b95aa7f02e12f64e66315edd1093","modified":1610072092336},{"_id":"public/2019/10/29/Segment-Tree/Segment_Tree_Split_Insert.png","hash":"5237da89cf136ed099cc2020f8bfd1b199de7c72","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/PrefixTree_abc.JPG","hash":"12a9a65511612ed9df05d7dde7edebe3f7a2dce4","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/PrefixTree_a.JPG","hash":"d2687016089e0da4fafc9965ac01e15ca0af40c3","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/PrefixTree_ab.JPG","hash":"23936e8d4c2cc5f217f842c87e8b8abd88f8c1dc","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/PrefixTree_abca.JPG","hash":"820f8235c89ee191a5b818e327f509f1b7f3b45a","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/PrefixTree_StringProblem.JPG","hash":"5dfbc9a3742fe8d6104c4ae4897888fe907b8c18","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/prefix_tree.JPG","hash":"22e46566e03150b74cf2dee5dd95b77dbae76687","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-a.JPG","hash":"58f3e79049f14949fa5dccdbbcc07d83e05d940b","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-ab.JPG","hash":"35b79b36b1847ed79e99777b6e59f93d4ab60f22","modified":1610072092336},{"_id":"public/images/Min_Heap.png","hash":"d97a0400f0f67355e4da78946cc1f2dcc65276e7","modified":1610072092336},{"_id":"public/images/SuffixTree_Cover.JPG","hash":"c7a4ac6e63457e70557a58216eda678566987671","modified":1610072092336},{"_id":"public/images/lisp.JPG","hash":"5f09d56757170819589f35eed3cb8397dea6c222","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abc.JPG","hash":"d4aa8e3a1789d3b6af83fd149ae5dc51d76f97b3","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcab.JPG","hash":"b3d323bc4532f00a37c85e3a8bfafe4651a466e8","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx.JPG","hash":"6c6e807a675cb1ef4f528ac28d208db782007843","modified":1610072092336},{"_id":"public/live2dw/assets/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1610072092336},{"_id":"public/live2dw/assets/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1610072092336},{"_id":"public/live2dw/assets/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1610072092336},{"_id":"public/live2dw/assets/package.json","hash":"0d0e7d27a415c6eedc11325b2848e5243d29a162","modified":1610072092336},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1610072092336},{"_id":"public/css/feathericon/feathericon.svg","hash":"c868a01325d16441a50a94a13c623100a94a3a5c","modified":1610072092336},{"_id":"public/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_Insert.png","hash":"bda0cdeda698ef4cc9edf1b913e889edf27ac03a","modified":1610072092336},{"_id":"public/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/Spark-Streaming-flow-for-offsets.png","hash":"82f960e5571b62948edb9b71bdef88d0b30b94d2","modified":1610072092336},{"_id":"public/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/sparkworkflow.png","hash":"c7750b0cdad68726ad1c12cef55e939e2897b4cc","modified":1610072092336},{"_id":"public/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_Pop.png","hash":"f9119ece30b0022d88a07fd593ba27be32400353","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/Banana_SuffixTree.JPG","hash":"784d221ca8ad1a53104ac3543430f1a0c5a425fe","modified":1610072092336},{"_id":"public/images/GoSlice.JPG","hash":"920bdae1c37b54a35358ce3ed70ab278b8b96a7c","modified":1610072092336},{"_id":"public/images/IMG_0504.JPG","hash":"bdd3c4dcc7e813685793a2226728b0c60fb653b9","modified":1610072092336},{"_id":"public/images/IMG_0606.JPG","hash":"1aa6473addf50803fef60b42e90cdb2d71113db8","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-3.JPG","hash":"62c2f854d6baf1b3bfc1346193af5c9051caee9d","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-2.JPG","hash":"fd4cb33e59e4d69c20a2d6b5890e8fade86d1a0e","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc.JPG","hash":"4d34855ac10bca7e10881b10942a3b9d3b1542e2","modified":1610072092336},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1610072092336},{"_id":"public/css/404.css","hash":"dedb3146be1f9955c1d915afd505b2778912c06c","modified":1610072092336},{"_id":"public/404.html","hash":"fe1497ac9b2d47f4e3e880946e22fbfe3db7496e","modified":1610072092336},{"_id":"public/css/tranquilheart.css","hash":"9c669545e3517de77f5cff50a58e4ef035855c87","modified":1610072092336},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1610072092336},{"_id":"public/css/style.css","hash":"b90ab4883d20ccc31408cff32573d6c1edcbe4b0","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-window-based-result.png","hash":"d33985cb36ae89984433e4c838deabecfc84c8d1","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/Compressed_PrefixTree.JPG","hash":"86b37ab22ada28eb869e02db63f550f5203be62c","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-1.JPG","hash":"028fab43638c973e69b2bad4ee1075ff73f2c881","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-4.JPG","hash":"df209982ed4030f831332903ab2793652e567bb7","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-2.JPG","hash":"a7a66ad9abba7e5ee34635612b946dcd4c8e5c08","modified":1610072092336},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1610072092336},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1610072092336},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1610072092336},{"_id":"public/js/ocean.js","hash":"3457be62843930ad58997cd6fd387783285242c7","modified":1610072092336},{"_id":"public/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1610072092336},{"_id":"public/js/search.js","hash":"88fa5c780f9093f70d6e3066cca0d6165a8364b4","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-dataset.png","hash":"6dbc51c911199ee47de89523e64f7c1f604013c1","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-SSD.png","hash":"dc7b8e52a87cfef2c095be11e7db0c78da4626db","modified":1610072092336},{"_id":"public/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/wal_spark.png","hash":"3feb86073a04c5b3ac86d535073fc38570838e42","modified":1610072092336},{"_id":"public/images/Segment_Tree.png","hash":"a9afeddb624d34ed5ea779483b40941a9df68d53","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-4.JPG","hash":"963f569c79bc558bf6c8bc837032950c01ab28b2","modified":1610072092336},{"_id":"public/live2dw/assets/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/Banana_PrefixTree.JPG","hash":"b91a80fff213bea39331878b1e7ffa146636c7ab","modified":1610072092336},{"_id":"public/images/kerberos.png","hash":"817f377f194647eade306f16d4f86a0721e9b9ad","modified":1610072092336},{"_id":"public/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1610072092336},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-intuition.PNG","hash":"4112f47f265e0625913e9c74889e2180cc081b9a","modified":1610072092336},{"_id":"public/images/IMG_1891.JPG","hash":"676dcaf369929ef6b3d9ec8e8f7cf088c8ecdae4","modified":1610072092336},{"_id":"public/images/IMG_2148.JPG","hash":"9f08338b4842b7853a7132a098c0d2440afc8fd8","modified":1610072092336},{"_id":"public/images/IMG_4200.JPG","hash":"b66b09b2026648ca9bff1b9d7f3adbbe0f5a0413","modified":1610072092336},{"_id":"public/images/futako010010.JPG","hash":"6f13fba723f69932261d8db10e2af818aa52dac4","modified":1610072092336},{"_id":"public/live2dw/assets/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1610072092336},{"_id":"public/js/prettify.js","hash":"66f5fafc7321fcb0864a8dc680b32cb1d40ac57b","modified":1610072092336},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"b2b093d8f5ffeee250c8d0d3a2285a213318e4ea","modified":1610072092336},{"_id":"public/images/IMG_0444.JPG","hash":"a07f11160a4ff6ebfdbc4faf25868ea8c3f18b71","modified":1610072092336},{"_id":"public/images/IMG_4201.JPG","hash":"df6d4734798dbbe1b22e82864ab38739fecce8d3","modified":1610072092336},{"_id":"public/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-3.JPG","hash":"ab57d95bb0fb636e247c57852aa8197e6ff98978","modified":1610072092336},{"_id":"public/images/IMG_0874.JPG","hash":"09ef9b6fe4b1f11b2adc52865f98a66f79bdbe58","modified":1610072092336},{"_id":"public/images/prefixTree.JPG","hash":"d32a29f0a1bbb54b2dcf0834a1a9f1b38ee7c4ad","modified":1610072092336},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1610072092336},{"_id":"public/images/IMG_0226.JPG","hash":"08238c849695d9214b2f5b8d807a9f5c22d805cd","modified":1610072092336},{"_id":"public/images/IMG_1333.JPG","hash":"176423f03fdb3bf5e56643027cf01005a5eb2a74","modified":1610072092336},{"_id":"public/images/IMG_0875.JPG","hash":"de4c08db2a5751996b99fbc8dfded7c53da935f9","modified":1610072092336},{"_id":"public/images/IMG_2221.JPG","hash":"707dfcc82b32818ff8b1d12840a863bca517cd16","modified":1610072092336},{"_id":"public/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1610072092336},{"_id":"public/images/IMG_0518.JPG","hash":"cdf83313366ef6bfedc05f8127d08e4897de5154","modified":1610072092336},{"_id":"public/images/IMG_2194.JPG","hash":"cb802e60eb35ea0e5135c786cef1608b1f32f1c0","modified":1610072092336},{"_id":"public/images/IMG_0637.JPG","hash":"bd5f1d97a0be08a89769b01429a35465e0fc85d7","modified":1610072092336},{"_id":"public/images/IMG_2151.JPG","hash":"a22eccebcc934cb9ce8e4038fee0d39d0469f1a2","modified":1610072092336},{"_id":"public/images/IMG_Takamatsu030042.JPG","hash":"db3b32e464530a7280379c0b8755901863737399","modified":1610072092336},{"_id":"public/images/IMG_0222.JPG","hash":"8424385dc15a5f8069190386292cce0fbfdc086f","modified":1610072092336},{"_id":"public/images/IMG_2192.JPG","hash":"e725c4037834f60d40b777244edbeb6de337ad9a","modified":1610072092336},{"_id":"public/images/IMG_2209.JPG","hash":"0045c460208e70189907588d74542e7dd7a9537b","modified":1610072092336},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1610072092336},{"_id":"public/images/IMG_0873.JPG","hash":"e4754500a08ed9a78e9154e67c67eb61daa9d3ab","modified":1610072092336},{"_id":"public/images/IMG_1331.JPG","hash":"1274e2476d4aaa0b24eb6330cdf87e238595c0f2","modified":1610072092336},{"_id":"public/images/IMG_Fuji030031.JPG","hash":"905891ed8c8136d1abc8ccbcc53dd1abe51b5189","modified":1610072092336},{"_id":"public/images/IMG_Takamatsu030050.JPG","hash":"f8e435fd57b027db18111a3efd93ab0caab9f9d8","modified":1610072092336},{"_id":"public/images/IMG_2195.JPG","hash":"dbf948d502538248eef8e73df5418530b8cc891c","modified":1610072092336},{"_id":"public/images/futako010029.JPG","hash":"8438933ed62e1cf5b2db488140fb3d93d6bae0f5","modified":1610072092336},{"_id":"public/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1610072092336},{"_id":"public/images/IMG_0077.JPG","hash":"33b8f580dd1c24eaf7e2c2ed42958638637da02a","modified":1610072092336},{"_id":"public/images/IMG_2200.JPG","hash":"6741848ea3e666881f9dc9a31efa817207a7a1c2","modified":1610072092336},{"_id":"public/images/IMG_Takamatsu030055.JPG","hash":"1ef7d0da9f09e0786160c90d9a7217ba08a73322","modified":1610072092336},{"_id":"public/images/futako010013.JPG","hash":"d2bc5d03172a0664ae145288257d1dac48047cb5","modified":1610072092336},{"_id":"public/images/IMG_0519.JPG","hash":"af2e9071c8f319b00bf4a84ff6b78e2d413c46b6","modified":1610072092336},{"_id":"public/images/futako010041.JPG","hash":"06474d6fa82c7e0183f90fb6a1660280a87f2d89","modified":1610072092336},{"_id":"public/images/IMG_0605.JPG","hash":"3549f55e964760c4dbcf15ffcbbf1bb0b0a992f3","modified":1610072092336},{"_id":"public/images/IMG_000059.JPG","hash":"37e76ed4b0b902b6b00500548d528c0d9d6d3c85","modified":1610072092336},{"_id":"public/images/IMG_Takamatsu030053.JPG","hash":"f4396c4584d2b08d4b0df17f0b632df869e6be18","modified":1610072092336},{"_id":"public/images/IMG_Fuji030020.JPG","hash":"5b6e78dc770d426342face67269d6bf703efc1e3","modified":1610072092336},{"_id":"public/images/IMG_Fuji030030.JPG","hash":"3a147075c4368bca991998d823aebd13a0dd4078","modified":1610072092336},{"_id":"public/images/IMG_Takamatsu030056.JPG","hash":"422020a087c50a03916937c31e732c3552764b36","modified":1610072092336},{"_id":"public/images/IMG_Takamatsu030041.JPG","hash":"7d7d01969786364858f7825a97c281820897a730","modified":1610072092336},{"_id":"public/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1610072092336},{"_id":"public/images/IMG_Fuji030025.JPG","hash":"7704f9d0c8803f9e92f9939e4ce836a7cca255e7","modified":1610072092336},{"_id":"public/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1610072092336},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-full-grid-graph.PNG","hash":"267ab3812c49f03dc5c7c9028a766bd274cc1428","modified":1610062680952},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-scan-line-graph.PNG","hash":"86eee773c9f36339fda3f67077e9a956f7ef1282","modified":1610060201710},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-graph-cut.PNG","hash":"e28c1a43e1b1cdf372e4f5e21f9e5c9570ad9fdc","modified":1610063524962},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-test-result.png","hash":"5dc3473e36ba4edad3a2046655effcb868f781bd","modified":1610067239341},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-full-grid-result1.png","hash":"21f9d30818947d73e40dfac151613124a7b082f6","modified":1610064151574},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-scan-line-result2.png","hash":"d09e58d313a5962be19a95ec45740cdc47662977","modified":1610061613345},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-scan-line-result1.png","hash":"db0e9a9f1da15f03759aae16a0258c797dab5a30","modified":1610061438631},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-test.png","hash":"395c413ac21eee078fc8ee3da1f8b2e0feeec309","modified":1610067214612},{"_id":"source/images/stereo-cover.PNG","hash":"11fdc18637870c3c37b50fc56103dfab624a7505","modified":1610075100912},{"_id":"public/tags/CV/index.html","hash":"3a774120f83f51a886af58a63854373cf8d8b487","modified":1610075288095},{"_id":"public/tags/stereo/index.html","hash":"e9af590b7667063be2391971a9824610a6d659bc","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-full-grid-graph.PNG","hash":"267ab3812c49f03dc5c7c9028a766bd274cc1428","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-graph.PNG","hash":"86eee773c9f36339fda3f67077e9a956f7ef1282","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-full-grid-result1.png","hash":"21f9d30818947d73e40dfac151613124a7b082f6","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-graph-cut.PNG","hash":"e28c1a43e1b1cdf372e4f5e21f9e5c9570ad9fdc","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-test-result.png","hash":"5dc3473e36ba4edad3a2046655effcb868f781bd","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-result2.png","hash":"d09e58d313a5962be19a95ec45740cdc47662977","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-result1.png","hash":"db0e9a9f1da15f03759aae16a0258c797dab5a30","modified":1610075288095},{"_id":"public/2021/01/07/Computer-Vision-Stereo/stereo-test.png","hash":"395c413ac21eee078fc8ee3da1f8b2e0feeec309","modified":1610075288095},{"_id":"public/images/stereo-cover.PNG","hash":"11fdc18637870c3c37b50fc56103dfab624a7505","modified":1610075288095}],"Category":[],"Data":[],"Page":[{"title":"About Me","date":"2019-04-28T00:24:18.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-04-27 20:24:18\n---\n","updated":"2021-01-07T21:13:20.405Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckjnncqhl00005opu6m8x7s6g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"My Gallery","date":"2019-04-27T21:49:44.000Z","albums":[["../images/IMG_Takamatsu030041.JPG","Teshima, JP"],["../images/IMG_Takamatsu030042.JPG","Teshima, JP"],["../images/IMG_Takamatsu030053.JPG","Teshima, JP"],["../images/IMG_Takamatsu030056.JPG","Naoshima, JP"],["../images/IMG_Takamatsu030050.JPG","Naoshima, JP"],["../images/IMG_Takamatsu030055.JPG","Shodoshima, JP"],["../images/IMG_Fuji030030.JPG","Mt Fuji, JP"],["../images/IMG_Fuji030020.JPG","Mt Fuji, JP"],["../images/IMG_Fuji030031.JPG","Mt Fuji, JP"],["../images/IMG_Fuji030025.JPG","Mt Fuji, JP"],["../images/IMG_0504.JPG","Nikko, JP"],["../images/IMG_0518.JPG","Meguro, JP"],["../images/IMG_0519.JPG","Meguro, JP"],["../images/IMG_0605.JPG","Kyoto Yasaka Shrine, JP"],["../images/IMG_0606.JPG","Kyoto Kiyomizu, JP"],["../images/IMG_0637.JPG","Odaiba, JP"],["../images/futako010010.JPG","Futakotawagama, JP"],["../images/futako010013.JPG","Futakotawagama, JP"],["../images/futako010029.JPG","Futakotawagama, JP"],["../images/futako010041.JPG","Futakotawagama, JP"],["../images/IMG_0077.JPG","Kamakura, JP"],["../images/IMG_000059.JPG","Yokohama, JP"],["../images/IMG_0222.JPG","Roppongi Hills, JP"],["../images/IMG_0226.JPG","Roppongi Hills, JP"],["../images/IMG_0444.JPG","Nara, JP"],["../images/IMG_2148.JPG","Niagara Falls, CA"],["../images/IMG_2192.JPG","Banff National Parks, CA"],["../images/IMG_2194.JPG","Banff National Parks, CA"],["../images/IMG_2195.JPG","Banff National Parks, CA"],["../images/IMG_2200.JPG","Banff National Parks, CA"],["../images/IMG_2209.JPG","Banff Town, CA"],["../images/IMG_2221.JPG","Banff, Lake Louis, CA"],["../images/IMG_4200.JPG","Waterloo, CA"],["../images/IMG_4201.JPG","Niagara Falls, CA"],["../images/IMG_1331.JPG","Waterloo, CA"],["../images/IMG_1333.JPG","Waterloo, CA"],["../images/IMG_2151.JPG","Niagara Falls, CA"],["../images/IMG_1891.JPG","Montreal, CA"],["../images/IMG_0873.JPG","Dali, CN"],["../images/IMG_0874.JPG","Dali, CN"],["../images/IMG_0875.JPG","Dali, CN"]],"_content":"","source":"gallery/index.md","raw":"---\ntitle: My Gallery\ndate: 2019-04-27 17:49:44\nalbums: [\n    [\"../images/IMG_Takamatsu030041.JPG\", \"Teshima, JP\"],\n    [\"../images/IMG_Takamatsu030042.JPG\", \"Teshima, JP\"],\n    [\"../images/IMG_Takamatsu030053.JPG\", \"Teshima, JP\"],\n    [\"../images/IMG_Takamatsu030056.JPG\", \"Naoshima, JP\"],\n    [\"../images/IMG_Takamatsu030050.JPG\", \"Naoshima, JP\"],\n    [\"../images/IMG_Takamatsu030055.JPG\", \"Shodoshima, JP\"],\n    [\"../images/IMG_Fuji030030.JPG\", \"Mt Fuji, JP\"],\n    [\"../images/IMG_Fuji030020.JPG\", \"Mt Fuji, JP\"],\n    [\"../images/IMG_Fuji030031.JPG\", \"Mt Fuji, JP\"],\n    [\"../images/IMG_Fuji030025.JPG\", \"Mt Fuji, JP\"],\n    [\"../images/IMG_0504.JPG\", \"Nikko, JP\"],\n    [\"../images/IMG_0518.JPG\", \"Meguro, JP\"],\n    [\"../images/IMG_0519.JPG\", \"Meguro, JP\"],\n    [\"../images/IMG_0605.JPG\", \"Kyoto Yasaka Shrine, JP\"],\n    [\"../images/IMG_0606.JPG\", \"Kyoto Kiyomizu, JP\"],\n    [\"../images/IMG_0637.JPG\", \"Odaiba, JP\"],\n    [\"../images/futako010010.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/futako010013.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/futako010029.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/futako010041.JPG\", \"Futakotawagama, JP\"],\n    [\"../images/IMG_0077.JPG\", \"Kamakura, JP\"],\n    [\"../images/IMG_000059.JPG\", \"Yokohama, JP\"],\n    [\"../images/IMG_0222.JPG\", \"Roppongi Hills, JP\"],\n    [\"../images/IMG_0226.JPG\", \"Roppongi Hills, JP\"],\n    [\"../images/IMG_0444.JPG\", \"Nara, JP\"],\n    [\"../images/IMG_2148.JPG\", \"Niagara Falls, CA\"],\n    [\"../images/IMG_2192.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2194.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2195.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2200.JPG\", \"Banff National Parks, CA\"],\n    [\"../images/IMG_2209.JPG\", \"Banff Town, CA\"],\n    [\"../images/IMG_2221.JPG\", \"Banff, Lake Louis, CA\"],\n    [\"../images/IMG_4200.JPG\", \"Waterloo, CA\"],\n    [\"../images/IMG_4201.JPG\", \"Niagara Falls, CA\"],\n    [\"../images/IMG_1331.JPG\", \"Waterloo, CA\"],\n    [\"../images/IMG_1333.JPG\", \"Waterloo, CA\"],\n    [\"../images/IMG_2151.JPG\", \"Niagara Falls, CA\"],\n    [\"../images/IMG_1891.JPG\", \"Montreal, CA\"],\n    [\"../images/IMG_0873.JPG\", \"Dali, CN\"],\n    [\"../images/IMG_0874.JPG\", \"Dali, CN\"],\n    [\"../images/IMG_0875.JPG\", \"Dali, CN\"]\n]\n---\n","updated":"2021-01-07T21:13:20.405Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"ckjnncqhp00025opu22x307g5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"A Brief Introduce to Redux Saga","date":"2019-04-28T18:35:50.000Z","photos":["../images/redux-saga.JPG"],"_content":"If you are quite experienced with redux, which is a predictable state container for JavaScript applications (**Note:** even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, [here](https://redux.js.org/introduction/getting-started) is the guide to dive before we start our topic.<!-- more -->\n\nIn a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with ***call back hell***.\n</br>\n\n## **Haven't heard of *CallBack Hell*?**\nWell, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a **`Promise`** (And has a type of **`Promise<any>`**). In order to easily mark those async functions, after ***ES6*** javascript provides extra modifiers **`async`** and **`await`**, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better... ~~**NO!! It doesn't resolve anything!**~~ The core problem leads to a callback hell is the hierarchical async calls, for example\n\nyou have some simple synchronous functions which are in a chain to accomplish some logics:\n```javascript\na = getSomething();\nb = getMore(a);\nc = getMoreAndMore(b);\n...\n```\nIt looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:\n```javascript\ngetSomthing(function(a) {\n    getMore(a, function(b) {\n        getMoreAndMore(b, function(c) {\n            //keep going...\n        });\n    });\n});\n```\nOr you prefer ***ES6***:\n```javascript\nasync function getSomething(a) {\n    await b = ToDo(a);\n    return await getMore((b) => {\n        return await ToDo(b);\n    }).then((c) => {\n        return await ToDo(c);\n    }).then(...);\n}\n```\nLooks really confused? This will getting even uglier if we are using callbacks in loops. \n</br>\n## Redux Thunks\nBack to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:\n```javascript\nasync const callAPI = () => {\n    ...\n    return response;\n};\n...\nasync const updateUI = (...params) => {\n    const res = await callAPI();\n    if (res.status === 200)\n        dispatch({type: \"UPDATE\", isSuccess: true});\n};\n...\nrender({\n    ...\n    this.props.isSuccess?\n        showData() : showError()\n});\n```\nThis isn't bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. ***Middleware*** is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:\n```javascript\nfunction logger(store) {\n    return function wrapDispatch (next) {\n        return function dispatchAndLog (action) {\n            console.log(\"dispatching.. \", action);\n            let result = next(action);\n            console.log(\"new state\", store.getState());\n            return result;\n        }\n    }\n}\n```\nThere are more advanced ways to add a logger. If you are interested, please refer to the [offical documentation](https://redux.js.org/advanced/middleware). With our middleware, the previous example can be written in a cleaner way:\n```javascript\nconst callAPI = () => {\n    return((dispatch) => {\n        dispatch(startCallingApiAction);\n        actualCallApi().then(data => {\n            dispatch(successAction(data));\n        }).fail(err => {\n            dispatch(failedAction(err));\n        });\n    });\n};\n```\nThe successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called ***thunk***. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.\n\nThis is great, so why are we even considering ***saga***? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in ***NodeJS***). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to... **Wait! That sounds quite familiar!! Is that the case of callback hell??** Unfortunately, a good thing plus another good feature doesn't always end up with something better. ~~It could be some shit as well (笑)~~ In this case, true, this is exactly the callback hell.\n</br>\n\n## Redux Saga\nTo handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to **give instructions about what to do next** and we don't care about how those instructions will be executed (Saga handles the executions).\n\nThen the thunks example can be changed as following:\n```javascript\nexport function* apiSideEffect(action) {\n    try{\n        const data = yield call(actualCallApi);\n        yield put({ type:\"SUCCESS\", payload: data });\n    } catch(err) {\n        yield put({ type:\"FAILED\", payload: err });\n    }\n}\n\nexport function* apiSaga() {\n    yield takeEvery(\"CLICK_TO_CALL_API\", apiSideEffect);\n}\n```\nThere are serval fucntions already being integrated in Saga:\n>**`Call`**: the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.\n\n>**`Put`**: Instead of dispatching an action inside the generator (Don't ever ever do that), ***put*** Returns an object with instructions for the middleware to dispatch the action.\n\n>**`Select`**: Returns value from the selector function, similar with **`getState()`**. ***Note:*** It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is **mutable** (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).\n\n>**`Take`**: It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a ***promise*** resolves. In the take case, it'll suspend the generator until a matching action is dispatched\n\nBy working with Saga, we make the side effects to be ***declarative*** rather than ***imperative***.\n>***Declarative:*** describing what the program must accomplish, rather than describe how to accomplish it\n\n>***Imperative:*** consists of commands for the computer to perform, focuses on describing how a program operates\n\nIn the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the **Saga is pulling the action by itself**. An additional generator, known as ***watcher*** which contains ***take*** has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (***Saga Helper***):\n```javascript\nfunction* watchFetchData() {\n    yield takeEvery(\"FETCH_REQUEST\", callFetchDataApi);\n}\n```\n***takeEvery*** allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered\n```javascript\nfunction* watchFetchData() {\n    yield takeLatest(\"FETCH_REQUEST\", callFetchDataApi);\n}\n```\nHowever by using ***take***, it is possible to fully control an action observation process to build complex control flow:\n```javascript\nfunction* watchFetchData() {\n    while(true) {\n        const action = yield take(\"FETCH_REQUEST\");\n        console.log(action);\n        yield call(callFetchDataApi, action.payload);\n    }\n}\n```\nAll right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:\nStore:\n```javascript\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, appluMiddleware(sagaMiddleware));    \nsagaMiddleware.run(watchFetch);\n```\nSagas:\n```javascript\nfunction* watchFetch(): Generator<*, *, *> {\n    yield takeEvery(\"FETCH_ACTION\", callFetchAPI);\n}\n\nfunction* callFetchAPI(): Generator<*, *, *> {\n    try {\n        yield put({ type: \"FETCHING\", payload: ... });\n        const data = yield call(actualCallApi);\n        yield put({ type: \"FETCH_SUCCESS\", payload: data });\n    } catch(err) {\n        yield put({ type: \"FETCH_FAILED\", payload: err });\n    }\n}\n```\nReducer:\n```javascript\nconst reducer = (state = initState, action) => {\n    switch(action) {\n        case \"FETCHING\":\n            return { loading: true, ...state };\n        case \"FETCH_SUCCESS\":\n            return { loading: false, success: true, data: action.payload, ...state };   \n        case \"FETCH_FAILED\":\n            return { loading: false, success: false, error: true, ...state };\n        default:\n            return { ...state };\n    }\n};\n```\nComponent:\n```javascript\nclass myComponent extends React.Component {\n    const mapStateToProps = ...\n    const mapDispatchToProps = ...\n    render() {\n        return (\n            <button onClick = { () => this.props.dispatch({type: \"FETCH_ACTION\"}) }/>   \n            {\n                this.props.loading?\n                    <p>Loading..</p> : this.props.error?\n                        <p>Error!</p> : <p>{this.props.data}</p>\n            }\n        );\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(myComponent);\n\n```\nFor more advanced concepts, there is a well-organized [Saga offical documentation](https://redux-saga.js.org/docs/advanced/) you can refer to if you want to dive deeper.\n</br>\n\n## How to test Saga?\nA function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.\n```javascript\ndescribe(\"fetch work flow\", () => {\n    const generator = cloneableGenerator(callFetchAPI)({ type: \"FETCH_ACTION\" });\n    expect(generator.next().value).toEqual(put({ type: \"FETCHING\", payload: ... }));    \n\n    test(\"fetch success\", () => {\n        const clone = generator.clone();\n        expect(clone.next().value).toEqual(put({ type: \"FETCH_SUCCESS\" }));\n        expect(generator.next().done).toEqual(true);\n    });\n});\n```\nIn the above example, we use **`clone()`** to test different control flows and **`next()`** to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of **`next()`**:\n```javascript\nexpect(clone.next(false).value).toEqual( put(fetchFailedAction()) );      \n```\n</br>\n\n## Saga vs Observables\nRedux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good [code snippets](https://hackmd.io/s/H1xLHUQ8e) of saga vs observables that can open your mind :D\n\n</br>\n</br>\n## References:\nhttps://redux-saga.js.org/\nhttps://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\nhttps://redux.js.org/advanced/middleware\nhttps://pub.dartlang.org/packages/redux_thunk\nhttps://codeburst.io/how-i-test-redux-saga-fcc425cda018\nhttps://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\nhttps://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\nhttps://redux.js.org/introduction/getting-started\nhttps://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\n","source":"_posts/A-Brief-Introduce-to-Redux-Saga.md","raw":"---\ntitle: A Brief Introduce to Redux Saga\ndate: 2019-04-28 14:35:50\ntags: [Redux, Saga, React]\nphotos: [\"../images/redux-saga.JPG\"]\n---\nIf you are quite experienced with redux, which is a predictable state container for JavaScript applications (**Note:** even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, [here](https://redux.js.org/introduction/getting-started) is the guide to dive before we start our topic.<!-- more -->\n\nIn a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with ***call back hell***.\n</br>\n\n## **Haven't heard of *CallBack Hell*?**\nWell, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a **`Promise`** (And has a type of **`Promise<any>`**). In order to easily mark those async functions, after ***ES6*** javascript provides extra modifiers **`async`** and **`await`**, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better... ~~**NO!! It doesn't resolve anything!**~~ The core problem leads to a callback hell is the hierarchical async calls, for example\n\nyou have some simple synchronous functions which are in a chain to accomplish some logics:\n```javascript\na = getSomething();\nb = getMore(a);\nc = getMoreAndMore(b);\n...\n```\nIt looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:\n```javascript\ngetSomthing(function(a) {\n    getMore(a, function(b) {\n        getMoreAndMore(b, function(c) {\n            //keep going...\n        });\n    });\n});\n```\nOr you prefer ***ES6***:\n```javascript\nasync function getSomething(a) {\n    await b = ToDo(a);\n    return await getMore((b) => {\n        return await ToDo(b);\n    }).then((c) => {\n        return await ToDo(c);\n    }).then(...);\n}\n```\nLooks really confused? This will getting even uglier if we are using callbacks in loops. \n</br>\n## Redux Thunks\nBack to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:\n```javascript\nasync const callAPI = () => {\n    ...\n    return response;\n};\n...\nasync const updateUI = (...params) => {\n    const res = await callAPI();\n    if (res.status === 200)\n        dispatch({type: \"UPDATE\", isSuccess: true});\n};\n...\nrender({\n    ...\n    this.props.isSuccess?\n        showData() : showError()\n});\n```\nThis isn't bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. ***Middleware*** is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:\n```javascript\nfunction logger(store) {\n    return function wrapDispatch (next) {\n        return function dispatchAndLog (action) {\n            console.log(\"dispatching.. \", action);\n            let result = next(action);\n            console.log(\"new state\", store.getState());\n            return result;\n        }\n    }\n}\n```\nThere are more advanced ways to add a logger. If you are interested, please refer to the [offical documentation](https://redux.js.org/advanced/middleware). With our middleware, the previous example can be written in a cleaner way:\n```javascript\nconst callAPI = () => {\n    return((dispatch) => {\n        dispatch(startCallingApiAction);\n        actualCallApi().then(data => {\n            dispatch(successAction(data));\n        }).fail(err => {\n            dispatch(failedAction(err));\n        });\n    });\n};\n```\nThe successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called ***thunk***. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.\n\nThis is great, so why are we even considering ***saga***? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in ***NodeJS***). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to... **Wait! That sounds quite familiar!! Is that the case of callback hell??** Unfortunately, a good thing plus another good feature doesn't always end up with something better. ~~It could be some shit as well (笑)~~ In this case, true, this is exactly the callback hell.\n</br>\n\n## Redux Saga\nTo handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to **give instructions about what to do next** and we don't care about how those instructions will be executed (Saga handles the executions).\n\nThen the thunks example can be changed as following:\n```javascript\nexport function* apiSideEffect(action) {\n    try{\n        const data = yield call(actualCallApi);\n        yield put({ type:\"SUCCESS\", payload: data });\n    } catch(err) {\n        yield put({ type:\"FAILED\", payload: err });\n    }\n}\n\nexport function* apiSaga() {\n    yield takeEvery(\"CLICK_TO_CALL_API\", apiSideEffect);\n}\n```\nThere are serval fucntions already being integrated in Saga:\n>**`Call`**: the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.\n\n>**`Put`**: Instead of dispatching an action inside the generator (Don't ever ever do that), ***put*** Returns an object with instructions for the middleware to dispatch the action.\n\n>**`Select`**: Returns value from the selector function, similar with **`getState()`**. ***Note:*** It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is **mutable** (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).\n\n>**`Take`**: It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a ***promise*** resolves. In the take case, it'll suspend the generator until a matching action is dispatched\n\nBy working with Saga, we make the side effects to be ***declarative*** rather than ***imperative***.\n>***Declarative:*** describing what the program must accomplish, rather than describe how to accomplish it\n\n>***Imperative:*** consists of commands for the computer to perform, focuses on describing how a program operates\n\nIn the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the **Saga is pulling the action by itself**. An additional generator, known as ***watcher*** which contains ***take*** has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (***Saga Helper***):\n```javascript\nfunction* watchFetchData() {\n    yield takeEvery(\"FETCH_REQUEST\", callFetchDataApi);\n}\n```\n***takeEvery*** allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered\n```javascript\nfunction* watchFetchData() {\n    yield takeLatest(\"FETCH_REQUEST\", callFetchDataApi);\n}\n```\nHowever by using ***take***, it is possible to fully control an action observation process to build complex control flow:\n```javascript\nfunction* watchFetchData() {\n    while(true) {\n        const action = yield take(\"FETCH_REQUEST\");\n        console.log(action);\n        yield call(callFetchDataApi, action.payload);\n    }\n}\n```\nAll right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:\nStore:\n```javascript\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, appluMiddleware(sagaMiddleware));    \nsagaMiddleware.run(watchFetch);\n```\nSagas:\n```javascript\nfunction* watchFetch(): Generator<*, *, *> {\n    yield takeEvery(\"FETCH_ACTION\", callFetchAPI);\n}\n\nfunction* callFetchAPI(): Generator<*, *, *> {\n    try {\n        yield put({ type: \"FETCHING\", payload: ... });\n        const data = yield call(actualCallApi);\n        yield put({ type: \"FETCH_SUCCESS\", payload: data });\n    } catch(err) {\n        yield put({ type: \"FETCH_FAILED\", payload: err });\n    }\n}\n```\nReducer:\n```javascript\nconst reducer = (state = initState, action) => {\n    switch(action) {\n        case \"FETCHING\":\n            return { loading: true, ...state };\n        case \"FETCH_SUCCESS\":\n            return { loading: false, success: true, data: action.payload, ...state };   \n        case \"FETCH_FAILED\":\n            return { loading: false, success: false, error: true, ...state };\n        default:\n            return { ...state };\n    }\n};\n```\nComponent:\n```javascript\nclass myComponent extends React.Component {\n    const mapStateToProps = ...\n    const mapDispatchToProps = ...\n    render() {\n        return (\n            <button onClick = { () => this.props.dispatch({type: \"FETCH_ACTION\"}) }/>   \n            {\n                this.props.loading?\n                    <p>Loading..</p> : this.props.error?\n                        <p>Error!</p> : <p>{this.props.data}</p>\n            }\n        );\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(myComponent);\n\n```\nFor more advanced concepts, there is a well-organized [Saga offical documentation](https://redux-saga.js.org/docs/advanced/) you can refer to if you want to dive deeper.\n</br>\n\n## How to test Saga?\nA function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.\n```javascript\ndescribe(\"fetch work flow\", () => {\n    const generator = cloneableGenerator(callFetchAPI)({ type: \"FETCH_ACTION\" });\n    expect(generator.next().value).toEqual(put({ type: \"FETCHING\", payload: ... }));    \n\n    test(\"fetch success\", () => {\n        const clone = generator.clone();\n        expect(clone.next().value).toEqual(put({ type: \"FETCH_SUCCESS\" }));\n        expect(generator.next().done).toEqual(true);\n    });\n});\n```\nIn the above example, we use **`clone()`** to test different control flows and **`next()`** to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of **`next()`**:\n```javascript\nexpect(clone.next(false).value).toEqual( put(fetchFailedAction()) );      \n```\n</br>\n\n## Saga vs Observables\nRedux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good [code snippets](https://hackmd.io/s/H1xLHUQ8e) of saga vs observables that can open your mind :D\n\n</br>\n</br>\n## References:\nhttps://redux-saga.js.org/\nhttps://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\nhttps://redux.js.org/advanced/middleware\nhttps://pub.dartlang.org/packages/redux_thunk\nhttps://codeburst.io/how-i-test-redux-saga-fcc425cda018\nhttps://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\nhttps://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\nhttps://redux.js.org/introduction/getting-started\nhttps://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\n","slug":"A-Brief-Introduce-to-Redux-Saga","published":1,"updated":"2021-01-07T21:13:20.360Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhn00015opu6xyuf0ww","content":"<p>If you are quite experienced with redux, which is a predictable state container for JavaScript applications (<strong>Note:</strong> even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, <a href=\"https://redux.js.org/introduction/getting-started\">here</a> is the guide to dive before we start our topic.<a id=\"more\"></a></p>\n<p>In a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with <strong><em>call back hell</em></strong>.<br><br></p>\n<h2 id=\"Haven’t-heard-of-CallBack-Hell\"><a href=\"#Haven’t-heard-of-CallBack-Hell\" class=\"headerlink\" title=\"Haven’t heard of CallBack Hell?\"></a><strong>Haven’t heard of <em>CallBack Hell</em>?</strong></h2><p>Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a <strong><code>Promise</code></strong> (And has a type of <strong><code>Promise&lt;any&gt;</code></strong>). In order to easily mark those async functions, after <strong><em>ES6</em></strong> javascript provides extra modifiers <strong><code>async</code></strong> and <strong><code>await</code></strong>, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better… <del><strong>NO!! It doesn’t resolve anything!</strong></del> The core problem leads to a callback hell is the hierarchical async calls, for example</p>\n<p>you have some simple synchronous functions which are in a chain to accomplish some logics:</p>\n<pre><code class=\"javascript\">a = getSomething();\nb = getMore(a);\nc = getMoreAndMore(b);\n...\n</code></pre>\n<p>It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</p>\n<pre><code class=\"javascript\">getSomthing(function(a) &#123;\n    getMore(a, function(b) &#123;\n        getMoreAndMore(b, function(c) &#123;\n            //keep going...\n        &#125;);\n    &#125;);\n&#125;);\n</code></pre>\n<p>Or you prefer <strong><em>ES6</em></strong>:</p>\n<pre><code class=\"javascript\">async function getSomething(a) &#123;\n    await b = ToDo(a);\n    return await getMore((b) =&gt; &#123;\n        return await ToDo(b);\n    &#125;).then((c) =&gt; &#123;\n        return await ToDo(c);\n    &#125;).then(...);\n&#125;\n</code></pre>\n<p>Looks really confused? This will getting even uglier if we are using callbacks in loops.<br><br></p>\n<h2 id=\"Redux-Thunks\"><a href=\"#Redux-Thunks\" class=\"headerlink\" title=\"Redux Thunks\"></a>Redux Thunks</h2><p>Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</p>\n<pre><code class=\"javascript\">async const callAPI = () =&gt; &#123;\n    ...\n    return response;\n&#125;;\n...\nasync const updateUI = (...params) =&gt; &#123;\n    const res = await callAPI();\n    if (res.status === 200)\n        dispatch(&#123;type: &quot;UPDATE&quot;, isSuccess: true&#125;);\n&#125;;\n...\nrender(&#123;\n    ...\n    this.props.isSuccess?\n        showData() : showError()\n&#125;);\n</code></pre>\n<p>This isn’t bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. <strong><em>Middleware</em></strong> is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</p>\n<pre><code class=\"javascript\">function logger(store) &#123;\n    return function wrapDispatch (next) &#123;\n        return function dispatchAndLog (action) &#123;\n            console.log(&quot;dispatching.. &quot;, action);\n            let result = next(action);\n            console.log(&quot;new state&quot;, store.getState());\n            return result;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>There are more advanced ways to add a logger. If you are interested, please refer to the <a href=\"https://redux.js.org/advanced/middleware\">offical documentation</a>. With our middleware, the previous example can be written in a cleaner way:</p>\n<pre><code class=\"javascript\">const callAPI = () =&gt; &#123;\n    return((dispatch) =&gt; &#123;\n        dispatch(startCallingApiAction);\n        actualCallApi().then(data =&gt; &#123;\n            dispatch(successAction(data));\n        &#125;).fail(err =&gt; &#123;\n            dispatch(failedAction(err));\n        &#125;);\n    &#125;);\n&#125;;\n</code></pre>\n<p>The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called <strong><em>thunk</em></strong>. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</p>\n<p>This is great, so why are we even considering <strong><em>saga</em></strong>? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in <strong><em>NodeJS</em></strong>). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to… <strong>Wait! That sounds quite familiar!! Is that the case of callback hell??</strong> Unfortunately, a good thing plus another good feature doesn’t always end up with something better. <del>It could be some shit as well (笑)</del> In this case, true, this is exactly the callback hell.<br><br></p>\n<h2 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux Saga\"></a>Redux Saga</h2><p>To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to <strong>give instructions about what to do next</strong> and we don’t care about how those instructions will be executed (Saga handles the executions).</p>\n<p>Then the thunks example can be changed as following:</p>\n<pre><code class=\"javascript\">export function* apiSideEffect(action) &#123;\n    try&#123;\n        const data = yield call(actualCallApi);\n        yield put(&#123; type:&quot;SUCCESS&quot;, payload: data &#125;);\n    &#125; catch(err) &#123;\n        yield put(&#123; type:&quot;FAILED&quot;, payload: err &#125;);\n    &#125;\n&#125;\n\nexport function* apiSaga() &#123;\n    yield takeEvery(&quot;CLICK_TO_CALL_API&quot;, apiSideEffect);\n&#125;\n</code></pre>\n<p>There are serval fucntions already being integrated in Saga:</p>\n<blockquote>\n<p><strong><code>Call</code></strong>: the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.</p>\n</blockquote>\n<blockquote>\n<p><strong><code>Put</code></strong>: Instead of dispatching an action inside the generator (Don’t ever ever do that), <strong><em>put</em></strong> Returns an object with instructions for the middleware to dispatch the action.</p>\n</blockquote>\n<blockquote>\n<p><strong><code>Select</code></strong>: Returns value from the selector function, similar with <strong><code>getState()</code></strong>. <strong><em>Note:</em></strong> It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is <strong>mutable</strong> (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).</p>\n</blockquote>\n<blockquote>\n<p><strong><code>Take</code></strong>: It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a <strong><em>promise</em></strong> resolves. In the take case, it’ll suspend the generator until a matching action is dispatched</p>\n</blockquote>\n<p>By working with Saga, we make the side effects to be <strong><em>declarative</em></strong> rather than <strong><em>imperative</em></strong>.</p>\n<blockquote>\n<p><strong><em>Declarative:</em></strong> describing what the program must accomplish, rather than describe how to accomplish it</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Imperative:</em></strong> consists of commands for the computer to perform, focuses on describing how a program operates</p>\n</blockquote>\n<p>In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the <strong>Saga is pulling the action by itself</strong>. An additional generator, known as <strong><em>watcher</em></strong> which contains <strong><em>take</em></strong> has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (<strong><em>Saga Helper</em></strong>):</p>\n<pre><code class=\"javascript\">function* watchFetchData() &#123;\n    yield takeEvery(&quot;FETCH_REQUEST&quot;, callFetchDataApi);\n&#125;\n</code></pre>\n<p><strong><em>takeEvery</em></strong> allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered</p>\n<pre><code class=\"javascript\">function* watchFetchData() &#123;\n    yield takeLatest(&quot;FETCH_REQUEST&quot;, callFetchDataApi);\n&#125;\n</code></pre>\n<p>However by using <strong><em>take</em></strong>, it is possible to fully control an action observation process to build complex control flow:</p>\n<pre><code class=\"javascript\">function* watchFetchData() &#123;\n    while(true) &#123;\n        const action = yield take(&quot;FETCH_REQUEST&quot;);\n        console.log(action);\n        yield call(callFetchDataApi, action.payload);\n    &#125;\n&#125;\n</code></pre>\n<p>All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:<br>Store:</p>\n<pre><code class=\"javascript\">const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, appluMiddleware(sagaMiddleware));    \nsagaMiddleware.run(watchFetch);\n</code></pre>\n<p>Sagas:</p>\n<pre><code class=\"javascript\">function* watchFetch(): Generator&lt;*, *, *&gt; &#123;\n    yield takeEvery(&quot;FETCH_ACTION&quot;, callFetchAPI);\n&#125;\n\nfunction* callFetchAPI(): Generator&lt;*, *, *&gt; &#123;\n    try &#123;\n        yield put(&#123; type: &quot;FETCHING&quot;, payload: ... &#125;);\n        const data = yield call(actualCallApi);\n        yield put(&#123; type: &quot;FETCH_SUCCESS&quot;, payload: data &#125;);\n    &#125; catch(err) &#123;\n        yield put(&#123; type: &quot;FETCH_FAILED&quot;, payload: err &#125;);\n    &#125;\n&#125;\n</code></pre>\n<p>Reducer:</p>\n<pre><code class=\"javascript\">const reducer = (state = initState, action) =&gt; &#123;\n    switch(action) &#123;\n        case &quot;FETCHING&quot;:\n            return &#123; loading: true, ...state &#125;;\n        case &quot;FETCH_SUCCESS&quot;:\n            return &#123; loading: false, success: true, data: action.payload, ...state &#125;;   \n        case &quot;FETCH_FAILED&quot;:\n            return &#123; loading: false, success: false, error: true, ...state &#125;;\n        default:\n            return &#123; ...state &#125;;\n    &#125;\n&#125;;\n</code></pre>\n<p>Component:</p>\n<pre><code class=\"javascript\">class myComponent extends React.Component &#123;\n    const mapStateToProps = ...\n    const mapDispatchToProps = ...\n    render() &#123;\n        return (\n            &lt;button onClick = &#123; () =&gt; this.props.dispatch(&#123;type: &quot;FETCH_ACTION&quot;&#125;) &#125;/&gt;   \n            &#123;\n                this.props.loading?\n                    &lt;p&gt;Loading..&lt;/p&gt; : this.props.error?\n                        &lt;p&gt;Error!&lt;/p&gt; : &lt;p&gt;&#123;this.props.data&#125;&lt;/p&gt;\n            &#125;\n        );\n    &#125;\n&#125;\nexport default connect(mapStateToProps, mapDispatchToProps)(myComponent);\n\n</code></pre>\n<p>For more advanced concepts, there is a well-organized <a href=\"https://redux-saga.js.org/docs/advanced/\">Saga offical documentation</a> you can refer to if you want to dive deeper.<br><br></p>\n<h2 id=\"How-to-test-Saga\"><a href=\"#How-to-test-Saga\" class=\"headerlink\" title=\"How to test Saga?\"></a>How to test Saga?</h2><p>A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</p>\n<pre><code class=\"javascript\">describe(&quot;fetch work flow&quot;, () =&gt; &#123;\n    const generator = cloneableGenerator(callFetchAPI)(&#123; type: &quot;FETCH_ACTION&quot; &#125;);\n    expect(generator.next().value).toEqual(put(&#123; type: &quot;FETCHING&quot;, payload: ... &#125;));    \n\n    test(&quot;fetch success&quot;, () =&gt; &#123;\n        const clone = generator.clone();\n        expect(clone.next().value).toEqual(put(&#123; type: &quot;FETCH_SUCCESS&quot; &#125;));\n        expect(generator.next().done).toEqual(true);\n    &#125;);\n&#125;);\n</code></pre>\n<p>In the above example, we use <strong><code>clone()</code></strong> to test different control flows and <strong><code>next()</code></strong> to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of <strong><code>next()</code></strong>:</p>\n<pre><code class=\"javascript\">expect(clone.next(false).value).toEqual( put(fetchFailedAction()) );      \n</code></pre>\n<p><br></p>\n<h2 id=\"Saga-vs-Observables\"><a href=\"#Saga-vs-Observables\" class=\"headerlink\" title=\"Saga vs Observables\"></a>Saga vs Observables</h2><p>Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good <a href=\"https://hackmd.io/s/H1xLHUQ8e\">code snippets</a> of saga vs observables that can open your mind :D</p>\n<p><br><br><br></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p><a href=\"https://redux-saga.js.org/\">https://redux-saga.js.org/</a><br><a href=\"https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\">https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it</a><br><a href=\"https://redux.js.org/advanced/middleware\">https://redux.js.org/advanced/middleware</a><br><a href=\"https://pub.dartlang.org/packages/redux_thunk\">https://pub.dartlang.org/packages/redux_thunk</a><br><a href=\"https://codeburst.io/how-i-test-redux-saga-fcc425cda018\">https://codeburst.io/how-i-test-redux-saga-fcc425cda018</a><br><a href=\"https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\">https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1</a><br><a href=\"https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\">https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/</a><br><a href=\"https://redux.js.org/introduction/getting-started\">https://redux.js.org/introduction/getting-started</a><br><a href=\"https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\">https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71</a></p>\n","site":{"data":{}},"excerpt":"<p>If you are quite experienced with redux, which is a predictable state container for JavaScript applications (<strong>Note:</strong> even thouth React and Redux is a popular combination to build fast and powerful apps, Redux is not necessarily combined with React), you are definitely feeling comfortable with its powerful store which manages all the global states and provides much cleaner logic flows to change them. If you are new to redux, <a href=\"https://redux.js.org/introduction/getting-started\">here</a> is the guide to dive before we start our topic.</p>","more":"<p></p>\n<p>In a complex javascript application, asynchronous function is always one of the most annoying part where encounters tons of bugs. If not handle them properly, the app usually ends up with <strong><em>call back hell</em></strong>.<br><br></p>\n<h2 id=\"Haven’t-heard-of-CallBack-Hell\"><a href=\"#Haven’t-heard-of-CallBack-Hell\" class=\"headerlink\" title=\"Haven’t heard of CallBack Hell?\"></a><strong>Haven’t heard of <em>CallBack Hell</em>?</strong></h2><p>Well, in javascript, the only way you can suspend a computation and have the rest operations doing later is to put the rest operations into a callback function. This callback function usually returns a <strong><code>Promise</code></strong> (And has a type of <strong><code>Promise&lt;any&gt;</code></strong>). In order to easily mark those async functions, after <strong><em>ES6</em></strong> javascript provides extra modifiers <strong><code>async</code></strong> and <strong><code>await</code></strong>, which actually wraps up the original utilities of promise and makes it more readable to programmers. Hummm, sounds like things are going better… <del><strong>NO!! It doesn’t resolve anything!</strong></del> The core problem leads to a callback hell is the hierarchical async calls, for example</p>\n<p>you have some simple synchronous functions which are in a chain to accomplish some logics:</p>\n<pre><code class=\"javascript\">a = getSomething();\nb = getMore(a);\nc = getMoreAndMore(b);\n...\n</code></pre>\n<p>It looks fine for now, but what if they all turn out to be async? Then you have to follow the callback style to make them operate one right after another is done:</p>\n<pre><code class=\"javascript\">getSomthing(function(a) &#123;\n    getMore(a, function(b) &#123;\n        getMoreAndMore(b, function(c) &#123;\n            //keep going...\n        &#125;);\n    &#125;);\n&#125;);\n</code></pre>\n<p>Or you prefer <strong><em>ES6</em></strong>:</p>\n<pre><code class=\"javascript\">async function getSomething(a) &#123;\n    await b = ToDo(a);\n    return await getMore((b) =&gt; &#123;\n        return await ToDo(b);\n    &#125;).then((c) =&gt; &#123;\n        return await ToDo(c);\n    &#125;).then(...);\n&#125;\n</code></pre>\n<p>Looks really confused? This will getting even uglier if we are using callbacks in loops.<br><br></p>\n<h2 id=\"Redux-Thunks\"><a href=\"#Redux-Thunks\" class=\"headerlink\" title=\"Redux Thunks\"></a>Redux Thunks</h2><p>Back to our redux app, we usually want to update some states after an async call to inform the UI that the data is ready to be fetched. That is always achieved by dispatching an action from the component to the reducer:</p>\n<pre><code class=\"javascript\">async const callAPI = () =&gt; &#123;\n    ...\n    return response;\n&#125;;\n...\nasync const updateUI = (...params) =&gt; &#123;\n    const res = await callAPI();\n    if (res.status === 200)\n        dispatch(&#123;type: &quot;UPDATE&quot;, isSuccess: true&#125;);\n&#125;;\n...\nrender(&#123;\n    ...\n    this.props.isSuccess?\n        showData() : showError()\n&#125;);\n</code></pre>\n<p>This isn’t bad, but we are always looking for something better. An advanced way to rewrite it is using redux middleware. <strong><em>Middleware</em></strong> is somewhere you can put the code after the framework receives a request and before it generates a response. For example, we want to add a logger in the redux store so that when the store catches an action, before it returns the new state, the logger can log the previous state and the new generated state. This is what can be added as a middleware:</p>\n<pre><code class=\"javascript\">function logger(store) &#123;\n    return function wrapDispatch (next) &#123;\n        return function dispatchAndLog (action) &#123;\n            console.log(&quot;dispatching.. &quot;, action);\n            let result = next(action);\n            console.log(&quot;new state&quot;, store.getState());\n            return result;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>There are more advanced ways to add a logger. If you are interested, please refer to the <a href=\"https://redux.js.org/advanced/middleware\">offical documentation</a>. With our middleware, the previous example can be written in a cleaner way:</p>\n<pre><code class=\"javascript\">const callAPI = () =&gt; &#123;\n    return((dispatch) =&gt; &#123;\n        dispatch(startCallingApiAction);\n        actualCallApi().then(data =&gt; &#123;\n            dispatch(successAction(data));\n        &#125;).fail(err =&gt; &#123;\n            dispatch(failedAction(err));\n        &#125;);\n    &#125;);\n&#125;;\n</code></pre>\n<p>The successful response data is wrapped in the payload of the action, sent to the reducer. Once the store updates the data, it will be mapped as a prop back to the component and request for a rerender. This middleware is also called <strong><em>thunk</em></strong>. By applying thunk to decouple the presentation layer, we can get rid of most of the side effects in components, instead, managing and orchestrating side effects in thunks.</p>\n<p>This is great, so why are we even considering <strong><em>saga</em></strong>? Well, one of the advantages of middleware is that it can be chained. Every middleware mounted in redux store starts an individual thread (or something really looks like a thread in <strong><em>NodeJS</em></strong>). When a middleware captures an action and handles its side effect, it can dispatch a new action to another middleware to do nested logics. This behavior of middleware indicates that thunks can be chained as well, for example thunkA forwards its return payload to thunkB and thunkB forwards its return payload to… <strong>Wait! That sounds quite familiar!! Is that the case of callback hell??</strong> Unfortunately, a good thing plus another good feature doesn’t always end up with something better. <del>It could be some shit as well (笑)</del> In this case, true, this is exactly the callback hell.<br><br></p>\n<h2 id=\"Redux-Saga\"><a href=\"#Redux-Saga\" class=\"headerlink\" title=\"Redux Saga\"></a>Redux Saga</h2><p>To handle the possible endless callback functions and also to make it more easily to test in a component which has complicated logics, we need to change our previous thoughts. Just like shifting from Process Oriented Programming to Object Oriented Programming, instead of telling the application how to handle the side effects, suppose it already knows how to call a function and how to dispatch an action, all we need to do is to <strong>give instructions about what to do next</strong> and we don’t care about how those instructions will be executed (Saga handles the executions).</p>\n<p>Then the thunks example can be changed as following:</p>\n<pre><code class=\"javascript\">export function* apiSideEffect(action) &#123;\n    try&#123;\n        const data = yield call(actualCallApi);\n        yield put(&#123; type:&quot;SUCCESS&quot;, payload: data &#125;);\n    &#125; catch(err) &#123;\n        yield put(&#123; type:&quot;FAILED&quot;, payload: err &#125;);\n    &#125;\n&#125;\n\nexport function* apiSaga() &#123;\n    yield takeEvery(&quot;CLICK_TO_CALL_API&quot;, apiSideEffect);\n&#125;\n</code></pre>\n<p>There are serval fucntions already being integrated in Saga:</p>\n<blockquote>\n<p><strong><code>Call</code></strong>: the method call will return only a plain object describing the operation so redux-saga can take care of the invocation and returns the result to the generator. The first parameter is the generator function ready to be called and the rest params are all the arguments in the generator.</p>\n</blockquote>\n<blockquote>\n<p><strong><code>Put</code></strong>: Instead of dispatching an action inside the generator (Don’t ever ever do that), <strong><em>put</em></strong> Returns an object with instructions for the middleware to dispatch the action.</p>\n</blockquote>\n<blockquote>\n<p><strong><code>Select</code></strong>: Returns value from the selector function, similar with <strong><code>getState()</code></strong>. <strong><em>Note:</em></strong> It is not recommended to use this function because it returns the value corresponding to the contents of the store state tree, which is most likely a plain Javascript object and is <strong>mutable</strong> (Redux wants you to handle state immutably, which means return a new state instead of changing the old one).</p>\n</blockquote>\n<blockquote>\n<p><strong><code>Take</code></strong>: It creates a command object that tells the middleware to wait for a specific action. The resulting behavior of the call Effect is the same as when the middleware suspends the generator until a <strong><em>promise</em></strong> resolves. In the take case, it’ll suspend the generator until a matching action is dispatched</p>\n</blockquote>\n<p>By working with Saga, we make the side effects to be <strong><em>declarative</em></strong> rather than <strong><em>imperative</em></strong>.</p>\n<blockquote>\n<p><strong><em>Declarative:</em></strong> describing what the program must accomplish, rather than describe how to accomplish it</p>\n</blockquote>\n<blockquote>\n<p><strong><em>Imperative:</em></strong> consists of commands for the computer to perform, focuses on describing how a program operates</p>\n</blockquote>\n<p>In the case of take, the control is inverted. Instead of the actions being pushed to the handler tasks, the <strong>Saga is pulling the action by itself</strong>. An additional generator, known as <strong><em>watcher</em></strong> which contains <strong><em>take</em></strong> has to be created to watch a specific action and being triggered once the following action is dispatched in the application. There are two ways to create a watcher, one is using the buid-in functions (<strong><em>Saga Helper</em></strong>):</p>\n<pre><code class=\"javascript\">function* watchFetchData() &#123;\n    yield takeEvery(&quot;FETCH_REQUEST&quot;, callFetchDataApi);\n&#125;\n</code></pre>\n<p><strong><em>takeEvery</em></strong> allows multiple request to be proceeding at the same time. Or if you just want the latest request to be fired (the older one will be overrided during each time the watcher is triggered</p>\n<pre><code class=\"javascript\">function* watchFetchData() &#123;\n    yield takeLatest(&quot;FETCH_REQUEST&quot;, callFetchDataApi);\n&#125;\n</code></pre>\n<p>However by using <strong><em>take</em></strong>, it is possible to fully control an action observation process to build complex control flow:</p>\n<pre><code class=\"javascript\">function* watchFetchData() &#123;\n    while(true) &#123;\n        const action = yield take(&quot;FETCH_REQUEST&quot;);\n        console.log(action);\n        yield call(callFetchDataApi, action.payload);\n    &#125;\n&#125;\n</code></pre>\n<p>All right, now you have been exposed to everything you need to know before start trying redux saga on your own. Here is a short overall example that may also help:<br>Store:</p>\n<pre><code class=\"javascript\">const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, appluMiddleware(sagaMiddleware));    \nsagaMiddleware.run(watchFetch);\n</code></pre>\n<p>Sagas:</p>\n<pre><code class=\"javascript\">function* watchFetch(): Generator&lt;*, *, *&gt; &#123;\n    yield takeEvery(&quot;FETCH_ACTION&quot;, callFetchAPI);\n&#125;\n\nfunction* callFetchAPI(): Generator&lt;*, *, *&gt; &#123;\n    try &#123;\n        yield put(&#123; type: &quot;FETCHING&quot;, payload: ... &#125;);\n        const data = yield call(actualCallApi);\n        yield put(&#123; type: &quot;FETCH_SUCCESS&quot;, payload: data &#125;);\n    &#125; catch(err) &#123;\n        yield put(&#123; type: &quot;FETCH_FAILED&quot;, payload: err &#125;);\n    &#125;\n&#125;\n</code></pre>\n<p>Reducer:</p>\n<pre><code class=\"javascript\">const reducer = (state = initState, action) =&gt; &#123;\n    switch(action) &#123;\n        case &quot;FETCHING&quot;:\n            return &#123; loading: true, ...state &#125;;\n        case &quot;FETCH_SUCCESS&quot;:\n            return &#123; loading: false, success: true, data: action.payload, ...state &#125;;   \n        case &quot;FETCH_FAILED&quot;:\n            return &#123; loading: false, success: false, error: true, ...state &#125;;\n        default:\n            return &#123; ...state &#125;;\n    &#125;\n&#125;;\n</code></pre>\n<p>Component:</p>\n<pre><code class=\"javascript\">class myComponent extends React.Component &#123;\n    const mapStateToProps = ...\n    const mapDispatchToProps = ...\n    render() &#123;\n        return (\n            &lt;button onClick = &#123; () =&gt; this.props.dispatch(&#123;type: &quot;FETCH_ACTION&quot;&#125;) &#125;/&gt;   \n            &#123;\n                this.props.loading?\n                    &lt;p&gt;Loading..&lt;/p&gt; : this.props.error?\n                        &lt;p&gt;Error!&lt;/p&gt; : &lt;p&gt;&#123;this.props.data&#125;&lt;/p&gt;\n            &#125;\n        );\n    &#125;\n&#125;\nexport default connect(mapStateToProps, mapDispatchToProps)(myComponent);\n\n</code></pre>\n<p>For more advanced concepts, there is a well-organized <a href=\"https://redux-saga.js.org/docs/advanced/\">Saga offical documentation</a> you can refer to if you want to dive deeper.<br><br></p>\n<h2 id=\"How-to-test-Saga\"><a href=\"#How-to-test-Saga\" class=\"headerlink\" title=\"How to test Saga?\"></a>How to test Saga?</h2><p>A function that returns a simple object is easier to test than a function that directly makes an asynchronous call. For redux saga, each time you yield a function call will return a plain javascript object which makes the workflow much easier to test. You don’t need to use the real API, fake it, or mock it, instead just iterating over the generator function, asserting for equality on the values yielded.</p>\n<pre><code class=\"javascript\">describe(&quot;fetch work flow&quot;, () =&gt; &#123;\n    const generator = cloneableGenerator(callFetchAPI)(&#123; type: &quot;FETCH_ACTION&quot; &#125;);\n    expect(generator.next().value).toEqual(put(&#123; type: &quot;FETCHING&quot;, payload: ... &#125;));    \n\n    test(&quot;fetch success&quot;, () =&gt; &#123;\n        const clone = generator.clone();\n        expect(clone.next().value).toEqual(put(&#123; type: &quot;FETCH_SUCCESS&quot; &#125;));\n        expect(generator.next().done).toEqual(true);\n    &#125;);\n&#125;);\n</code></pre>\n<p>In the above example, we use <strong><code>clone()</code></strong> to test different control flows and <strong><code>next()</code></strong> to iterate to the next function ready be yielded. The mock return value can also be injected as an argument of <strong><code>next()</code></strong>:</p>\n<pre><code class=\"javascript\">expect(clone.next(false).value).toEqual( put(fetchFailedAction()) );      \n</code></pre>\n<p><br></p>\n<h2 id=\"Saga-vs-Observables\"><a href=\"#Saga-vs-Observables\" class=\"headerlink\" title=\"Saga vs Observables\"></a>Saga vs Observables</h2><p>Redux saga is not the only solution to our apps which may have complex control flows, they are other helpful tools providing different trade-offs which can also resolve the async problems. Here are some good <a href=\"https://hackmd.io/s/H1xLHUQ8e\">code snippets</a> of saga vs observables that can open your mind :D</p>\n<p><br><br><br></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><p><a href=\"https://redux-saga.js.org/\">https://redux-saga.js.org/</a><br><a href=\"https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it\">https://stackoverflow.com/questions/25098066/what-is-callback-hell-and-how-and-why-rx-solves-it</a><br><a href=\"https://redux.js.org/advanced/middleware\">https://redux.js.org/advanced/middleware</a><br><a href=\"https://pub.dartlang.org/packages/redux_thunk\">https://pub.dartlang.org/packages/redux_thunk</a><br><a href=\"https://codeburst.io/how-i-test-redux-saga-fcc425cda018\">https://codeburst.io/how-i-test-redux-saga-fcc425cda018</a><br><a href=\"https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1\">https://engineering.universe.com/what-is-redux-saga-c1252fc2f4d1</a><br><a href=\"https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/\">https://www.sitepoint.com/redux-without-react-state-management-vanilla-javascript/</a><br><a href=\"https://redux.js.org/introduction/getting-started\">https://redux.js.org/introduction/getting-started</a><br><a href=\"https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71\">https://blog.logrocket.com/understanding-redux-saga-from-action-creators-to-sagas-2587298b5e71</a></p>"},{"title":"A Brew Error When Upgrade Mongodb to 4.2","date":"2019-10-01T21:38:05.000Z","photos":["../images/mongodb_cover.JPG"],"_content":"\nWhen I tried to upgrade my old mongodb to 4.2 through ` homebrew `:\n```\nbrew tap mongodb/brew\n```\n<!-- more -->\nthen:\n```\nbrew install mongodb-community@4.2\n```\n\nI encountered a strange error saying:\n```\nError: parent directory is world writable but not sticky\n```\n\nThat is because of the privilege issue of writing to /tmp,\ndo the following will solve the problem:\n```\nsudo chmod +t /private/tmp\n```\n\nRemeber to link to the new version after the installation:\n```\nbrew link --overwrite mongodb-community\n```\n","source":"_posts/An-Brew-Error-When-Upgrade-Mongodb-to-4-2.md","raw":"---\ntitle: A Brew Error When Upgrade Mongodb to 4.2\ndate: 2019-10-01 17:38:05\ntags: [Brew, Mongo]\nphotos: [\"../images/mongodb_cover.JPG\"]\n---\n\nWhen I tried to upgrade my old mongodb to 4.2 through ` homebrew `:\n```\nbrew tap mongodb/brew\n```\n<!-- more -->\nthen:\n```\nbrew install mongodb-community@4.2\n```\n\nI encountered a strange error saying:\n```\nError: parent directory is world writable but not sticky\n```\n\nThat is because of the privilege issue of writing to /tmp,\ndo the following will solve the problem:\n```\nsudo chmod +t /private/tmp\n```\n\nRemeber to link to the new version after the installation:\n```\nbrew link --overwrite mongodb-community\n```\n","slug":"An-Brew-Error-When-Upgrade-Mongodb-to-4-2","published":1,"updated":"2021-01-07T21:13:20.361Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhq00035opuf3bg3q0l","content":"<p>When I tried to upgrade my old mongodb to 4.2 through <code>homebrew</code>:</p>\n<pre><code>brew tap mongodb/brew\n</code></pre><a id=\"more\"></a>\n<p>then:</p>\n<pre><code>brew install mongodb-community@4.2\n</code></pre><p>I encountered a strange error saying:</p>\n<pre><code>Error: parent directory is world writable but not sticky\n</code></pre><p>That is because of the privilege issue of writing to /tmp,<br>do the following will solve the problem:</p>\n<pre><code>sudo chmod +t /private/tmp\n</code></pre><p>Remeber to link to the new version after the installation:</p>\n<pre><code>brew link --overwrite mongodb-community\n</code></pre>","site":{"data":{}},"excerpt":"<p>When I tried to upgrade my old mongodb to 4.2 through <code>homebrew</code>:</p>\n<pre><code>brew tap mongodb/brew\n</code></pre>","more":"<p>then:</p>\n<pre><code>brew install mongodb-community@4.2\n</code></pre><p>I encountered a strange error saying:</p>\n<pre><code>Error: parent directory is world writable but not sticky\n</code></pre><p>That is because of the privilege issue of writing to /tmp,<br>do the following will solve the problem:</p>\n<pre><code>sudo chmod +t /private/tmp\n</code></pre><p>Remeber to link to the new version after the installation:</p>\n<pre><code>brew link --overwrite mongodb-community\n</code></pre>"},{"title":"Computer Vision - Stereo","date":"2021-01-08T01:02:19.000Z","katex":true,"mathjax":true,"photos":["../images/stereo-cover.png"],"_content":"\nStereo is the extraction of 3D information from digital images by comparing the same objects about a scene captured by different cameras located at two vantage points. The information such as depth of the object can be extracted by examining the disparity changes among two images.\n\n<!-- more -->\n\n## Dataset\n\nUse one of the classic datasets from University of Tsukuba. The image, from back to the front, contains a bookshelf (background), a camera, a table, a plaster model and a lamp. Two images were taken from two parallel points, where the left image is referred as the base image (reference) and right image is referred to calculate disparities for each pixel (the pixels that refer to the same object will move leftwards while the camera is moving rightwards).\n\n![stere dataset](stereo-dataset.png)\n\nThe ground truth image shows the correct object boundaries and their corresponding depth represented by different color scales.\n\n\n## Intuition\n\nIt is easily to come up with that the closer objects (smaller depths) will have larger disparities during the movement of the camera compared with the further objects (larger depths).\n\n![stere disparity map](stereo-intuition.png)\n\nFor the object which is in the same depth (e.g. the table and the cans on it), their pixels are very likely to have the same disparities among the two views. Therefore, if there is any approach which is able to figure out the correct disparity for each pixel, then by assigning the same label (color) to pixels that share the same disparity, the depth of each object can be extracted from the scene.\n\n\n## Window based approach\n\nA single pixel can hardly represent the features of an object. Therefore assign each pixel a rigid window with fixed height and width in the reference image (left image). The intensities within the window represents the weight of the central pixel. In the right image, find a matching window on the same scan line that looks most similar to the reference window. This can be achieved by enumerating disparity within a reasonable range (manually defined) and comparing the sum of squared intensity differences within the windows.\n\n![stere window based approach](stereo-window-based-intensity.png)\n\nSum of Squared Difference: {% mathjax %}\\sum (I(x,y) - I'(x-d,y))^2{% endmathjax %}\nFor any pixel p compute SSD between two windows for all disparities {% mathjax %}d{% endmathjax %}, where {% mathjax %}d \\in [d_{min},d_{max}]{% endmathjax %}, then obtain an optimal {% mathjax %}d_p{% endmathjax %} by optimizing {% mathjax %}d_p=argmin_d SSD(p,d){% endmathjax %}.\n\nThis approach can be optimized using dynamic programming which calculate the current summation of intensities and subtract the uncovered region to obtain the sum of intensities within the current window size.\n\n![stere image integral](stereo-image-integral.png)\n\n{% mathjax %}\nW=f_{in}(br)- f_{in}(bl)- f_{in}(tr) + f_{in}(tl)\n{% endmathjax %}\n\nThe algorithm has runtime of {% mathjax %}O(I*d){% endmathjax %}, where {% mathjax %}I{% endmathjax %} is the number of intensities and {% mathjax %}d{% endmathjax %} is the enumerated disparities.\n\n![stere SSD](stereo-SSD.png)\n\nThe above images show the intensity difference choosing different range of disparities. The shadowed regions represent the pixels that look similar (less intensity difference). A small disparity can easily recognized the further objects in the scene (e.g. the bookshelf) and a large disparity helps to extract closer objects (e.g. the lamp).\n\nSet disparity range.\n```python\nd_min = 2\nd_max = 15\n```\n\nCalculate squared differences for different shifts.\n```python\ndef SD_array(imageL, imageR, d_minimum, d_maximum):\n    SD = np.zeros((1+d_maximum-d_minimum, np.shape(imageL)[0], np.shape(imageL)[1]))\n    for d in range(d_minimum, d_maximum+1):\n        rshift = np.roll(imageR, d, axis=1)\n        SD[d-d_minimum,:,:] = (imageL[:,:,0] - rshift[:,:,0])**2 +\\\n                              (imageL[:,:,1] - rshift[:,:,1])**2 +\\\n                              (imageL[:,:,2] - rshift[:,:,2])**2  \n    return SD\n\nSD = SD_array(im_left, im_right, d_min, d_max)\n```\n\nMap summation of squared differences to disparity map (image)\n```python\ndef SSDtoDmap(SSD_array, d_minimum, d_maximum):    \n    dMap = np.full(np.shape(SD[0]), d_minimum)\n    inf_mask = np.full(np.shape(SD[0]), False)\n    mMap = np.amin(SSD_array, axis=0)\n    for i in range(d_maximum-d_minimum+1):\n        dMap = np.where(SSD_array[i]==mMap, i, dMap)\n        inf_mask = inf_mask | (SSD_array[i] == INFTY)\n    dMap[inf_mask] = 0\n    return dMap\n```\n\nsummation in a certain window size.\n```python\nINFTY = np.inf\n\ndef windSum(img, window_width):\n    win_img = np.zeros(img.shape)\n    # shift bottom/right value\n    bshift = window_width//2\n    # shift top/left value\n    tshift = (window_width+1)//2\n    simg = integral_image(img)\n    br = np.roll(np.roll(simg, -bshift, axis=1), -bshift, axis=0)\n    tl = np.roll(np.roll(simg, tshift, axis=1), tshift, axis=0)\n    bl = np.roll(np.roll(simg, tshift, axis=1), -bshift, axis=0)\n    tr = np.roll(np.roll(simg, -bshift, axis=1), tshift, axis=0)\n    win_img = br - bl - tr + tl\n    # bottom right margin value\n    bmargin = window_width//2\n    # top left margin value\n    tmargin = window_width//2 if window_width%2 == 1 else (window_width-1)//2\n    # top margin\n    win_img[:tmargin+1,:] = np.inf\n    # left margin\n    win_img[:,:tmargin+1] = np.inf\n    # bottom margin\n    win_img[img.shape[0]-bmargin:,:] = np.inf\n    # right margin\n    win_img[:,img.shape[1]-bmargin:] = np.inf\n    return np.abs(win_img)\n```\n\nFind the optimal disparity.\n```python\ndef Dmap_Windows(imageL, imageR, d_minimum, d_maximum, window_width):\n    SD = SD_array(imageL, imageR, d_minimum, d_maximum)\n    SSD = np.zeros(np.shape(SD))\n    for Delta in range(1+d_maximum-d_minimum):\n        SSD[Delta] = windSum(SD[Delta], window_width)\n    return SSDtoDmap(SSD, d_minimum, d_maximum)\n```\n\n![stere window based result](stereo-window-based-result.png)\n\nThe chosen size of the window also has effect to the result as larger window size will blur the result disparity map and smaller window size will generate more noise.\n\n\n## Scan-line approach\n\nThe scan-line approach seeks the shortest paths for pixels in the same scan line. An {% mathjax %}n * n{% endmathjax %} grid graph can be built using each scan line (n is the number of pixels located in the scan line). Horizontal and vertical edges on this graph describe occlusions, as well as disparity jumps (discontinuities). The diagonal lines on the graph represents disparity levels (shifts) that can be seen as depth layers.\n\n![stere scan line graph](stereo-scan-line-graph.png)\n\nThe loss function for a single pixel in the scan line can be expressed as the combination of the cost of photo consistency and the cost of the spatial coherence\n{% mathjax %}\nE(p)=|I_p - I_{p+d_p}| + w|d_p - d_{p+1}|\n{% endmathjax %}\nwhere the photo consistency represents the intensity change and spatial coherence penalize the disparity jump. The overall loss can be expressed as\n{% mathjax %}\nE(d)=\\sum_{p \\in S} D_p(d_p) + \\sum_{p \\in S} V(d_p, d_{p+1}) = \\sum_{p \\in S} |I_p - I_{p+d_p}| + \\sum_{p \\in S} w|d_p - d_{p+1}|\n{% endmathjax %}\nThe loss can be optimized using Viterbi algorithm since the graph does not contains any loop.\n\nImplementation of Viterbi Algorithm.\n```python\ndef traverse_disparity(SD, row, d_min, d_max, w, normalization='standard', threshold=0, sigma=0):\n    K = d_max - d_min + 1\n    T = SD.shape[2]\n    T1 = np.empty((K, T))\n    T2 = np.empty((K, T))\n    \n    # KxK matrix\n    index = np.array([np.arange(1, K+1)]*K).T\n    # record E_bar[i]\n    T1[:, 0] = 0\n    # record i-1\n    T2[:, 0] = np.arange(1, K+1).T\n    \n    # forward pass\n    for i in range(1, T):\n        if normalization == 'standard':\n            normal = w * np.abs(index - [T2[:, i-1]]*K)\n        elif normalization == \"quadratic\":\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n        elif normalization == \"robust\":\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n            normal[normal > threshold] = threshold\n        elif normal == \"gaussian\":\n            p = -np.square(SD[1, row, i]) / (2 * sigma**2)\n            wp = w * np.exp(p)\n            normal = wp * np.abs(index - [T2[:, i-1]]*K)\n        m = np.array([SD[:, row, i]]*K).T + normal\n        T1[:, i] = np.min(m, axis=0)\n        T2[:, i] = np.argmin(m, axis=0)\n    \n    x = np.empty(T)\n    x[-1] = np.argmin(T1[:, T-1]) + d_min\n    \n    # backward pass\n    for i in reversed(range(1, T)):\n        x[i - 1] = T2[int(x[i] - d_min), i] + d_min\n    return x\n```\n\nCompute scan line disparity map.\n```python\n_, R, C = SD.shape\nR = SD.shape[1]\nd_scan = np.zeros((R, C))\n\nfor row in range(R):\n    d_scan[row,:] = traverse_disparity(SD, row, d_min, d_max, 0.7, normalization='standard')\n\n```\n\nThe following images show the result applying scan line approach.\n![stere scan line result1](stereo-scan-line-result1.png)\n\nA better result can be obtained by replacing the original images with the computed SSD maps so that each pixel will also contains information of adjacent pixels within the same window. This helps to reduce the noise.\n![stere scan line result2](stereo-scan-line-result2.png)\n\n\n## Full Grid approach\n\nFull grid stereo is a more advanced approach using fully connected graph. In scan line stereo, the loss function is computed only using the pixels within the same scan line. To consider the contiguous among scan lines, vertical edges are added.\n\n![stere full grid graph](stereo-full-grid-graph.png)\n\nNow, the loss function of a single pixel is not only decided by pixels on horizon, but also related to upper and lower pixels. Viterbi algorithm (DP) can be no longer applied since the graph apparently contains loops. Instead, apply graph cut to optimize the loss function. The weights of neighborhood edges on a single layer of the graph represents the spatial coherence (disparity jump). Multiple layers are required to represent the photo consistency (intensity change). The cost function becomes\n{% mathjax %}\nE(d)=\\sum_{p \\in G} D_p(d_p) + \\sum_{p, q \\in N} V(d_p, d_q)\n{% endmathjax %}\n\n![stere graph cut](stereo-graph-cut.png)\n\nThe orthogonal edge represents the cost of photo consistency of the current pixel refers to a specific disparity change to the refer image. For example, the edge at the bottom layer represents the intensity difference between the current pixel and the pixel at the minimal disparity; the edge at the top layer represents the intensity difference between the current pixel and the pixel at the maximum disparity. After defining the 3D graph and applying max-flow, the cut occurred at the orthogonal edges is the result disparity for each pixel.\n\nBuild full gird and apply graph cut. Use a python wrapper library [maxflow](http://pmneila.github.io/PyMaxflow/maxflow.html).\n```python\nimport maxflow\n\ndef graph_cut_3D(im_left, SD, d_min, d_max, w):\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    g = maxflow.GraphFloat()\n    depth = d_max - d_min + 1\n    \n    # depth x height x width\n    nodeIds = g.add_grid_nodes((depth, num_rows, num_cols))\n    structure = np.array([[[0, 0, 0],\n                           [0, 0, 0],\n                           [0, 0, 0]],\n                          [[0, 0, 0],\n                           [0, 0, 1],\n                           [0, 1, 0]],\n                          [[0, 0, 0],\n                           [0, 1, 0],\n                           [0, 0, 0]]])\n    g.add_grid_edges(nodeIds, structure=structure, symmetric=True)\n\n    # add n-links for spatial coherence\n    structure_x = np.array([[0, 0, 0], [0, 0, 1], [0, 0, 0]])\n    structure_y = np.array([[0, 0, 0], [0, 0, 0], [0, 1, 0]])\n    \n    right = np.roll(im_left, -1, axis=1)\n    below = np.roll(im_left, -1, axis=0)\n    n_right = (im_left[:,:,0] - right[:,:,0])**2 +\\\n              (im_left[:,:,1] - right[:,:,1])**2 +\\\n              (im_left[:,:,2] - right[:,:,2])**2\n    \n    n_below = (im_left[:,:,0] - below[:,:,0])**2 +\\\n              (im_left[:,:,1] - below[:,:,1])**2 +\\\n              (im_left[:,:,2] - below[:,:,2])**2\n    \n    g.add_grid_edges(nodeIds, weights=n_right, structure=structure_x, symmetric=True)\n    g.add_grid_edges(nodeIds, weights=n_below, structure=structure_y, symmetric=True)\n\n    # add n-links for photo consistency\n    structure_z = np.array([[[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 1, 0],\n                             [0, 0, 0]]])\n    \n    # weight is multiplied here\n    g.add_grid_edges(nodeIds, weights=SD*w, structure=structure_z, symmetric=True)\n    \n    # find maximum weight of n-link edges\n    max_right = np.max(n_right)\n    max_below = np.max(n_below)\n    max_depth = np.max(SD)\n    max_edge = np.max([max_right, max_below, max_depth])\n\n    # assign t-links\n    t_source = np.zeros((depth, num_rows, num_cols))\n    t_sink = np.zeros((depth, num_rows, num_cols))\n\n    t_source[0] = np.ones((num_rows, num_cols)) * max_edge * 4\n    t_sink[-1] = np.ones((num_rows, num_cols)) * max_edge * 4\n    g.add_grid_tedges(nodeIds, t_source, t_sink)\n\n    g.maxflow()\n        \n    return g, nodeIds\n```\n\nApply full grid stereo and return the disparity map.\n```python\ndef full_grid_stereo(im_left, SD, d_min, d_max, w):\n    flow_g, nodeIds = graph_cut_3D(im_left, SD, d_min, d_max, w)\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    # traverse each depth of the full grid\n    # and find out where the grid was cut\n    disparity_map = np.zeros((num_rows, num_cols))\n    cur_disparity = ~np.ones((num_rows, num_cols), dtype=bool)\n\n    for d in range(d_min+1, d_max+1):\n        index = d - d_min\n        cur_depth = flow_g.get_grid_segments(nodeIds[index])\n        # compute xor to find any label change\n        cut = cur_disparity ^ cur_depth\n        disparity_map[cut] = d - 1\n        cur_disparity = cur_depth\n        \n    return disparity_map\n```\n\nThe following images show the result of applying full grid stereo.\n![stere graph cut result1](stereo-full-grid-result1.png)\n\nApply full grid approach on other datasets ([Middlebury](https://vision.middlebury.edu/stereo/data/]))\n![stere graph cut test](stereo-test.png)\n\nThe corresponding results show as follows.\n![stere graph cut test result](stereo-test-result.png)","source":"_posts/Computer-Vision-Stereo.md","raw":"---\ntitle: Computer Vision - Stereo\ndate: 2021-01-07 20:02:19\ntags: [CV, stereo]\nkatex: true\nmathjax: true\nphotos: [\"../images/stereo-cover.png\"]\n---\n\nStereo is the extraction of 3D information from digital images by comparing the same objects about a scene captured by different cameras located at two vantage points. The information such as depth of the object can be extracted by examining the disparity changes among two images.\n\n<!-- more -->\n\n## Dataset\n\nUse one of the classic datasets from University of Tsukuba. The image, from back to the front, contains a bookshelf (background), a camera, a table, a plaster model and a lamp. Two images were taken from two parallel points, where the left image is referred as the base image (reference) and right image is referred to calculate disparities for each pixel (the pixels that refer to the same object will move leftwards while the camera is moving rightwards).\n\n![stere dataset](stereo-dataset.png)\n\nThe ground truth image shows the correct object boundaries and their corresponding depth represented by different color scales.\n\n\n## Intuition\n\nIt is easily to come up with that the closer objects (smaller depths) will have larger disparities during the movement of the camera compared with the further objects (larger depths).\n\n![stere disparity map](stereo-intuition.png)\n\nFor the object which is in the same depth (e.g. the table and the cans on it), their pixels are very likely to have the same disparities among the two views. Therefore, if there is any approach which is able to figure out the correct disparity for each pixel, then by assigning the same label (color) to pixels that share the same disparity, the depth of each object can be extracted from the scene.\n\n\n## Window based approach\n\nA single pixel can hardly represent the features of an object. Therefore assign each pixel a rigid window with fixed height and width in the reference image (left image). The intensities within the window represents the weight of the central pixel. In the right image, find a matching window on the same scan line that looks most similar to the reference window. This can be achieved by enumerating disparity within a reasonable range (manually defined) and comparing the sum of squared intensity differences within the windows.\n\n![stere window based approach](stereo-window-based-intensity.png)\n\nSum of Squared Difference: {% mathjax %}\\sum (I(x,y) - I'(x-d,y))^2{% endmathjax %}\nFor any pixel p compute SSD between two windows for all disparities {% mathjax %}d{% endmathjax %}, where {% mathjax %}d \\in [d_{min},d_{max}]{% endmathjax %}, then obtain an optimal {% mathjax %}d_p{% endmathjax %} by optimizing {% mathjax %}d_p=argmin_d SSD(p,d){% endmathjax %}.\n\nThis approach can be optimized using dynamic programming which calculate the current summation of intensities and subtract the uncovered region to obtain the sum of intensities within the current window size.\n\n![stere image integral](stereo-image-integral.png)\n\n{% mathjax %}\nW=f_{in}(br)- f_{in}(bl)- f_{in}(tr) + f_{in}(tl)\n{% endmathjax %}\n\nThe algorithm has runtime of {% mathjax %}O(I*d){% endmathjax %}, where {% mathjax %}I{% endmathjax %} is the number of intensities and {% mathjax %}d{% endmathjax %} is the enumerated disparities.\n\n![stere SSD](stereo-SSD.png)\n\nThe above images show the intensity difference choosing different range of disparities. The shadowed regions represent the pixels that look similar (less intensity difference). A small disparity can easily recognized the further objects in the scene (e.g. the bookshelf) and a large disparity helps to extract closer objects (e.g. the lamp).\n\nSet disparity range.\n```python\nd_min = 2\nd_max = 15\n```\n\nCalculate squared differences for different shifts.\n```python\ndef SD_array(imageL, imageR, d_minimum, d_maximum):\n    SD = np.zeros((1+d_maximum-d_minimum, np.shape(imageL)[0], np.shape(imageL)[1]))\n    for d in range(d_minimum, d_maximum+1):\n        rshift = np.roll(imageR, d, axis=1)\n        SD[d-d_minimum,:,:] = (imageL[:,:,0] - rshift[:,:,0])**2 +\\\n                              (imageL[:,:,1] - rshift[:,:,1])**2 +\\\n                              (imageL[:,:,2] - rshift[:,:,2])**2  \n    return SD\n\nSD = SD_array(im_left, im_right, d_min, d_max)\n```\n\nMap summation of squared differences to disparity map (image)\n```python\ndef SSDtoDmap(SSD_array, d_minimum, d_maximum):    \n    dMap = np.full(np.shape(SD[0]), d_minimum)\n    inf_mask = np.full(np.shape(SD[0]), False)\n    mMap = np.amin(SSD_array, axis=0)\n    for i in range(d_maximum-d_minimum+1):\n        dMap = np.where(SSD_array[i]==mMap, i, dMap)\n        inf_mask = inf_mask | (SSD_array[i] == INFTY)\n    dMap[inf_mask] = 0\n    return dMap\n```\n\nsummation in a certain window size.\n```python\nINFTY = np.inf\n\ndef windSum(img, window_width):\n    win_img = np.zeros(img.shape)\n    # shift bottom/right value\n    bshift = window_width//2\n    # shift top/left value\n    tshift = (window_width+1)//2\n    simg = integral_image(img)\n    br = np.roll(np.roll(simg, -bshift, axis=1), -bshift, axis=0)\n    tl = np.roll(np.roll(simg, tshift, axis=1), tshift, axis=0)\n    bl = np.roll(np.roll(simg, tshift, axis=1), -bshift, axis=0)\n    tr = np.roll(np.roll(simg, -bshift, axis=1), tshift, axis=0)\n    win_img = br - bl - tr + tl\n    # bottom right margin value\n    bmargin = window_width//2\n    # top left margin value\n    tmargin = window_width//2 if window_width%2 == 1 else (window_width-1)//2\n    # top margin\n    win_img[:tmargin+1,:] = np.inf\n    # left margin\n    win_img[:,:tmargin+1] = np.inf\n    # bottom margin\n    win_img[img.shape[0]-bmargin:,:] = np.inf\n    # right margin\n    win_img[:,img.shape[1]-bmargin:] = np.inf\n    return np.abs(win_img)\n```\n\nFind the optimal disparity.\n```python\ndef Dmap_Windows(imageL, imageR, d_minimum, d_maximum, window_width):\n    SD = SD_array(imageL, imageR, d_minimum, d_maximum)\n    SSD = np.zeros(np.shape(SD))\n    for Delta in range(1+d_maximum-d_minimum):\n        SSD[Delta] = windSum(SD[Delta], window_width)\n    return SSDtoDmap(SSD, d_minimum, d_maximum)\n```\n\n![stere window based result](stereo-window-based-result.png)\n\nThe chosen size of the window also has effect to the result as larger window size will blur the result disparity map and smaller window size will generate more noise.\n\n\n## Scan-line approach\n\nThe scan-line approach seeks the shortest paths for pixels in the same scan line. An {% mathjax %}n * n{% endmathjax %} grid graph can be built using each scan line (n is the number of pixels located in the scan line). Horizontal and vertical edges on this graph describe occlusions, as well as disparity jumps (discontinuities). The diagonal lines on the graph represents disparity levels (shifts) that can be seen as depth layers.\n\n![stere scan line graph](stereo-scan-line-graph.png)\n\nThe loss function for a single pixel in the scan line can be expressed as the combination of the cost of photo consistency and the cost of the spatial coherence\n{% mathjax %}\nE(p)=|I_p - I_{p+d_p}| + w|d_p - d_{p+1}|\n{% endmathjax %}\nwhere the photo consistency represents the intensity change and spatial coherence penalize the disparity jump. The overall loss can be expressed as\n{% mathjax %}\nE(d)=\\sum_{p \\in S} D_p(d_p) + \\sum_{p \\in S} V(d_p, d_{p+1}) = \\sum_{p \\in S} |I_p - I_{p+d_p}| + \\sum_{p \\in S} w|d_p - d_{p+1}|\n{% endmathjax %}\nThe loss can be optimized using Viterbi algorithm since the graph does not contains any loop.\n\nImplementation of Viterbi Algorithm.\n```python\ndef traverse_disparity(SD, row, d_min, d_max, w, normalization='standard', threshold=0, sigma=0):\n    K = d_max - d_min + 1\n    T = SD.shape[2]\n    T1 = np.empty((K, T))\n    T2 = np.empty((K, T))\n    \n    # KxK matrix\n    index = np.array([np.arange(1, K+1)]*K).T\n    # record E_bar[i]\n    T1[:, 0] = 0\n    # record i-1\n    T2[:, 0] = np.arange(1, K+1).T\n    \n    # forward pass\n    for i in range(1, T):\n        if normalization == 'standard':\n            normal = w * np.abs(index - [T2[:, i-1]]*K)\n        elif normalization == \"quadratic\":\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n        elif normalization == \"robust\":\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n            normal[normal > threshold] = threshold\n        elif normal == \"gaussian\":\n            p = -np.square(SD[1, row, i]) / (2 * sigma**2)\n            wp = w * np.exp(p)\n            normal = wp * np.abs(index - [T2[:, i-1]]*K)\n        m = np.array([SD[:, row, i]]*K).T + normal\n        T1[:, i] = np.min(m, axis=0)\n        T2[:, i] = np.argmin(m, axis=0)\n    \n    x = np.empty(T)\n    x[-1] = np.argmin(T1[:, T-1]) + d_min\n    \n    # backward pass\n    for i in reversed(range(1, T)):\n        x[i - 1] = T2[int(x[i] - d_min), i] + d_min\n    return x\n```\n\nCompute scan line disparity map.\n```python\n_, R, C = SD.shape\nR = SD.shape[1]\nd_scan = np.zeros((R, C))\n\nfor row in range(R):\n    d_scan[row,:] = traverse_disparity(SD, row, d_min, d_max, 0.7, normalization='standard')\n\n```\n\nThe following images show the result applying scan line approach.\n![stere scan line result1](stereo-scan-line-result1.png)\n\nA better result can be obtained by replacing the original images with the computed SSD maps so that each pixel will also contains information of adjacent pixels within the same window. This helps to reduce the noise.\n![stere scan line result2](stereo-scan-line-result2.png)\n\n\n## Full Grid approach\n\nFull grid stereo is a more advanced approach using fully connected graph. In scan line stereo, the loss function is computed only using the pixels within the same scan line. To consider the contiguous among scan lines, vertical edges are added.\n\n![stere full grid graph](stereo-full-grid-graph.png)\n\nNow, the loss function of a single pixel is not only decided by pixels on horizon, but also related to upper and lower pixels. Viterbi algorithm (DP) can be no longer applied since the graph apparently contains loops. Instead, apply graph cut to optimize the loss function. The weights of neighborhood edges on a single layer of the graph represents the spatial coherence (disparity jump). Multiple layers are required to represent the photo consistency (intensity change). The cost function becomes\n{% mathjax %}\nE(d)=\\sum_{p \\in G} D_p(d_p) + \\sum_{p, q \\in N} V(d_p, d_q)\n{% endmathjax %}\n\n![stere graph cut](stereo-graph-cut.png)\n\nThe orthogonal edge represents the cost of photo consistency of the current pixel refers to a specific disparity change to the refer image. For example, the edge at the bottom layer represents the intensity difference between the current pixel and the pixel at the minimal disparity; the edge at the top layer represents the intensity difference between the current pixel and the pixel at the maximum disparity. After defining the 3D graph and applying max-flow, the cut occurred at the orthogonal edges is the result disparity for each pixel.\n\nBuild full gird and apply graph cut. Use a python wrapper library [maxflow](http://pmneila.github.io/PyMaxflow/maxflow.html).\n```python\nimport maxflow\n\ndef graph_cut_3D(im_left, SD, d_min, d_max, w):\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    g = maxflow.GraphFloat()\n    depth = d_max - d_min + 1\n    \n    # depth x height x width\n    nodeIds = g.add_grid_nodes((depth, num_rows, num_cols))\n    structure = np.array([[[0, 0, 0],\n                           [0, 0, 0],\n                           [0, 0, 0]],\n                          [[0, 0, 0],\n                           [0, 0, 1],\n                           [0, 1, 0]],\n                          [[0, 0, 0],\n                           [0, 1, 0],\n                           [0, 0, 0]]])\n    g.add_grid_edges(nodeIds, structure=structure, symmetric=True)\n\n    # add n-links for spatial coherence\n    structure_x = np.array([[0, 0, 0], [0, 0, 1], [0, 0, 0]])\n    structure_y = np.array([[0, 0, 0], [0, 0, 0], [0, 1, 0]])\n    \n    right = np.roll(im_left, -1, axis=1)\n    below = np.roll(im_left, -1, axis=0)\n    n_right = (im_left[:,:,0] - right[:,:,0])**2 +\\\n              (im_left[:,:,1] - right[:,:,1])**2 +\\\n              (im_left[:,:,2] - right[:,:,2])**2\n    \n    n_below = (im_left[:,:,0] - below[:,:,0])**2 +\\\n              (im_left[:,:,1] - below[:,:,1])**2 +\\\n              (im_left[:,:,2] - below[:,:,2])**2\n    \n    g.add_grid_edges(nodeIds, weights=n_right, structure=structure_x, symmetric=True)\n    g.add_grid_edges(nodeIds, weights=n_below, structure=structure_y, symmetric=True)\n\n    # add n-links for photo consistency\n    structure_z = np.array([[[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 1, 0],\n                             [0, 0, 0]]])\n    \n    # weight is multiplied here\n    g.add_grid_edges(nodeIds, weights=SD*w, structure=structure_z, symmetric=True)\n    \n    # find maximum weight of n-link edges\n    max_right = np.max(n_right)\n    max_below = np.max(n_below)\n    max_depth = np.max(SD)\n    max_edge = np.max([max_right, max_below, max_depth])\n\n    # assign t-links\n    t_source = np.zeros((depth, num_rows, num_cols))\n    t_sink = np.zeros((depth, num_rows, num_cols))\n\n    t_source[0] = np.ones((num_rows, num_cols)) * max_edge * 4\n    t_sink[-1] = np.ones((num_rows, num_cols)) * max_edge * 4\n    g.add_grid_tedges(nodeIds, t_source, t_sink)\n\n    g.maxflow()\n        \n    return g, nodeIds\n```\n\nApply full grid stereo and return the disparity map.\n```python\ndef full_grid_stereo(im_left, SD, d_min, d_max, w):\n    flow_g, nodeIds = graph_cut_3D(im_left, SD, d_min, d_max, w)\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    # traverse each depth of the full grid\n    # and find out where the grid was cut\n    disparity_map = np.zeros((num_rows, num_cols))\n    cur_disparity = ~np.ones((num_rows, num_cols), dtype=bool)\n\n    for d in range(d_min+1, d_max+1):\n        index = d - d_min\n        cur_depth = flow_g.get_grid_segments(nodeIds[index])\n        # compute xor to find any label change\n        cut = cur_disparity ^ cur_depth\n        disparity_map[cut] = d - 1\n        cur_disparity = cur_depth\n        \n    return disparity_map\n```\n\nThe following images show the result of applying full grid stereo.\n![stere graph cut result1](stereo-full-grid-result1.png)\n\nApply full grid approach on other datasets ([Middlebury](https://vision.middlebury.edu/stereo/data/]))\n![stere graph cut test](stereo-test.png)\n\nThe corresponding results show as follows.\n![stere graph cut test result](stereo-test-result.png)","slug":"Computer-Vision-Stereo","published":1,"updated":"2021-01-08T03:05:53.123Z","_id":"ckjnncqhs00055opu0paz5z9t","comments":1,"layout":"post","link":"","content":"<p>Stereo is the extraction of 3D information from digital images by comparing the same objects about a scene captured by different cameras located at two vantage points. The information such as depth of the object can be extracted by examining the disparity changes among two images.</p>\n<a id=\"more\"></a>\n<h2 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h2><p>Use one of the classic datasets from University of Tsukuba. The image, from back to the front, contains a bookshelf (background), a camera, a table, a plaster model and a lamp. Two images were taken from two parallel points, where the left image is referred as the base image (reference) and right image is referred to calculate disparities for each pixel (the pixels that refer to the same object will move leftwards while the camera is moving rightwards).</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-dataset.png\" alt=\"stere dataset\"></p>\n<p>The ground truth image shows the correct object boundaries and their corresponding depth represented by different color scales.</p>\n<h2 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h2><p>It is easily to come up with that the closer objects (smaller depths) will have larger disparities during the movement of the camera compared with the further objects (larger depths).</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-intuition.png\" alt=\"stere disparity map\"></p>\n<p>For the object which is in the same depth (e.g. the table and the cans on it), their pixels are very likely to have the same disparities among the two views. Therefore, if there is any approach which is able to figure out the correct disparity for each pixel, then by assigning the same label (color) to pixels that share the same disparity, the depth of each object can be extracted from the scene.</p>\n<h2 id=\"Window-based-approach\"><a href=\"#Window-based-approach\" class=\"headerlink\" title=\"Window based approach\"></a>Window based approach</h2><p>A single pixel can hardly represent the features of an object. Therefore assign each pixel a rigid window with fixed height and width in the reference image (left image). The intensities within the window represents the weight of the central pixel. In the right image, find a matching window on the same scan line that looks most similar to the reference window. This can be achieved by enumerating disparity within a reasonable range (manually defined) and comparing the sum of squared intensity differences within the windows.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-window-based-intensity.png\" alt=\"stere window based approach\"></p>\n<p>Sum of Squared Difference: <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.062ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 11077.4 1083.9\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-N-2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"mo\" transform=\"translate(1056, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1445, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mo\" transform=\"translate(1949, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(2338, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D465\"/></g><g data-mml-node=\"mo\" transform=\"translate(2910, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(3354.7, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D466\"/></g><g data-mml-node=\"mo\" transform=\"translate(3844.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(4455.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msup\" transform=\"translate(5456.1, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mo\" transform=\"translate(557.2, 363) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-2032\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6257.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(6646.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D465\"/></g><g data-mml-node=\"mo\" transform=\"translate(7441, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"mi\" transform=\"translate(8441.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(8961.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(9405.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D466\"/></g><g data-mml-node=\"mo\" transform=\"translate(9895.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"msup\" transform=\"translate(10284.9, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mn\" transform=\"translate(389, 363) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-32\"/></g></g></g></g></svg></mjx-container><br>For any pixel p compute SSD between two windows for all disparities <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 520 704\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g></g></g></svg></mjx-container>, where <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.868ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 6571.6 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-1-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/><path id=\"MJX-1-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/><path id=\"MJX-1-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/><path id=\"MJX-1-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(797.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mo\" transform=\"translate(1742.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-5B\"/></g><g data-mml-node=\"msub\" transform=\"translate(2020.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"/></g><g data-mml-node=\"mi\" transform=\"translate(878, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(1223, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3879.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"msub\" transform=\"translate(4324.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"/></g><g data-mml-node=\"mi\" transform=\"translate(878, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"/></g><g data-mml-node=\"mi\" transform=\"translate(1407, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D465\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(6293.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-5D\"/></g></g></g></svg></mjx-container>, then obtain an optimal <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.65ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.094ex\" height=\"2.22ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 925.7 981.2\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g></g></g></svg></mjx-container> by optimizing <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.65ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.35ex\" height=\"2.347ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 10320.6 1037.2\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/><path id=\"MJX-1-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/><path id=\"MJX-1-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/><path id=\"MJX-1-TEX-I-1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1203.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"mi\" transform=\"translate(2259.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"/></g><g data-mml-node=\"mi\" transform=\"translate(2788.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"/></g><g data-mml-node=\"mi\" transform=\"translate(3239.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"/></g><g data-mml-node=\"mi\" transform=\"translate(3716.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"/></g><g data-mml-node=\"mi\" transform=\"translate(4594.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"msub\" transform=\"translate(4939.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g><g data-mml-node=\"mi\" transform=\"translate(600, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(5956.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g><g data-mml-node=\"mi\" transform=\"translate(6601.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g><g data-mml-node=\"mi\" transform=\"translate(7246.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D437\"/></g><g data-mml-node=\"mo\" transform=\"translate(8074.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(8463.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(8966.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(9411.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(9931.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container>.</p>\n<p>This approach can be optimized using dynamic programming which calculate the current summation of intensities and subtract the uncovered region to obtain the sum of intensities within the current window size.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-image-integral.png\" alt=\"stere image integral\"></p>\n<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"38.624ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 17071.8 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/><path id=\"MJX-1-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D44A\"/></g><g data-mml-node=\"mo\" transform=\"translate(1325.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"msub\" transform=\"translate(2381.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3589.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(3978.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44F\"/></g><g data-mml-node=\"mi\" transform=\"translate(4407.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"/></g><g data-mml-node=\"mo\" transform=\"translate(4858.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(5470, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(6470.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7678.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(8067.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44F\"/></g><g data-mml-node=\"mi\" transform=\"translate(8496.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"/></g><g data-mml-node=\"mo\" transform=\"translate(8794.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(9405.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(10405.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11614.1, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(12003.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"/></g><g data-mml-node=\"mi\" transform=\"translate(12364.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"/></g><g data-mml-node=\"mo\" transform=\"translate(12815.1, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(13426.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"msub\" transform=\"translate(14426.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(15634.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(16023.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"/></g><g data-mml-node=\"mi\" transform=\"translate(16384.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"/></g><g data-mml-node=\"mo\" transform=\"translate(16682.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container>\n<p>The algorithm has runtime of <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.94ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 3509.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"/></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mo\" transform=\"translate(1878.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"/></g><g data-mml-node=\"mi\" transform=\"translate(2600.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(3120.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container>, where <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.14ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 504 683\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g></g></g></svg></mjx-container> is the number of intensities and <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 520 704\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g></g></g></svg></mjx-container> is the enumerated disparities.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-SSD.png\" alt=\"stere SSD\"></p>\n<p>The above images show the intensity difference choosing different range of disparities. The shadowed regions represent the pixels that look similar (less intensity difference). A small disparity can easily recognized the further objects in the scene (e.g. the bookshelf) and a large disparity helps to extract closer objects (e.g. the lamp).</p>\n<p>Set disparity range.</p>\n<pre><code class=\"python\">d_min = 2\nd_max = 15\n</code></pre>\n<p>Calculate squared differences for different shifts.</p>\n<pre><code class=\"python\">def SD_array(imageL, imageR, d_minimum, d_maximum):\n    SD = np.zeros((1+d_maximum-d_minimum, np.shape(imageL)[0], np.shape(imageL)[1]))\n    for d in range(d_minimum, d_maximum+1):\n        rshift = np.roll(imageR, d, axis=1)\n        SD[d-d_minimum,:,:] = (imageL[:,:,0] - rshift[:,:,0])**2 +\\\n                              (imageL[:,:,1] - rshift[:,:,1])**2 +\\\n                              (imageL[:,:,2] - rshift[:,:,2])**2  \n    return SD\n\nSD = SD_array(im_left, im_right, d_min, d_max)\n</code></pre>\n<p>Map summation of squared differences to disparity map (image)</p>\n<pre><code class=\"python\">def SSDtoDmap(SSD_array, d_minimum, d_maximum):    \n    dMap = np.full(np.shape(SD[0]), d_minimum)\n    inf_mask = np.full(np.shape(SD[0]), False)\n    mMap = np.amin(SSD_array, axis=0)\n    for i in range(d_maximum-d_minimum+1):\n        dMap = np.where(SSD_array[i]==mMap, i, dMap)\n        inf_mask = inf_mask | (SSD_array[i] == INFTY)\n    dMap[inf_mask] = 0\n    return dMap\n</code></pre>\n<p>summation in a certain window size.</p>\n<pre><code class=\"python\">INFTY = np.inf\n\ndef windSum(img, window_width):\n    win_img = np.zeros(img.shape)\n    # shift bottom/right value\n    bshift = window_width//2\n    # shift top/left value\n    tshift = (window_width+1)//2\n    simg = integral_image(img)\n    br = np.roll(np.roll(simg, -bshift, axis=1), -bshift, axis=0)\n    tl = np.roll(np.roll(simg, tshift, axis=1), tshift, axis=0)\n    bl = np.roll(np.roll(simg, tshift, axis=1), -bshift, axis=0)\n    tr = np.roll(np.roll(simg, -bshift, axis=1), tshift, axis=0)\n    win_img = br - bl - tr + tl\n    # bottom right margin value\n    bmargin = window_width//2\n    # top left margin value\n    tmargin = window_width//2 if window_width%2 == 1 else (window_width-1)//2\n    # top margin\n    win_img[:tmargin+1,:] = np.inf\n    # left margin\n    win_img[:,:tmargin+1] = np.inf\n    # bottom margin\n    win_img[img.shape[0]-bmargin:,:] = np.inf\n    # right margin\n    win_img[:,img.shape[1]-bmargin:] = np.inf\n    return np.abs(win_img)\n</code></pre>\n<p>Find the optimal disparity.</p>\n<pre><code class=\"python\">def Dmap_Windows(imageL, imageR, d_minimum, d_maximum, window_width):\n    SD = SD_array(imageL, imageR, d_minimum, d_maximum)\n    SSD = np.zeros(np.shape(SD))\n    for Delta in range(1+d_maximum-d_minimum):\n        SSD[Delta] = windSum(SD[Delta], window_width)\n    return SSDtoDmap(SSD, d_minimum, d_maximum)\n</code></pre>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-window-based-result.png\" alt=\"stere window based result\"></p>\n<p>The chosen size of the window also has effect to the result as larger window size will blur the result disparity map and smaller window size will generate more noise.</p>\n<h2 id=\"Scan-line-approach\"><a href=\"#Scan-line-approach\" class=\"headerlink\" title=\"Scan-line approach\"></a>Scan-line approach</h2><p>The scan-line approach seeks the shortest paths for pixels in the same scan line. An <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.852ex\" height=\"1.077ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -465 2144.4 476\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g><g data-mml-node=\"mo\" transform=\"translate(822.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"/></g><g data-mml-node=\"mi\" transform=\"translate(1544.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g></svg></mjx-container> grid graph can be built using each scan line (n is the number of pixels located in the scan line). Horizontal and vertical edges on this graph describe occlusions, as well as disparity jumps (discontinuities). The diagonal lines on the graph represents disparity levels (shifts) that can be seen as depth layers.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-graph.png\" alt=\"stere scan line graph\"></p>\n<p>The loss function for a single pixel in the scan line can be expressed as the combination of the cost of photo consistency and the cost of the spatial coherence<br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.799ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32.862ex\" height=\"2.496ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 14525 1103.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-N-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D438\"/></g><g data-mml-node=\"mo\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(1656, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(2322.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3378.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(3656.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mi\" transform=\"translate(440, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4724.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(5724.7, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(440, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"msub\" transform=\"translate(1281, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(7775, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8275.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mi\" transform=\"translate(9275.5, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D464\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(9991.5, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(10269.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(11417.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(12417.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mn\" transform=\"translate(1281, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14247, 0)\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g></g></svg></mjx-container><br>where the photo consistency represents the intensity change and spatial coherence penalize the disparity jump. The overall loss can be expressed as<br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.956ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"79.2ex\" height=\"2.653ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 35006.3 1172.5\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-1-TEX-I-1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/><path id=\"MJX-1-TEX-I-1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/><path id=\"MJX-1-TEX-I-1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path id=\"MJX-1-TEX-N-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D438\"/></g><g data-mml-node=\"mo\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(1673, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(2339.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"munder\" transform=\"translate(3395.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"msub\" transform=\"translate(5951.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D437\"/></g><g data-mml-node=\"mi\" transform=\"translate(828, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7185.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(7574.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8500, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(9111.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"munder\" transform=\"translate(10111.4, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(12667.5, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D449\"/></g><g data-mml-node=\"mo\" transform=\"translate(13436.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(13825.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(14751.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"msub\" transform=\"translate(15195.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mn\" transform=\"translate(1281, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(17025.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(17692, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"munder\" transform=\"translate(18747.7, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(21303.8, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(21581.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mi\" transform=\"translate(440, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(22649.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(23649.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(440, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"msub\" transform=\"translate(1281, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(25700.3, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(26200.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"munder\" transform=\"translate(27200.7, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(29756.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D464\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(30472.8, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(30750.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(31898.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(32898.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mn\" transform=\"translate(1281, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(34728.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g></g></svg></mjx-container><br>The loss can be optimized using Viterbi algorithm since the graph does not contains any loop.</p>\n<p>Implementation of Viterbi Algorithm.</p>\n<pre><code class=\"python\">def traverse_disparity(SD, row, d_min, d_max, w, normalization=&#39;standard&#39;, threshold=0, sigma=0):\n    K = d_max - d_min + 1\n    T = SD.shape[2]\n    T1 = np.empty((K, T))\n    T2 = np.empty((K, T))\n\n    # KxK matrix\n    index = np.array([np.arange(1, K+1)]*K).T\n    # record E_bar[i]\n    T1[:, 0] = 0\n    # record i-1\n    T2[:, 0] = np.arange(1, K+1).T\n\n    # forward pass\n    for i in range(1, T):\n        if normalization == &#39;standard&#39;:\n            normal = w * np.abs(index - [T2[:, i-1]]*K)\n        elif normalization == &quot;quadratic&quot;:\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n        elif normalization == &quot;robust&quot;:\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n            normal[normal &gt; threshold] = threshold\n        elif normal == &quot;gaussian&quot;:\n            p = -np.square(SD[1, row, i]) / (2 * sigma**2)\n            wp = w * np.exp(p)\n            normal = wp * np.abs(index - [T2[:, i-1]]*K)\n        m = np.array([SD[:, row, i]]*K).T + normal\n        T1[:, i] = np.min(m, axis=0)\n        T2[:, i] = np.argmin(m, axis=0)\n\n    x = np.empty(T)\n    x[-1] = np.argmin(T1[:, T-1]) + d_min\n\n    # backward pass\n    for i in reversed(range(1, T)):\n        x[i - 1] = T2[int(x[i] - d_min), i] + d_min\n    return x\n</code></pre>\n<p>Compute scan line disparity map.</p>\n<pre><code class=\"python\">_, R, C = SD.shape\nR = SD.shape[1]\nd_scan = np.zeros((R, C))\n\nfor row in range(R):\n    d_scan[row,:] = traverse_disparity(SD, row, d_min, d_max, 0.7, normalization=&#39;standard&#39;)\n\n</code></pre>\n<p>The following images show the result applying scan line approach.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-result1.png\" alt=\"stere scan line result1\"></p>\n<p>A better result can be obtained by replacing the original images with the computed SSD maps so that each pixel will also contains information of adjacent pixels within the same window. This helps to reduce the noise.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-result2.png\" alt=\"stere scan line result2\"></p>\n<h2 id=\"Full-Grid-approach\"><a href=\"#Full-Grid-approach\" class=\"headerlink\" title=\"Full Grid approach\"></a>Full Grid approach</h2><p>Full grid stereo is a more advanced approach using fully connected graph. In scan line stereo, the loss function is computed only using the pixels within the same scan line. To consider the contiguous among scan lines, vertical edges are added.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-full-grid-graph.png\" alt=\"stere full grid graph\"></p>\n<p>Now, the loss function of a single pixel is not only decided by pixels on horizon, but also related to upper and lower pixels. Viterbi algorithm (DP) can be no longer applied since the graph apparently contains loops. Instead, apply graph cut to optimize the loss function. The weights of neighborhood edges on a single layer of the graph represents the spatial coherence (disparity jump). Multiple layers are required to represent the photo consistency (intensity change). The cost function becomes<br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.956ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"39.08ex\" height=\"2.653ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 17273.5 1172.5\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-1-TEX-I-1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/><path id=\"MJX-1-TEX-I-1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-I-1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"/><path id=\"MJX-1-TEX-I-1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D438\"/></g><g data-mml-node=\"mo\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(1673, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(2339.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"munder\" transform=\"translate(3395.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D43A\"/></g></g></g><g data-mml-node=\"msub\" transform=\"translate(6051.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D437\"/></g><g data-mml-node=\"mi\" transform=\"translate(828, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7285, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(7674, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8599.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(9210.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"munder\" transform=\"translate(10211.1, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(781, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45E\"/></g><g data-mml-node=\"mo\" transform=\"translate(1241, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1908, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D441\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(13460.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D449\"/></g><g data-mml-node=\"mo\" transform=\"translate(14229.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(14618.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(15544.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"msub\" transform=\"translate(15989.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45E\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(16884.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container></p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-graph-cut.png\" alt=\"stere graph cut\"></p>\n<p>The orthogonal edge represents the cost of photo consistency of the current pixel refers to a specific disparity change to the refer image. For example, the edge at the bottom layer represents the intensity difference between the current pixel and the pixel at the minimal disparity; the edge at the top layer represents the intensity difference between the current pixel and the pixel at the maximum disparity. After defining the 3D graph and applying max-flow, the cut occurred at the orthogonal edges is the result disparity for each pixel.</p>\n<p>Build full gird and apply graph cut. Use a python wrapper library <a href=\"http://pmneila.github.io/PyMaxflow/maxflow.html\">maxflow</a>.</p>\n<pre><code class=\"python\">import maxflow\n\ndef graph_cut_3D(im_left, SD, d_min, d_max, w):\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    g = maxflow.GraphFloat()\n    depth = d_max - d_min + 1\n\n    # depth x height x width\n    nodeIds = g.add_grid_nodes((depth, num_rows, num_cols))\n    structure = np.array([[[0, 0, 0],\n                           [0, 0, 0],\n                           [0, 0, 0]],\n                          [[0, 0, 0],\n                           [0, 0, 1],\n                           [0, 1, 0]],\n                          [[0, 0, 0],\n                           [0, 1, 0],\n                           [0, 0, 0]]])\n    g.add_grid_edges(nodeIds, structure=structure, symmetric=True)\n\n    # add n-links for spatial coherence\n    structure_x = np.array([[0, 0, 0], [0, 0, 1], [0, 0, 0]])\n    structure_y = np.array([[0, 0, 0], [0, 0, 0], [0, 1, 0]])\n\n    right = np.roll(im_left, -1, axis=1)\n    below = np.roll(im_left, -1, axis=0)\n    n_right = (im_left[:,:,0] - right[:,:,0])**2 +\\\n              (im_left[:,:,1] - right[:,:,1])**2 +\\\n              (im_left[:,:,2] - right[:,:,2])**2\n\n    n_below = (im_left[:,:,0] - below[:,:,0])**2 +\\\n              (im_left[:,:,1] - below[:,:,1])**2 +\\\n              (im_left[:,:,2] - below[:,:,2])**2\n\n    g.add_grid_edges(nodeIds, weights=n_right, structure=structure_x, symmetric=True)\n    g.add_grid_edges(nodeIds, weights=n_below, structure=structure_y, symmetric=True)\n\n    # add n-links for photo consistency\n    structure_z = np.array([[[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 1, 0],\n                             [0, 0, 0]]])\n\n    # weight is multiplied here\n    g.add_grid_edges(nodeIds, weights=SD*w, structure=structure_z, symmetric=True)\n\n    # find maximum weight of n-link edges\n    max_right = np.max(n_right)\n    max_below = np.max(n_below)\n    max_depth = np.max(SD)\n    max_edge = np.max([max_right, max_below, max_depth])\n\n    # assign t-links\n    t_source = np.zeros((depth, num_rows, num_cols))\n    t_sink = np.zeros((depth, num_rows, num_cols))\n\n    t_source[0] = np.ones((num_rows, num_cols)) * max_edge * 4\n    t_sink[-1] = np.ones((num_rows, num_cols)) * max_edge * 4\n    g.add_grid_tedges(nodeIds, t_source, t_sink)\n\n    g.maxflow()\n\n    return g, nodeIds\n</code></pre>\n<p>Apply full grid stereo and return the disparity map.</p>\n<pre><code class=\"python\">def full_grid_stereo(im_left, SD, d_min, d_max, w):\n    flow_g, nodeIds = graph_cut_3D(im_left, SD, d_min, d_max, w)\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    # traverse each depth of the full grid\n    # and find out where the grid was cut\n    disparity_map = np.zeros((num_rows, num_cols))\n    cur_disparity = ~np.ones((num_rows, num_cols), dtype=bool)\n\n    for d in range(d_min+1, d_max+1):\n        index = d - d_min\n        cur_depth = flow_g.get_grid_segments(nodeIds[index])\n        # compute xor to find any label change\n        cut = cur_disparity ^ cur_depth\n        disparity_map[cut] = d - 1\n        cur_disparity = cur_depth\n\n    return disparity_map\n</code></pre>\n<p>The following images show the result of applying full grid stereo.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-full-grid-result1.png\" alt=\"stere graph cut result1\"></p>\n<p>Apply full grid approach on other datasets (<a href=\"https://vision.middlebury.edu/stereo/data/]\">Middlebury</a>)<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-test.png\" alt=\"stere graph cut test\"></p>\n<p>The corresponding results show as follows.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-test-result.png\" alt=\"stere graph cut test result\"></p>\n","site":{"data":{}},"excerpt":"<p>Stereo is the extraction of 3D information from digital images by comparing the same objects about a scene captured by different cameras located at two vantage points. The information such as depth of the object can be extracted by examining the disparity changes among two images.</p>","more":"<h2 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h2><p>Use one of the classic datasets from University of Tsukuba. The image, from back to the front, contains a bookshelf (background), a camera, a table, a plaster model and a lamp. Two images were taken from two parallel points, where the left image is referred as the base image (reference) and right image is referred to calculate disparities for each pixel (the pixels that refer to the same object will move leftwards while the camera is moving rightwards).</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-dataset.png\" alt=\"stere dataset\"></p>\n<p>The ground truth image shows the correct object boundaries and their corresponding depth represented by different color scales.</p>\n<h2 id=\"Intuition\"><a href=\"#Intuition\" class=\"headerlink\" title=\"Intuition\"></a>Intuition</h2><p>It is easily to come up with that the closer objects (smaller depths) will have larger disparities during the movement of the camera compared with the further objects (larger depths).</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-intuition.png\" alt=\"stere disparity map\"></p>\n<p>For the object which is in the same depth (e.g. the table and the cans on it), their pixels are very likely to have the same disparities among the two views. Therefore, if there is any approach which is able to figure out the correct disparity for each pixel, then by assigning the same label (color) to pixels that share the same disparity, the depth of each object can be extracted from the scene.</p>\n<h2 id=\"Window-based-approach\"><a href=\"#Window-based-approach\" class=\"headerlink\" title=\"Window based approach\"></a>Window based approach</h2><p>A single pixel can hardly represent the features of an object. Therefore assign each pixel a rigid window with fixed height and width in the reference image (left image). The intensities within the window represents the weight of the central pixel. In the right image, find a matching window on the same scan line that looks most similar to the reference window. This can be achieved by enumerating disparity within a reasonable range (manually defined) and comparing the sum of squared intensity differences within the windows.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-window-based-intensity.png\" alt=\"stere window based approach\"></p>\n<p>Sum of Squared Difference: <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.062ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 11077.4 1083.9\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-I-1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-N-2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"mo\" transform=\"translate(1056, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1445, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mo\" transform=\"translate(1949, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(2338, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D465\"/></g><g data-mml-node=\"mo\" transform=\"translate(2910, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(3354.7, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D466\"/></g><g data-mml-node=\"mo\" transform=\"translate(3844.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(4455.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msup\" transform=\"translate(5456.1, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mo\" transform=\"translate(557.2, 363) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-2032\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6257.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(6646.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D465\"/></g><g data-mml-node=\"mo\" transform=\"translate(7441, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"mi\" transform=\"translate(8441.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(8961.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(9405.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D466\"/></g><g data-mml-node=\"mo\" transform=\"translate(9895.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"msup\" transform=\"translate(10284.9, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mn\" transform=\"translate(389, 363) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-N-32\"/></g></g></g></g></svg></mjx-container><br>For any pixel p compute SSD between two windows for all disparities <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 520 704\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g></g></g></svg></mjx-container>, where <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.868ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 6571.6 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-1-TEX-N-5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/><path id=\"MJX-1-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/><path id=\"MJX-1-TEX-I-1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/><path id=\"MJX-1-TEX-N-5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(797.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mo\" transform=\"translate(1742.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-5B\"/></g><g data-mml-node=\"msub\" transform=\"translate(2020.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"/></g><g data-mml-node=\"mi\" transform=\"translate(878, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(1223, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3879.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"msub\" transform=\"translate(4324.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"/></g><g data-mml-node=\"mi\" transform=\"translate(878, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"/></g><g data-mml-node=\"mi\" transform=\"translate(1407, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D465\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(6293.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-5D\"/></g></g></g></svg></mjx-container>, then obtain an optimal <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.65ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.094ex\" height=\"2.22ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 925.7 981.2\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g></g></g></svg></mjx-container> by optimizing <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.65ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.35ex\" height=\"2.347ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 10320.6 1037.2\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-I-1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/><path id=\"MJX-1-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/><path id=\"MJX-1-TEX-I-1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/><path id=\"MJX-1-TEX-I-1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1203.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"mi\" transform=\"translate(2259.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44E\"/></g><g data-mml-node=\"mi\" transform=\"translate(2788.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"/></g><g data-mml-node=\"mi\" transform=\"translate(3239.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D454\"/></g><g data-mml-node=\"mi\" transform=\"translate(3716.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45A\"/></g><g data-mml-node=\"mi\" transform=\"translate(4594.2, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"msub\" transform=\"translate(4939.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g><g data-mml-node=\"mi\" transform=\"translate(600, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(5956.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g><g data-mml-node=\"mi\" transform=\"translate(6601.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g><g data-mml-node=\"mi\" transform=\"translate(7246.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D437\"/></g><g data-mml-node=\"mo\" transform=\"translate(8074.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(8463.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(8966.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(9411.6, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(9931.6, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container>.</p>\n<p>This approach can be optimized using dynamic programming which calculate the current summation of intensities and subtract the uncovered region to obtain the sum of intensities within the current window size.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-image-integral.png\" alt=\"stere image integral\"></p>\n<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"38.624ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 17071.8 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-I-1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/><path id=\"MJX-1-TEX-I-1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/><path id=\"MJX-1-TEX-I-1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-I-1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/><path id=\"MJX-1-TEX-I-1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D44A\"/></g><g data-mml-node=\"mo\" transform=\"translate(1325.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"msub\" transform=\"translate(2381.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3589.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(3978.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44F\"/></g><g data-mml-node=\"mi\" transform=\"translate(4407.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"/></g><g data-mml-node=\"mo\" transform=\"translate(4858.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(5470, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(6470.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7678.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(8067.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D44F\"/></g><g data-mml-node=\"mi\" transform=\"translate(8496.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"/></g><g data-mml-node=\"mo\" transform=\"translate(8794.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(9405.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(10405.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11614.1, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(12003.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"/></g><g data-mml-node=\"mi\" transform=\"translate(12364.1, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45F\"/></g><g data-mml-node=\"mo\" transform=\"translate(12815.1, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(13426.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"msub\" transform=\"translate(14426.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D453\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(490, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D456\"/></g><g data-mml-node=\"mi\" transform=\"translate(345, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(15634.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(16023.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D461\"/></g><g data-mml-node=\"mi\" transform=\"translate(16384.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D459\"/></g><g data-mml-node=\"mo\" transform=\"translate(16682.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container>\n<p>The algorithm has runtime of <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.94ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 3509.4 1000\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D442\"/></g><g data-mml-node=\"mo\" transform=\"translate(763, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1152, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mo\" transform=\"translate(1878.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"/></g><g data-mml-node=\"mi\" transform=\"translate(2600.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(3120.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container>, where <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.14ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 504 683\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g></g></g></svg></mjx-container> is the number of intensities and <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 520 704\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g></g></g></svg></mjx-container> is the enumerated disparities.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-SSD.png\" alt=\"stere SSD\"></p>\n<p>The above images show the intensity difference choosing different range of disparities. The shadowed regions represent the pixels that look similar (less intensity difference). A small disparity can easily recognized the further objects in the scene (e.g. the bookshelf) and a large disparity helps to extract closer objects (e.g. the lamp).</p>\n<p>Set disparity range.</p>\n<pre><code class=\"python\">d_min = 2\nd_max = 15\n</code></pre>\n<p>Calculate squared differences for different shifts.</p>\n<pre><code class=\"python\">def SD_array(imageL, imageR, d_minimum, d_maximum):\n    SD = np.zeros((1+d_maximum-d_minimum, np.shape(imageL)[0], np.shape(imageL)[1]))\n    for d in range(d_minimum, d_maximum+1):\n        rshift = np.roll(imageR, d, axis=1)\n        SD[d-d_minimum,:,:] = (imageL[:,:,0] - rshift[:,:,0])**2 +\\\n                              (imageL[:,:,1] - rshift[:,:,1])**2 +\\\n                              (imageL[:,:,2] - rshift[:,:,2])**2  \n    return SD\n\nSD = SD_array(im_left, im_right, d_min, d_max)\n</code></pre>\n<p>Map summation of squared differences to disparity map (image)</p>\n<pre><code class=\"python\">def SSDtoDmap(SSD_array, d_minimum, d_maximum):    \n    dMap = np.full(np.shape(SD[0]), d_minimum)\n    inf_mask = np.full(np.shape(SD[0]), False)\n    mMap = np.amin(SSD_array, axis=0)\n    for i in range(d_maximum-d_minimum+1):\n        dMap = np.where(SSD_array[i]==mMap, i, dMap)\n        inf_mask = inf_mask | (SSD_array[i] == INFTY)\n    dMap[inf_mask] = 0\n    return dMap\n</code></pre>\n<p>summation in a certain window size.</p>\n<pre><code class=\"python\">INFTY = np.inf\n\ndef windSum(img, window_width):\n    win_img = np.zeros(img.shape)\n    # shift bottom/right value\n    bshift = window_width//2\n    # shift top/left value\n    tshift = (window_width+1)//2\n    simg = integral_image(img)\n    br = np.roll(np.roll(simg, -bshift, axis=1), -bshift, axis=0)\n    tl = np.roll(np.roll(simg, tshift, axis=1), tshift, axis=0)\n    bl = np.roll(np.roll(simg, tshift, axis=1), -bshift, axis=0)\n    tr = np.roll(np.roll(simg, -bshift, axis=1), tshift, axis=0)\n    win_img = br - bl - tr + tl\n    # bottom right margin value\n    bmargin = window_width//2\n    # top left margin value\n    tmargin = window_width//2 if window_width%2 == 1 else (window_width-1)//2\n    # top margin\n    win_img[:tmargin+1,:] = np.inf\n    # left margin\n    win_img[:,:tmargin+1] = np.inf\n    # bottom margin\n    win_img[img.shape[0]-bmargin:,:] = np.inf\n    # right margin\n    win_img[:,img.shape[1]-bmargin:] = np.inf\n    return np.abs(win_img)\n</code></pre>\n<p>Find the optimal disparity.</p>\n<pre><code class=\"python\">def Dmap_Windows(imageL, imageR, d_minimum, d_maximum, window_width):\n    SD = SD_array(imageL, imageR, d_minimum, d_maximum)\n    SSD = np.zeros(np.shape(SD))\n    for Delta in range(1+d_maximum-d_minimum):\n        SSD[Delta] = windSum(SD[Delta], window_width)\n    return SSDtoDmap(SSD, d_minimum, d_maximum)\n</code></pre>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-window-based-result.png\" alt=\"stere window based result\"></p>\n<p>The chosen size of the window also has effect to the result as larger window size will blur the result disparity map and smaller window size will generate more noise.</p>\n<h2 id=\"Scan-line-approach\"><a href=\"#Scan-line-approach\" class=\"headerlink\" title=\"Scan-line approach\"></a>Scan-line approach</h2><p>The scan-line approach seeks the shortest paths for pixels in the same scan line. An <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.852ex\" height=\"1.077ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -465 2144.4 476\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/><path id=\"MJX-1-TEX-N-2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g><g data-mml-node=\"mo\" transform=\"translate(822.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2217\"/></g><g data-mml-node=\"mi\" transform=\"translate(1544.4, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45B\"/></g></g></g></svg></mjx-container> grid graph can be built using each scan line (n is the number of pixels located in the scan line). Horizontal and vertical edges on this graph describe occlusions, as well as disparity jumps (discontinuities). The diagonal lines on the graph represents disparity levels (shifts) that can be seen as depth layers.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-graph.png\" alt=\"stere scan line graph\"></p>\n<p>The loss function for a single pixel in the scan line can be expressed as the combination of the cost of photo consistency and the cost of the spatial coherence<br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.799ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32.862ex\" height=\"2.496ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 14525 1103.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-N-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D438\"/></g><g data-mml-node=\"mo\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(1656, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(2322.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3378.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(3656.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mi\" transform=\"translate(440, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4724.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(5724.7, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(440, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"msub\" transform=\"translate(1281, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(7775, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8275.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mi\" transform=\"translate(9275.5, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D464\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(9991.5, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(10269.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(11417.4, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(12417.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mn\" transform=\"translate(1281, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(14247, 0)\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g></g></svg></mjx-container><br>where the photo consistency represents the intensity change and spatial coherence penalize the disparity jump. The overall loss can be expressed as<br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.956ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"79.2ex\" height=\"2.653ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 35006.3 1172.5\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-1-TEX-I-1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"/><path id=\"MJX-1-TEX-I-1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/><path id=\"MJX-1-TEX-I-1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-N-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path id=\"MJX-1-TEX-N-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/><path id=\"MJX-1-TEX-I-1D43C\" d=\"M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z\"/><path id=\"MJX-1-TEX-N-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/><path id=\"MJX-1-TEX-I-1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D438\"/></g><g data-mml-node=\"mo\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(1673, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(2339.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"munder\" transform=\"translate(3395.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"msub\" transform=\"translate(5951.6, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D437\"/></g><g data-mml-node=\"mi\" transform=\"translate(828, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7185.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(7574.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8500, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(9111.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"munder\" transform=\"translate(10111.4, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(12667.5, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D449\"/></g><g data-mml-node=\"mo\" transform=\"translate(13436.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(13825.5, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(14751.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"msub\" transform=\"translate(15195.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mn\" transform=\"translate(1281, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(17025.2, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(17692, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"munder\" transform=\"translate(18747.7, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(21303.8, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(21581.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"mi\" transform=\"translate(440, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(22649.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(23649.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D43C\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(440, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"msub\" transform=\"translate(1281, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g></g></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(25700.3, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(26200.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"munder\" transform=\"translate(27200.7, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D446\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(29756.8, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D464\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(30472.8, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(30750.8, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(31898.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2212\"/></g><g data-mml-node=\"msub\" transform=\"translate(32898.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(520, -150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"mn\" transform=\"translate(1281, 0)\"><use xlink:href=\"#MJX-1-TEX-N-31\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(34728.3, 0)\"><use xlink:href=\"#MJX-1-TEX-N-7C\"/></g></g></g></svg></mjx-container><br>The loss can be optimized using Viterbi algorithm since the graph does not contains any loop.</p>\n<p>Implementation of Viterbi Algorithm.</p>\n<pre><code class=\"python\">def traverse_disparity(SD, row, d_min, d_max, w, normalization=&#39;standard&#39;, threshold=0, sigma=0):\n    K = d_max - d_min + 1\n    T = SD.shape[2]\n    T1 = np.empty((K, T))\n    T2 = np.empty((K, T))\n\n    # KxK matrix\n    index = np.array([np.arange(1, K+1)]*K).T\n    # record E_bar[i]\n    T1[:, 0] = 0\n    # record i-1\n    T2[:, 0] = np.arange(1, K+1).T\n\n    # forward pass\n    for i in range(1, T):\n        if normalization == &#39;standard&#39;:\n            normal = w * np.abs(index - [T2[:, i-1]]*K)\n        elif normalization == &quot;quadratic&quot;:\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n        elif normalization == &quot;robust&quot;:\n            normal = w * np.square(index - [T2[:, i-1]]*K)\n            normal[normal &gt; threshold] = threshold\n        elif normal == &quot;gaussian&quot;:\n            p = -np.square(SD[1, row, i]) / (2 * sigma**2)\n            wp = w * np.exp(p)\n            normal = wp * np.abs(index - [T2[:, i-1]]*K)\n        m = np.array([SD[:, row, i]]*K).T + normal\n        T1[:, i] = np.min(m, axis=0)\n        T2[:, i] = np.argmin(m, axis=0)\n\n    x = np.empty(T)\n    x[-1] = np.argmin(T1[:, T-1]) + d_min\n\n    # backward pass\n    for i in reversed(range(1, T)):\n        x[i - 1] = T2[int(x[i] - d_min), i] + d_min\n    return x\n</code></pre>\n<p>Compute scan line disparity map.</p>\n<pre><code class=\"python\">_, R, C = SD.shape\nR = SD.shape[1]\nd_scan = np.zeros((R, C))\n\nfor row in range(R):\n    d_scan[row,:] = traverse_disparity(SD, row, d_min, d_max, 0.7, normalization=&#39;standard&#39;)\n\n</code></pre>\n<p>The following images show the result applying scan line approach.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-result1.png\" alt=\"stere scan line result1\"></p>\n<p>A better result can be obtained by replacing the original images with the computed SSD maps so that each pixel will also contains information of adjacent pixels within the same window. This helps to reduce the noise.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-scan-line-result2.png\" alt=\"stere scan line result2\"></p>\n<h2 id=\"Full-Grid-approach\"><a href=\"#Full-Grid-approach\" class=\"headerlink\" title=\"Full Grid approach\"></a>Full Grid approach</h2><p>Full grid stereo is a more advanced approach using fully connected graph. In scan line stereo, the loss function is computed only using the pixels within the same scan line. To consider the contiguous among scan lines, vertical edges are added.</p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-full-grid-graph.png\" alt=\"stere full grid graph\"></p>\n<p>Now, the loss function of a single pixel is not only decided by pixels on horizon, but also related to upper and lower pixels. Viterbi algorithm (DP) can be no longer applied since the graph apparently contains loops. Instead, apply graph cut to optimize the loss function. The weights of neighborhood edges on a single layer of the graph represents the spatial coherence (disparity jump). Multiple layers are required to represent the photo consistency (intensity change). The cost function becomes<br><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.956ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"39.08ex\" height=\"2.653ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 17273.5 1172.5\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><defs><path id=\"MJX-1-TEX-I-1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/><path id=\"MJX-1-TEX-N-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/><path id=\"MJX-1-TEX-I-1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-N-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/><path id=\"MJX-1-TEX-N-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/><path id=\"MJX-1-TEX-SO-2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/><path id=\"MJX-1-TEX-I-1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/><path id=\"MJX-1-TEX-N-2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/><path id=\"MJX-1-TEX-I-1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/><path id=\"MJX-1-TEX-I-1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/><path id=\"MJX-1-TEX-N-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/><path id=\"MJX-1-TEX-N-2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/><path id=\"MJX-1-TEX-I-1D45E\" d=\"M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/><path id=\"MJX-1-TEX-I-1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"/><path id=\"MJX-1-TEX-I-1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"/></defs><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D438\"/></g><g data-mml-node=\"mo\" transform=\"translate(764, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mo\" transform=\"translate(1673, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(2339.8, 0)\"><use xlink:href=\"#MJX-1-TEX-N-3D\"/></g><g data-mml-node=\"munder\" transform=\"translate(3395.6, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1170, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D43A\"/></g></g></g><g data-mml-node=\"msub\" transform=\"translate(6051.3, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D437\"/></g><g data-mml-node=\"mi\" transform=\"translate(828, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7285, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(7674, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8599.7, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g><g data-mml-node=\"mo\" transform=\"translate(9210.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2B\"/></g><g data-mml-node=\"munder\" transform=\"translate(10211.1, 0)\"><g data-mml-node=\"mo\"><use xlink:href=\"#MJX-1-TEX-SO-2211\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1056, -285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g><g data-mml-node=\"mo\" transform=\"translate(503, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"mi\" transform=\"translate(781, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D45E\"/></g><g data-mml-node=\"mo\" transform=\"translate(1241, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2208\"/></g><g data-mml-node=\"mi\" transform=\"translate(1908, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D441\"/></g></g></g><g data-mml-node=\"mi\" transform=\"translate(13460.9, 0)\"><use xlink:href=\"#MJX-1-TEX-I-1D449\"/></g><g data-mml-node=\"mo\" transform=\"translate(14229.9, 0)\"><use xlink:href=\"#MJX-1-TEX-N-28\"/></g><g data-mml-node=\"msub\" transform=\"translate(14618.9, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45D\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(15544.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-2C\"/></g><g data-mml-node=\"msub\" transform=\"translate(15989.2, 0)\"><g data-mml-node=\"mi\"><use xlink:href=\"#MJX-1-TEX-I-1D451\"/></g><g data-mml-node=\"mi\" transform=\"translate(520, -150) scale(0.707)\"><use xlink:href=\"#MJX-1-TEX-I-1D45E\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(16884.5, 0)\"><use xlink:href=\"#MJX-1-TEX-N-29\"/></g></g></g></svg></mjx-container></p>\n<p><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-graph-cut.png\" alt=\"stere graph cut\"></p>\n<p>The orthogonal edge represents the cost of photo consistency of the current pixel refers to a specific disparity change to the refer image. For example, the edge at the bottom layer represents the intensity difference between the current pixel and the pixel at the minimal disparity; the edge at the top layer represents the intensity difference between the current pixel and the pixel at the maximum disparity. After defining the 3D graph and applying max-flow, the cut occurred at the orthogonal edges is the result disparity for each pixel.</p>\n<p>Build full gird and apply graph cut. Use a python wrapper library <a href=\"http://pmneila.github.io/PyMaxflow/maxflow.html\">maxflow</a>.</p>\n<pre><code class=\"python\">import maxflow\n\ndef graph_cut_3D(im_left, SD, d_min, d_max, w):\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    g = maxflow.GraphFloat()\n    depth = d_max - d_min + 1\n\n    # depth x height x width\n    nodeIds = g.add_grid_nodes((depth, num_rows, num_cols))\n    structure = np.array([[[0, 0, 0],\n                           [0, 0, 0],\n                           [0, 0, 0]],\n                          [[0, 0, 0],\n                           [0, 0, 1],\n                           [0, 1, 0]],\n                          [[0, 0, 0],\n                           [0, 1, 0],\n                           [0, 0, 0]]])\n    g.add_grid_edges(nodeIds, structure=structure, symmetric=True)\n\n    # add n-links for spatial coherence\n    structure_x = np.array([[0, 0, 0], [0, 0, 1], [0, 0, 0]])\n    structure_y = np.array([[0, 0, 0], [0, 0, 0], [0, 1, 0]])\n\n    right = np.roll(im_left, -1, axis=1)\n    below = np.roll(im_left, -1, axis=0)\n    n_right = (im_left[:,:,0] - right[:,:,0])**2 +\\\n              (im_left[:,:,1] - right[:,:,1])**2 +\\\n              (im_left[:,:,2] - right[:,:,2])**2\n\n    n_below = (im_left[:,:,0] - below[:,:,0])**2 +\\\n              (im_left[:,:,1] - below[:,:,1])**2 +\\\n              (im_left[:,:,2] - below[:,:,2])**2\n\n    g.add_grid_edges(nodeIds, weights=n_right, structure=structure_x, symmetric=True)\n    g.add_grid_edges(nodeIds, weights=n_below, structure=structure_y, symmetric=True)\n\n    # add n-links for photo consistency\n    structure_z = np.array([[[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 0, 0],\n                             [0, 0, 0]],\n                            [[0, 0, 0],\n                             [0, 1, 0],\n                             [0, 0, 0]]])\n\n    # weight is multiplied here\n    g.add_grid_edges(nodeIds, weights=SD*w, structure=structure_z, symmetric=True)\n\n    # find maximum weight of n-link edges\n    max_right = np.max(n_right)\n    max_below = np.max(n_below)\n    max_depth = np.max(SD)\n    max_edge = np.max([max_right, max_below, max_depth])\n\n    # assign t-links\n    t_source = np.zeros((depth, num_rows, num_cols))\n    t_sink = np.zeros((depth, num_rows, num_cols))\n\n    t_source[0] = np.ones((num_rows, num_cols)) * max_edge * 4\n    t_sink[-1] = np.ones((num_rows, num_cols)) * max_edge * 4\n    g.add_grid_tedges(nodeIds, t_source, t_sink)\n\n    g.maxflow()\n\n    return g, nodeIds\n</code></pre>\n<p>Apply full grid stereo and return the disparity map.</p>\n<pre><code class=\"python\">def full_grid_stereo(im_left, SD, d_min, d_max, w):\n    flow_g, nodeIds = graph_cut_3D(im_left, SD, d_min, d_max, w)\n    num_rows = im_left.shape[0]\n    num_cols = im_left.shape[1]\n\n    # traverse each depth of the full grid\n    # and find out where the grid was cut\n    disparity_map = np.zeros((num_rows, num_cols))\n    cur_disparity = ~np.ones((num_rows, num_cols), dtype=bool)\n\n    for d in range(d_min+1, d_max+1):\n        index = d - d_min\n        cur_depth = flow_g.get_grid_segments(nodeIds[index])\n        # compute xor to find any label change\n        cut = cur_disparity ^ cur_depth\n        disparity_map[cut] = d - 1\n        cur_disparity = cur_depth\n\n    return disparity_map\n</code></pre>\n<p>The following images show the result of applying full grid stereo.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-full-grid-result1.png\" alt=\"stere graph cut result1\"></p>\n<p>Apply full grid approach on other datasets (<a href=\"https://vision.middlebury.edu/stereo/data/]\">Middlebury</a>)<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-test.png\" alt=\"stere graph cut test\"></p>\n<p>The corresponding results show as follows.<br><img src=\"/2021/01/07/Computer-Vision-Stereo/stereo-test-result.png\" alt=\"stere graph cut test result\"></p>"},{"title":"Configure Kerberos Authentication in Golang","date":"2019-10-10T23:54:37.000Z","photos":["../images/kerberos.png"],"_content":"\nThis is a short guide about how to configure kerberos authentication on the client side (server side already been configured) using Golang\n<!-- more -->\n\n## Breif introduction of Kerberos\n\nKerberos is a protocol developed by MIT scientists with the name introduced by the [three-head dog](https://en.wikipedia.org/wiki/Cerberus) from myth. It is well-spreaded as a general authorization technology and used across multiple platforms.\n\nThe basic steps to get authentication are:\n1. A Client requests an authentication ticket(TGT) with credentials from the Key Distribution Center(KDC)\n2. KDC verifies the credentials and returns an encrypted TGT\n3. Client saves TGT and sends the encrypted TGT to the Ticket Granting Service(TGS)\n4. KDC verifies TGT and notifies TGS, then TGS returns a valid session token to the client\n5. Client uses the token to access a specific server\n6. ( If TGT expires, client will request for a new one by calling ` kinit ` ) \n</br>\n\n## Go Client\n\nThere are multipe clients available for Golang, and you can refer to [here](https://cwiki.apache.org/confluence/display/KAFKA/Clients) to have a breif look. Usually we intent to choose libraries which are purely coded in the sme programming language to avoid importing unnecessary dependencies. Unfortunately, by the time I wrote this article, I haven't found out a library which is purely written by Go, therefore I choose a cgo library supported by [Confluent](https://github.com/confluentinc/confluent-kafka-go), this library refers to a C library [librdkafka](https://github.com/edenhill/librdkafka).\n</br>\n\n## Environment\n\nFor the reason that I couldn't refresh my keytab on MacOS (most likely because macos disable UDP connection by default and hence cannot recognize kdc in my realms), I switched to linux (for dockerfile, linux is also a good choice :P).\n\nThe Go version is required to be at least `1.12`\n\nFirstly, since our client refering to `librdkafka`, we need to install librdkafka:\n```\nwget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - && \\\nadd-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main\"\n```\n\nThen install:\n```\napt-get install -y librdkafka-dev\n```\n\nI am going to use `GSSAPI` as `SASL` authentication and kerberos `krb` configuration hence need to import a few more tools:\n```\napt-get install -y libsasl2-modules-gssapi-mit libsasl2-dev\napt-get install -yqq krb5-user libpam-krb5\n```\n\n`libsasl2-modules-gssapi-mit` and `libsasl2-dev` are specified to GSSAPI authentication, if you are using other mechanism (for example PLAIN or SCRAM-SHA-256), please refer to corresponding tools.\n\n\nAnd double check if you have `ca-certificates` installed (Not sure why, but without ca-certificates, krb configuration cannot be set)\n</br>\n\n## Create a Client in Go\n\n```go\nimport kafka \"github.com/confluentinc/confluent-kafka-go/kafka\"\n\nclient, err := kafka.NewConsumer(&kafka.ConfigMap{\n    // Avoid connecting to IPv6 brokers:\n    // when using localhost brokers on OSX, since the OSX resolver\n    // will return the IPv6 addresses first.\n    // You typically don't need to specify this configuration property.\n    // \"broker.address.family\":      \"v4\",\n    \"bootstrap.servers\":          \"[Server host:port]\",\n    \"group.id\":                   \"[Group id]\",\n    \"security.protocol\":          \"SASL_PLAINTEXT\",\n    \"session.timeout.ms\":         6000,\n    \"sasl.mechanism\":             \"GSSAPI\",\n    \"auto.offset.reset\":          \"earliest\",\n    \"sasl.kerberos.service.name\": \"[Service name]\",\n    \"sasl.kerberos.keytab\":       \"[Key tab location]\",\n    \"sasl.kerberos.principal\":    \"[Principal]\",\n    \"sasl.kerberos.kinit.cmd\":    \"kinit -R -t \\\"%{sasl.kerberos.keytab}\\\" -k %{sasl.kerberos.principal}\",      \n})\n```\n\nThen export [JAAS configurations](https://docs.confluent.io/current/kafka/authentication_sasl/index.html)\n```\nexport KRB5_CONFIG=\"/usr/local/kafka/conf/krb5/krb5.conf\"\nexport KAFKA_OPTS=\"-Djava.security.auth.login.config=/usr/local/kafka/conf/kafka/kafka_client_jaas.conf-Djava.security.krb5.conf=/usr/local/kafka/conf/krb5/krb5.conf -Dsun.security.krb5.debug=true\"\n```\n\nFor here, I use `keytab` to authorize which need to configured on kafka server side. Initially, we can use `username` and `password` to authorize.\n\n```\n    \"sasl.username\": username,\n    \"sasl.password\": password,\n```\n\nOther configuration fields can be referred to the [offical documentaion](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md)\n</br>\n\n## Dockerfile\n\nWell, if you don't wanna spend time on the above configurations, here is the dockerfile :D\n```\n# refer to a cgo library maintained by Confluent: https://github.com/confluentinc/confluent-kafka-go\n# which requires a C dependency librdkafka-dev: https://github.com/edenhill/librdkafka\n# The C dependency librdkafka-dev is curretly not available for other linux version except for ubuntu/debian.\nFROM ubuntu\n\nENV http_proxy=\nENV https_proxy=\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install the C lib for kafka\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends apt-utils wget gnupg software-properties-common && \\\n    apt-get install -y apt-transport-https ca-certificates git curl openssl libsasl2-modules-gssapi-mit libsasl2-dev && \\\n    apt-get install -yqq krb5-user libpam-krb5 && \\\n# import source repository from confluent, check the latest version on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    wget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - && \\\n    add-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main\" && \\\n# import the librdkafka-dev from confluent source repository\n# confluent-kafka-go always requires the latest librdkafka-dev library\n# If go build fail below because of the mismatch of confluent-kafka-go and librdkafka-dev,\n# please check the latest source repositary on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    apt-get install -y librdkafka-dev && \\\n# Install Go\n    add-apt-repository ppa:longsleep/golang-backports && \\\n    apt-get install -y golang-1.12-go\n\n# build the library\nWORKDIR /src\n\nADD . /src\n\nRUN GOPATH=/go GOOS=linux /usr/lib/go-1.12/bin/go build -o app && \\\n    mv /src/app /usr/local/bin\n\nENV http_proxy ''\nENV https_proxy ''\n\nEXPOSE 8000\n\nENTRYPOINT [\"/usr/local/bin/app\"]\n\n```\n","source":"_posts/Configure-Kerberos-Authentication-in-Golang.md","raw":"---\ntitle: Configure Kerberos Authentication in Golang\ndate: 2019-10-10 19:54:37\ntags: [Kafka, Golang, Kerberos]\nphotos: [\"../images/kerberos.png\"]\n---\n\nThis is a short guide about how to configure kerberos authentication on the client side (server side already been configured) using Golang\n<!-- more -->\n\n## Breif introduction of Kerberos\n\nKerberos is a protocol developed by MIT scientists with the name introduced by the [three-head dog](https://en.wikipedia.org/wiki/Cerberus) from myth. It is well-spreaded as a general authorization technology and used across multiple platforms.\n\nThe basic steps to get authentication are:\n1. A Client requests an authentication ticket(TGT) with credentials from the Key Distribution Center(KDC)\n2. KDC verifies the credentials and returns an encrypted TGT\n3. Client saves TGT and sends the encrypted TGT to the Ticket Granting Service(TGS)\n4. KDC verifies TGT and notifies TGS, then TGS returns a valid session token to the client\n5. Client uses the token to access a specific server\n6. ( If TGT expires, client will request for a new one by calling ` kinit ` ) \n</br>\n\n## Go Client\n\nThere are multipe clients available for Golang, and you can refer to [here](https://cwiki.apache.org/confluence/display/KAFKA/Clients) to have a breif look. Usually we intent to choose libraries which are purely coded in the sme programming language to avoid importing unnecessary dependencies. Unfortunately, by the time I wrote this article, I haven't found out a library which is purely written by Go, therefore I choose a cgo library supported by [Confluent](https://github.com/confluentinc/confluent-kafka-go), this library refers to a C library [librdkafka](https://github.com/edenhill/librdkafka).\n</br>\n\n## Environment\n\nFor the reason that I couldn't refresh my keytab on MacOS (most likely because macos disable UDP connection by default and hence cannot recognize kdc in my realms), I switched to linux (for dockerfile, linux is also a good choice :P).\n\nThe Go version is required to be at least `1.12`\n\nFirstly, since our client refering to `librdkafka`, we need to install librdkafka:\n```\nwget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - && \\\nadd-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main\"\n```\n\nThen install:\n```\napt-get install -y librdkafka-dev\n```\n\nI am going to use `GSSAPI` as `SASL` authentication and kerberos `krb` configuration hence need to import a few more tools:\n```\napt-get install -y libsasl2-modules-gssapi-mit libsasl2-dev\napt-get install -yqq krb5-user libpam-krb5\n```\n\n`libsasl2-modules-gssapi-mit` and `libsasl2-dev` are specified to GSSAPI authentication, if you are using other mechanism (for example PLAIN or SCRAM-SHA-256), please refer to corresponding tools.\n\n\nAnd double check if you have `ca-certificates` installed (Not sure why, but without ca-certificates, krb configuration cannot be set)\n</br>\n\n## Create a Client in Go\n\n```go\nimport kafka \"github.com/confluentinc/confluent-kafka-go/kafka\"\n\nclient, err := kafka.NewConsumer(&kafka.ConfigMap{\n    // Avoid connecting to IPv6 brokers:\n    // when using localhost brokers on OSX, since the OSX resolver\n    // will return the IPv6 addresses first.\n    // You typically don't need to specify this configuration property.\n    // \"broker.address.family\":      \"v4\",\n    \"bootstrap.servers\":          \"[Server host:port]\",\n    \"group.id\":                   \"[Group id]\",\n    \"security.protocol\":          \"SASL_PLAINTEXT\",\n    \"session.timeout.ms\":         6000,\n    \"sasl.mechanism\":             \"GSSAPI\",\n    \"auto.offset.reset\":          \"earliest\",\n    \"sasl.kerberos.service.name\": \"[Service name]\",\n    \"sasl.kerberos.keytab\":       \"[Key tab location]\",\n    \"sasl.kerberos.principal\":    \"[Principal]\",\n    \"sasl.kerberos.kinit.cmd\":    \"kinit -R -t \\\"%{sasl.kerberos.keytab}\\\" -k %{sasl.kerberos.principal}\",      \n})\n```\n\nThen export [JAAS configurations](https://docs.confluent.io/current/kafka/authentication_sasl/index.html)\n```\nexport KRB5_CONFIG=\"/usr/local/kafka/conf/krb5/krb5.conf\"\nexport KAFKA_OPTS=\"-Djava.security.auth.login.config=/usr/local/kafka/conf/kafka/kafka_client_jaas.conf-Djava.security.krb5.conf=/usr/local/kafka/conf/krb5/krb5.conf -Dsun.security.krb5.debug=true\"\n```\n\nFor here, I use `keytab` to authorize which need to configured on kafka server side. Initially, we can use `username` and `password` to authorize.\n\n```\n    \"sasl.username\": username,\n    \"sasl.password\": password,\n```\n\nOther configuration fields can be referred to the [offical documentaion](https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md)\n</br>\n\n## Dockerfile\n\nWell, if you don't wanna spend time on the above configurations, here is the dockerfile :D\n```\n# refer to a cgo library maintained by Confluent: https://github.com/confluentinc/confluent-kafka-go\n# which requires a C dependency librdkafka-dev: https://github.com/edenhill/librdkafka\n# The C dependency librdkafka-dev is curretly not available for other linux version except for ubuntu/debian.\nFROM ubuntu\n\nENV http_proxy=\nENV https_proxy=\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install the C lib for kafka\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends apt-utils wget gnupg software-properties-common && \\\n    apt-get install -y apt-transport-https ca-certificates git curl openssl libsasl2-modules-gssapi-mit libsasl2-dev && \\\n    apt-get install -yqq krb5-user libpam-krb5 && \\\n# import source repository from confluent, check the latest version on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    wget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - && \\\n    add-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main\" && \\\n# import the librdkafka-dev from confluent source repository\n# confluent-kafka-go always requires the latest librdkafka-dev library\n# If go build fail below because of the mismatch of confluent-kafka-go and librdkafka-dev,\n# please check the latest source repositary on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    apt-get install -y librdkafka-dev && \\\n# Install Go\n    add-apt-repository ppa:longsleep/golang-backports && \\\n    apt-get install -y golang-1.12-go\n\n# build the library\nWORKDIR /src\n\nADD . /src\n\nRUN GOPATH=/go GOOS=linux /usr/lib/go-1.12/bin/go build -o app && \\\n    mv /src/app /usr/local/bin\n\nENV http_proxy ''\nENV https_proxy ''\n\nEXPOSE 8000\n\nENTRYPOINT [\"/usr/local/bin/app\"]\n\n```\n","slug":"Configure-Kerberos-Authentication-in-Golang","published":1,"updated":"2021-01-07T21:13:20.362Z","comments":1,"layout":"post","link":"","_id":"ckjnncqht00065opu2pfyb32q","content":"<p>This is a short guide about how to configure kerberos authentication on the client side (server side already been configured) using Golang<br><a id=\"more\"></a></p>\n<h2 id=\"Breif-introduction-of-Kerberos\"><a href=\"#Breif-introduction-of-Kerberos\" class=\"headerlink\" title=\"Breif introduction of Kerberos\"></a>Breif introduction of Kerberos</h2><p>Kerberos is a protocol developed by MIT scientists with the name introduced by the <a href=\"https://en.wikipedia.org/wiki/Cerberus\">three-head dog</a> from myth. It is well-spreaded as a general authorization technology and used across multiple platforms.</p>\n<p>The basic steps to get authentication are:</p>\n<ol>\n<li>A Client requests an authentication ticket(TGT) with credentials from the Key Distribution Center(KDC)</li>\n<li>KDC verifies the credentials and returns an encrypted TGT</li>\n<li>Client saves TGT and sends the encrypted TGT to the Ticket Granting Service(TGS)</li>\n<li>KDC verifies TGT and notifies TGS, then TGS returns a valid session token to the client</li>\n<li>Client uses the token to access a specific server</li>\n<li>( If TGT expires, client will request for a new one by calling <code>kinit</code> )<br><br></li>\n</ol>\n<h2 id=\"Go-Client\"><a href=\"#Go-Client\" class=\"headerlink\" title=\"Go Client\"></a>Go Client</h2><p>There are multipe clients available for Golang, and you can refer to <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/Clients\">here</a> to have a breif look. Usually we intent to choose libraries which are purely coded in the sme programming language to avoid importing unnecessary dependencies. Unfortunately, by the time I wrote this article, I haven’t found out a library which is purely written by Go, therefore I choose a cgo library supported by <a href=\"https://github.com/confluentinc/confluent-kafka-go\">Confluent</a>, this library refers to a C library <a href=\"https://github.com/edenhill/librdkafka\">librdkafka</a>.<br><br></p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><p>For the reason that I couldn’t refresh my keytab on MacOS (most likely because macos disable UDP connection by default and hence cannot recognize kdc in my realms), I switched to linux (for dockerfile, linux is also a good choice :P).</p>\n<p>The Go version is required to be at least <code>1.12</code></p>\n<p>Firstly, since our client refering to <code>librdkafka</code>, we need to install librdkafka:</p>\n<pre><code>wget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - &amp;&amp; \\\nadd-apt-repository &quot;deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main&quot;\n</code></pre><p>Then install:</p>\n<pre><code>apt-get install -y librdkafka-dev\n</code></pre><p>I am going to use <code>GSSAPI</code> as <code>SASL</code> authentication and kerberos <code>krb</code> configuration hence need to import a few more tools:</p>\n<pre><code>apt-get install -y libsasl2-modules-gssapi-mit libsasl2-dev\napt-get install -yqq krb5-user libpam-krb5\n</code></pre><p><code>libsasl2-modules-gssapi-mit</code> and <code>libsasl2-dev</code> are specified to GSSAPI authentication, if you are using other mechanism (for example PLAIN or SCRAM-SHA-256), please refer to corresponding tools.</p>\n<p>And double check if you have <code>ca-certificates</code> installed (Not sure why, but without ca-certificates, krb configuration cannot be set)<br><br></p>\n<h2 id=\"Create-a-Client-in-Go\"><a href=\"#Create-a-Client-in-Go\" class=\"headerlink\" title=\"Create a Client in Go\"></a>Create a Client in Go</h2><pre><code class=\"go\">import kafka &quot;github.com/confluentinc/confluent-kafka-go/kafka&quot;\n\nclient, err := kafka.NewConsumer(&amp;kafka.ConfigMap&#123;\n    // Avoid connecting to IPv6 brokers:\n    // when using localhost brokers on OSX, since the OSX resolver\n    // will return the IPv6 addresses first.\n    // You typically don&#39;t need to specify this configuration property.\n    // &quot;broker.address.family&quot;:      &quot;v4&quot;,\n    &quot;bootstrap.servers&quot;:          &quot;[Server host:port]&quot;,\n    &quot;group.id&quot;:                   &quot;[Group id]&quot;,\n    &quot;security.protocol&quot;:          &quot;SASL_PLAINTEXT&quot;,\n    &quot;session.timeout.ms&quot;:         6000,\n    &quot;sasl.mechanism&quot;:             &quot;GSSAPI&quot;,\n    &quot;auto.offset.reset&quot;:          &quot;earliest&quot;,\n    &quot;sasl.kerberos.service.name&quot;: &quot;[Service name]&quot;,\n    &quot;sasl.kerberos.keytab&quot;:       &quot;[Key tab location]&quot;,\n    &quot;sasl.kerberos.principal&quot;:    &quot;[Principal]&quot;,\n    &quot;sasl.kerberos.kinit.cmd&quot;:    &quot;kinit -R -t \\&quot;%&#123;sasl.kerberos.keytab&#125;\\&quot; -k %&#123;sasl.kerberos.principal&#125;&quot;,      \n&#125;)\n</code></pre>\n<p>Then export <a href=\"https://docs.confluent.io/current/kafka/authentication_sasl/index.html\">JAAS configurations</a></p>\n<pre><code>export KRB5_CONFIG=&quot;/usr/local/kafka/conf/krb5/krb5.conf&quot;\nexport KAFKA_OPTS=&quot;-Djava.security.auth.login.config=/usr/local/kafka/conf/kafka/kafka_client_jaas.conf-Djava.security.krb5.conf=/usr/local/kafka/conf/krb5/krb5.conf -Dsun.security.krb5.debug=true&quot;\n</code></pre><p>For here, I use <code>keytab</code> to authorize which need to configured on kafka server side. Initially, we can use <code>username</code> and <code>password</code> to authorize.</p>\n<pre><code>    &quot;sasl.username&quot;: username,\n    &quot;sasl.password&quot;: password,\n</code></pre><p>Other configuration fields can be referred to the <a href=\"https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md\">offical documentaion</a><br><br></p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>Well, if you don’t wanna spend time on the above configurations, here is the dockerfile :D</p>\n<pre><code># refer to a cgo library maintained by Confluent: https://github.com/confluentinc/confluent-kafka-go\n# which requires a C dependency librdkafka-dev: https://github.com/edenhill/librdkafka\n# The C dependency librdkafka-dev is curretly not available for other linux version except for ubuntu/debian.\nFROM ubuntu\n\nENV http_proxy=\nENV https_proxy=\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install the C lib for kafka\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends apt-utils wget gnupg software-properties-common &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates git curl openssl libsasl2-modules-gssapi-mit libsasl2-dev &amp;&amp; \\\n    apt-get install -yqq krb5-user libpam-krb5 &amp;&amp; \\\n# import source repository from confluent, check the latest version on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    wget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - &amp;&amp; \\\n    add-apt-repository &quot;deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main&quot; &amp;&amp; \\\n# import the librdkafka-dev from confluent source repository\n# confluent-kafka-go always requires the latest librdkafka-dev library\n# If go build fail below because of the mismatch of confluent-kafka-go and librdkafka-dev,\n# please check the latest source repositary on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    apt-get install -y librdkafka-dev &amp;&amp; \\\n# Install Go\n    add-apt-repository ppa:longsleep/golang-backports &amp;&amp; \\\n    apt-get install -y golang-1.12-go\n\n# build the library\nWORKDIR /src\n\nADD . /src\n\nRUN GOPATH=/go GOOS=linux /usr/lib/go-1.12/bin/go build -o app &amp;&amp; \\\n    mv /src/app /usr/local/bin\n\nENV http_proxy &#39;&#39;\nENV https_proxy &#39;&#39;\n\nEXPOSE 8000\n\nENTRYPOINT [&quot;/usr/local/bin/app&quot;]\n\n</code></pre>","site":{"data":{}},"excerpt":"<p>This is a short guide about how to configure kerberos authentication on the client side (server side already been configured) using Golang<br></p>","more":"<p></p>\n<h2 id=\"Breif-introduction-of-Kerberos\"><a href=\"#Breif-introduction-of-Kerberos\" class=\"headerlink\" title=\"Breif introduction of Kerberos\"></a>Breif introduction of Kerberos</h2><p>Kerberos is a protocol developed by MIT scientists with the name introduced by the <a href=\"https://en.wikipedia.org/wiki/Cerberus\">three-head dog</a> from myth. It is well-spreaded as a general authorization technology and used across multiple platforms.</p>\n<p>The basic steps to get authentication are:</p>\n<ol>\n<li>A Client requests an authentication ticket(TGT) with credentials from the Key Distribution Center(KDC)</li>\n<li>KDC verifies the credentials and returns an encrypted TGT</li>\n<li>Client saves TGT and sends the encrypted TGT to the Ticket Granting Service(TGS)</li>\n<li>KDC verifies TGT and notifies TGS, then TGS returns a valid session token to the client</li>\n<li>Client uses the token to access a specific server</li>\n<li>( If TGT expires, client will request for a new one by calling <code>kinit</code> )<br><br></li>\n</ol>\n<h2 id=\"Go-Client\"><a href=\"#Go-Client\" class=\"headerlink\" title=\"Go Client\"></a>Go Client</h2><p>There are multipe clients available for Golang, and you can refer to <a href=\"https://cwiki.apache.org/confluence/display/KAFKA/Clients\">here</a> to have a breif look. Usually we intent to choose libraries which are purely coded in the sme programming language to avoid importing unnecessary dependencies. Unfortunately, by the time I wrote this article, I haven’t found out a library which is purely written by Go, therefore I choose a cgo library supported by <a href=\"https://github.com/confluentinc/confluent-kafka-go\">Confluent</a>, this library refers to a C library <a href=\"https://github.com/edenhill/librdkafka\">librdkafka</a>.<br><br></p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><p>For the reason that I couldn’t refresh my keytab on MacOS (most likely because macos disable UDP connection by default and hence cannot recognize kdc in my realms), I switched to linux (for dockerfile, linux is also a good choice :P).</p>\n<p>The Go version is required to be at least <code>1.12</code></p>\n<p>Firstly, since our client refering to <code>librdkafka</code>, we need to install librdkafka:</p>\n<pre><code>wget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - &amp;&amp; \\\nadd-apt-repository &quot;deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main&quot;\n</code></pre><p>Then install:</p>\n<pre><code>apt-get install -y librdkafka-dev\n</code></pre><p>I am going to use <code>GSSAPI</code> as <code>SASL</code> authentication and kerberos <code>krb</code> configuration hence need to import a few more tools:</p>\n<pre><code>apt-get install -y libsasl2-modules-gssapi-mit libsasl2-dev\napt-get install -yqq krb5-user libpam-krb5\n</code></pre><p><code>libsasl2-modules-gssapi-mit</code> and <code>libsasl2-dev</code> are specified to GSSAPI authentication, if you are using other mechanism (for example PLAIN or SCRAM-SHA-256), please refer to corresponding tools.</p>\n<p>And double check if you have <code>ca-certificates</code> installed (Not sure why, but without ca-certificates, krb configuration cannot be set)<br><br></p>\n<h2 id=\"Create-a-Client-in-Go\"><a href=\"#Create-a-Client-in-Go\" class=\"headerlink\" title=\"Create a Client in Go\"></a>Create a Client in Go</h2><pre><code class=\"go\">import kafka &quot;github.com/confluentinc/confluent-kafka-go/kafka&quot;\n\nclient, err := kafka.NewConsumer(&amp;kafka.ConfigMap&#123;\n    // Avoid connecting to IPv6 brokers:\n    // when using localhost brokers on OSX, since the OSX resolver\n    // will return the IPv6 addresses first.\n    // You typically don&#39;t need to specify this configuration property.\n    // &quot;broker.address.family&quot;:      &quot;v4&quot;,\n    &quot;bootstrap.servers&quot;:          &quot;[Server host:port]&quot;,\n    &quot;group.id&quot;:                   &quot;[Group id]&quot;,\n    &quot;security.protocol&quot;:          &quot;SASL_PLAINTEXT&quot;,\n    &quot;session.timeout.ms&quot;:         6000,\n    &quot;sasl.mechanism&quot;:             &quot;GSSAPI&quot;,\n    &quot;auto.offset.reset&quot;:          &quot;earliest&quot;,\n    &quot;sasl.kerberos.service.name&quot;: &quot;[Service name]&quot;,\n    &quot;sasl.kerberos.keytab&quot;:       &quot;[Key tab location]&quot;,\n    &quot;sasl.kerberos.principal&quot;:    &quot;[Principal]&quot;,\n    &quot;sasl.kerberos.kinit.cmd&quot;:    &quot;kinit -R -t \\&quot;%&#123;sasl.kerberos.keytab&#125;\\&quot; -k %&#123;sasl.kerberos.principal&#125;&quot;,      \n&#125;)\n</code></pre>\n<p>Then export <a href=\"https://docs.confluent.io/current/kafka/authentication_sasl/index.html\">JAAS configurations</a></p>\n<pre><code>export KRB5_CONFIG=&quot;/usr/local/kafka/conf/krb5/krb5.conf&quot;\nexport KAFKA_OPTS=&quot;-Djava.security.auth.login.config=/usr/local/kafka/conf/kafka/kafka_client_jaas.conf-Djava.security.krb5.conf=/usr/local/kafka/conf/krb5/krb5.conf -Dsun.security.krb5.debug=true&quot;\n</code></pre><p>For here, I use <code>keytab</code> to authorize which need to configured on kafka server side. Initially, we can use <code>username</code> and <code>password</code> to authorize.</p>\n<pre><code>    &quot;sasl.username&quot;: username,\n    &quot;sasl.password&quot;: password,\n</code></pre><p>Other configuration fields can be referred to the <a href=\"https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md\">offical documentaion</a><br><br></p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>Well, if you don’t wanna spend time on the above configurations, here is the dockerfile :D</p>\n<pre><code># refer to a cgo library maintained by Confluent: https://github.com/confluentinc/confluent-kafka-go\n# which requires a C dependency librdkafka-dev: https://github.com/edenhill/librdkafka\n# The C dependency librdkafka-dev is curretly not available for other linux version except for ubuntu/debian.\nFROM ubuntu\n\nENV http_proxy=\nENV https_proxy=\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install the C lib for kafka\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends apt-utils wget gnupg software-properties-common &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates git curl openssl libsasl2-modules-gssapi-mit libsasl2-dev &amp;&amp; \\\n    apt-get install -yqq krb5-user libpam-krb5 &amp;&amp; \\\n# import source repository from confluent, check the latest version on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    wget -qO - https://packages.confluent.io/deb/5.3/archive.key | apt-key add - &amp;&amp; \\\n    add-apt-repository &quot;deb [arch=amd64] https://packages.confluent.io/deb/5.3 stable main&quot; &amp;&amp; \\\n# import the librdkafka-dev from confluent source repository\n# confluent-kafka-go always requires the latest librdkafka-dev library\n# If go build fail below because of the mismatch of confluent-kafka-go and librdkafka-dev,\n# please check the latest source repositary on https://docs.confluent.io/current/installation/installing_cp/deb-ubuntu.html#get-the-software\n    apt-get install -y librdkafka-dev &amp;&amp; \\\n# Install Go\n    add-apt-repository ppa:longsleep/golang-backports &amp;&amp; \\\n    apt-get install -y golang-1.12-go\n\n# build the library\nWORKDIR /src\n\nADD . /src\n\nRUN GOPATH=/go GOOS=linux /usr/lib/go-1.12/bin/go build -o app &amp;&amp; \\\n    mv /src/app /usr/local/bin\n\nENV http_proxy &#39;&#39;\nENV https_proxy &#39;&#39;\n\nEXPOSE 8000\n\nENTRYPOINT [&quot;/usr/local/bin/app&quot;]\n\n</code></pre>"},{"title":"How to Check Open TCP/IP Ports in Mac OS X","date":"2019-05-06T21:48:23.000Z","photos":["../images/cli.JPG"],"_content":"The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command **`netstat`** is useful:\n```\nnetstat -ap tcp | grep -i \"listen\"\n```\n<!-- more -->\nThat will print out something like this in the console:\n```\nAchive Internet connections(including servers)\nProto     Recv-Q      Send-Q       Local Address       Foreign Address     (state)     \ntcp4      0           0            localhost.25035     *.*                  LISTEN\n```\nThat works but the problem is that it doesn't show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. \n\nThen found out that there is another command **`lsof`**:\n```\nsudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN\n```\nwhich prints out all the processes running in a given port with specific names:\n```\nCOMMAND    PID    USER    FD    TYPE    DEVICE    SIZE/OFF    NODE       NAME\nsyslogd    350    root    5w    VREG    222,5     0           440818     /var/adm/messages     \nsyslogd    350    root    6w    VREG    222,5     339098      6248       /var/log/syslog\ncron       353    root    cwd   VDIR    222,5     512         254550     /var -- atjobs\n```\n\n**`-n`** : No dns (no host name)\n**`-P`** : List port number instead of its name\n**`-i `** : Lists IP sockets\n\nTo view the port associated with a daemon:\n```\nlsof -i -n -P | grep python\n```\n\nIf we just want to see the name:\n```\nsudo lsof -i :PortNumber | grep LISTEN\n```\n\nGet all running **PID** in a specific port:\n```\nsudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID   \n```\n\nAnd then we can kill all the processes:\n```\nsudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID)   \n```\n\nlist all commands:\n```\nlsof -h\n```\n","source":"_posts/How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X.md","raw":"---\ntitle: How to Check Open TCP/IP Ports in Mac OS X\ndate: 2019-05-06 17:48:23\ntags: [CLI, Mac OS, port]\nphotos: [\"../images/cli.JPG\"]\n---\nThe core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command **`netstat`** is useful:\n```\nnetstat -ap tcp | grep -i \"listen\"\n```\n<!-- more -->\nThat will print out something like this in the console:\n```\nAchive Internet connections(including servers)\nProto     Recv-Q      Send-Q       Local Address       Foreign Address     (state)     \ntcp4      0           0            localhost.25035     *.*                  LISTEN\n```\nThat works but the problem is that it doesn't show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. \n\nThen found out that there is another command **`lsof`**:\n```\nsudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN\n```\nwhich prints out all the processes running in a given port with specific names:\n```\nCOMMAND    PID    USER    FD    TYPE    DEVICE    SIZE/OFF    NODE       NAME\nsyslogd    350    root    5w    VREG    222,5     0           440818     /var/adm/messages     \nsyslogd    350    root    6w    VREG    222,5     339098      6248       /var/log/syslog\ncron       353    root    cwd   VDIR    222,5     512         254550     /var -- atjobs\n```\n\n**`-n`** : No dns (no host name)\n**`-P`** : List port number instead of its name\n**`-i `** : Lists IP sockets\n\nTo view the port associated with a daemon:\n```\nlsof -i -n -P | grep python\n```\n\nIf we just want to see the name:\n```\nsudo lsof -i :PortNumber | grep LISTEN\n```\n\nGet all running **PID** in a specific port:\n```\nsudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID   \n```\n\nAnd then we can kill all the processes:\n```\nsudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk '{ print $2; }' | head -n 2 | grep -v PID)   \n```\n\nlist all commands:\n```\nlsof -h\n```\n","slug":"How-to-Check-Open-TCP-IP-Ports-in-Mac-OS-X","published":1,"updated":"2021-01-07T21:13:20.362Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhu00075opuc2uy15aa","content":"<p>The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command <strong><code>netstat</code></strong> is useful:</p>\n<pre><code>netstat -ap tcp | grep -i &quot;listen&quot;\n</code></pre><a id=\"more\"></a>\n<p>That will print out something like this in the console:</p>\n<pre><code>Achive Internet connections(including servers)\nProto     Recv-Q      Send-Q       Local Address       Foreign Address     (state)     \ntcp4      0           0            localhost.25035     *.*                  LISTEN\n</code></pre><p>That works but the problem is that it doesn’t show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. </p>\n<p>Then found out that there is another command <strong><code>lsof</code></strong>:</p>\n<pre><code>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN\n</code></pre><p>which prints out all the processes running in a given port with specific names:</p>\n<pre><code>COMMAND    PID    USER    FD    TYPE    DEVICE    SIZE/OFF    NODE       NAME\nsyslogd    350    root    5w    VREG    222,5     0           440818     /var/adm/messages     \nsyslogd    350    root    6w    VREG    222,5     339098      6248       /var/log/syslog\ncron       353    root    cwd   VDIR    222,5     512         254550     /var -- atjobs\n</code></pre><p><strong><code>-n</code></strong> : No dns (no host name)<br><strong><code>-P</code></strong> : List port number instead of its name<br><strong><code>-i</code></strong> : Lists IP sockets</p>\n<p>To view the port associated with a daemon:</p>\n<pre><code>lsof -i -n -P | grep python\n</code></pre><p>If we just want to see the name:</p>\n<pre><code>sudo lsof -i :PortNumber | grep LISTEN\n</code></pre><p>Get all running <strong>PID</strong> in a specific port:</p>\n<pre><code>sudo lsof -i :PortNumber| grep LISTEN | awk &#39;&#123; print $2; &#125;&#39; | head -n 2 | grep -v PID   \n</code></pre><p>And then we can kill all the processes:</p>\n<pre><code>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk &#39;&#123; print $2; &#125;&#39; | head -n 2 | grep -v PID)   \n</code></pre><p>list all commands:</p>\n<pre><code>lsof -h\n</code></pre>","site":{"data":{}},"excerpt":"<p>The core of Mac OS is Darwin and we can use most of the CLI tools in Mac OS just like how it feels like in Linux. If we want to check out the current ports in usage, the command <strong><code>netstat</code></strong> is useful:</p>\n<pre><code>netstat -ap tcp | grep -i &quot;listen&quot;\n</code></pre>","more":"<p>That will print out something like this in the console:</p>\n<pre><code>Achive Internet connections(including servers)\nProto     Recv-Q      Send-Q       Local Address       Foreign Address     (state)     \ntcp4      0           0            localhost.25035     *.*                  LISTEN\n</code></pre><p>That works but the problem is that it doesn’t show up the names of the procedures which occupy the ports. Sometimes we want to know precisely which program is exposing the port. </p>\n<p>Then found out that there is another command <strong><code>lsof</code></strong>:</p>\n<pre><code>sudo lsof -nP -iTCP:PortNumber -sTCP:LISTEN\n</code></pre><p>which prints out all the processes running in a given port with specific names:</p>\n<pre><code>COMMAND    PID    USER    FD    TYPE    DEVICE    SIZE/OFF    NODE       NAME\nsyslogd    350    root    5w    VREG    222,5     0           440818     /var/adm/messages     \nsyslogd    350    root    6w    VREG    222,5     339098      6248       /var/log/syslog\ncron       353    root    cwd   VDIR    222,5     512         254550     /var -- atjobs\n</code></pre><p><strong><code>-n</code></strong> : No dns (no host name)<br><strong><code>-P</code></strong> : List port number instead of its name<br><strong><code>-i</code></strong> : Lists IP sockets</p>\n<p>To view the port associated with a daemon:</p>\n<pre><code>lsof -i -n -P | grep python\n</code></pre><p>If we just want to see the name:</p>\n<pre><code>sudo lsof -i :PortNumber | grep LISTEN\n</code></pre><p>Get all running <strong>PID</strong> in a specific port:</p>\n<pre><code>sudo lsof -i :PortNumber| grep LISTEN | awk &#39;&#123; print $2; &#125;&#39; | head -n 2 | grep -v PID   \n</code></pre><p>And then we can kill all the processes:</p>\n<pre><code>sudo kill -9 $(sudo lsof -i :PortNumber| grep LISTEN | awk &#39;&#123; print $2; &#125;&#39; | head -n 2 | grep -v PID)   \n</code></pre><p>list all commands:</p>\n<pre><code>lsof -h\n</code></pre>"},{"title":"How to debug NodeJS on VS Code","date":"2019-05-08T15:50:53.000Z","photos":["../images/vscode.JPG"],"_content":"Here are the steps to start debug mode in VS Code:\n\n1. On the left side bar, click \"debug\" icon to switch to debug viewlet\n\n2. On the top left, click the gear icon\n\n3. Then `launch.json` will be opened in the editor\n\n4. Replace the content of the file to be:\n<!-- more -->\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n5. Replace the command line arguments to whatever you need\n\n6. Start the debugger or press `F5`\n\nYou are all good to go!\n\nIf your program reads from **stdin**, please add a \"console\" attribute to the launch config:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t],\n\t\t\t\"console\": \"integratedTerminal\"\n\t\t}\n\t]\n}\n```\n\nIf you are running the program in the **terminal**, you can change the content alternatively to be:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"name\": \"Attach to app.js\",\n\t\t\t\"port\": \"5858\"\n\t\t}\n\t]\n}\n```\nThe port is the **debug port** and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run the command:\n```shell\nnode --debug-brk app.js arg1 arg2 arg3...\n```\n>The `--debug-brk` lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.\n\n</br>\n\nRunning such command, you may encounter a warning below:\n```\n(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.     \n```\nAs discussed in [microsoft github offical repository](https://github.com/Microsoft/vscode/issues/32529), currently there is **no way** to prevent this happening. The reason why using `--inspect --debug-brk` is explained [here](https://github.com/microsoft/vscode/issues/27731):\n>This combination of args is the only way to enter debug mode across all node versions. At some point I'll switch to inspect-brk if we don't want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.\n\n>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.\n\n","source":"_posts/How-to-debug-NodeJS-on-VS-Code.md","raw":"---\ntitle: How to debug NodeJS on VS Code\ndate: 2019-05-08 11:50:53\ntags: [VS Code, NodeJS]\nphotos: [\"../images/vscode.JPG\"]\n---\nHere are the steps to start debug mode in VS Code:\n\n1. On the left side bar, click \"debug\" icon to switch to debug viewlet\n\n2. On the top left, click the gear icon\n\n3. Then `launch.json` will be opened in the editor\n\n4. Replace the content of the file to be:\n<!-- more -->\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n5. Replace the command line arguments to whatever you need\n\n6. Start the debugger or press `F5`\n\nYou are all good to go!\n\nIf your program reads from **stdin**, please add a \"console\" attribute to the launch config:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"launch\",\n\t\t\t\"name\": \"Launch app.js\",\n\t\t\t\"program\": \"${workspaceRoot}/app.js\",\n\t\t\t\"stopOnEntry\": true,\n\t\t\t\"args\": [\n\t\t\t\t\"arg1\", \"arg2\", \"arg3\"\n\t\t\t],\n\t\t\t\"console\": \"integratedTerminal\"\n\t\t}\n\t]\n}\n```\n\nIf you are running the program in the **terminal**, you can change the content alternatively to be:\n```json\n{\n\t\"version\": \"0.2.0\",\n\t\"configurations\": [\n\t\t{\n\t\t\t\"type\": \"node\",\n\t\t\t\"request\": \"attach\",\n\t\t\t\"name\": \"Attach to app.js\",\n\t\t\t\"port\": \"5858\"\n\t\t}\n\t]\n}\n```\nThe port is the **debug port** and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run the command:\n```shell\nnode --debug-brk app.js arg1 arg2 arg3...\n```\n>The `--debug-brk` lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.\n\n</br>\n\nRunning such command, you may encounter a warning below:\n```\n(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.     \n```\nAs discussed in [microsoft github offical repository](https://github.com/Microsoft/vscode/issues/32529), currently there is **no way** to prevent this happening. The reason why using `--inspect --debug-brk` is explained [here](https://github.com/microsoft/vscode/issues/27731):\n>This combination of args is the only way to enter debug mode across all node versions. At some point I'll switch to inspect-brk if we don't want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.\n\n>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.\n\n","slug":"How-to-debug-NodeJS-on-VS-Code","published":1,"updated":"2021-01-07T21:13:20.363Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhv00095opu4qjq4kav","content":"<p>Here are the steps to start debug mode in VS Code:</p>\n<ol>\n<li><p>On the left side bar, click “debug” icon to switch to debug viewlet</p>\n</li>\n<li><p>On the top left, click the gear icon</p>\n</li>\n<li><p>Then <code>launch.json</code> will be opened in the editor</p>\n</li>\n<li><p>Replace the content of the file to be:</p>\n<a id=\"more\"></a>\n<pre><code class=\"json\">&#123;\n &quot;version&quot;: &quot;0.2.0&quot;,\n &quot;configurations&quot;: [\n     &#123;\n         &quot;type&quot;: &quot;node&quot;,\n         &quot;request&quot;: &quot;launch&quot;,\n         &quot;name&quot;: &quot;Launch app.js&quot;,\n         &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/app.js&quot;,\n         &quot;stopOnEntry&quot;: true,\n         &quot;args&quot;: [\n             &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;\n         ]\n     &#125;\n ]\n&#125;\n</code></pre>\n</li>\n<li><p>Replace the command line arguments to whatever you need</p>\n</li>\n<li><p>Start the debugger or press <code>F5</code></p>\n</li>\n</ol>\n<p>You are all good to go!</p>\n<p>If your program reads from <strong>stdin</strong>, please add a “console” attribute to the launch config:</p>\n<pre><code class=\"json\">&#123;\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        &#123;\n            &quot;type&quot;: &quot;node&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;name&quot;: &quot;Launch app.js&quot;,\n            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/app.js&quot;,\n            &quot;stopOnEntry&quot;: true,\n            &quot;args&quot;: [\n                &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;\n            ],\n            &quot;console&quot;: &quot;integratedTerminal&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>If you are running the program in the <strong>terminal</strong>, you can change the content alternatively to be:</p>\n<pre><code class=\"json\">&#123;\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        &#123;\n            &quot;type&quot;: &quot;node&quot;,\n            &quot;request&quot;: &quot;attach&quot;,\n            &quot;name&quot;: &quot;Attach to app.js&quot;,\n            &quot;port&quot;: &quot;5858&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>The port is the <strong>debug port</strong> and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run the command:</p>\n<pre><code class=\"shell\">node --debug-brk app.js arg1 arg2 arg3...\n</code></pre>\n<blockquote>\n<p>The <code>--debug-brk</code> lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.</p>\n</blockquote>\n<p><br></p>\n<p>Running such command, you may encounter a warning below:</p>\n<pre><code>(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.     \n</code></pre><p>As discussed in <a href=\"https://github.com/Microsoft/vscode/issues/32529\">microsoft github offical repository</a>, currently there is <strong>no way</strong> to prevent this happening. The reason why using <code>--inspect --debug-brk</code> is explained <a href=\"https://github.com/microsoft/vscode/issues/27731\">here</a>:</p>\n<blockquote>\n<p>This combination of args is the only way to enter debug mode across all node versions. At some point I’ll switch to inspect-brk if we don’t want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.</p>\n</blockquote>\n<blockquote>\n<p>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Here are the steps to start debug mode in VS Code:</p>\n<ol>\n<li><p>On the left side bar, click “debug” icon to switch to debug viewlet</p>\n</li>\n<li><p>On the top left, click the gear icon</p>\n</li>\n<li><p>Then <code>launch.json</code> will be opened in the editor</p>\n</li>\n<li><p>Replace the content of the file to be:</p></li></ol>","more":"<pre><code class=\"json\">&#123;\n &quot;version&quot;: &quot;0.2.0&quot;,\n &quot;configurations&quot;: [\n     &#123;\n         &quot;type&quot;: &quot;node&quot;,\n         &quot;request&quot;: &quot;launch&quot;,\n         &quot;name&quot;: &quot;Launch app.js&quot;,\n         &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/app.js&quot;,\n         &quot;stopOnEntry&quot;: true,\n         &quot;args&quot;: [\n             &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;\n         ]\n     &#125;\n ]\n&#125;\n</code></pre>\n\n<li><p>Replace the command line arguments to whatever you need</p>\n</li>\n<li><p>Start the debugger or press <code>F5</code></p>\n</li>\n\n<p>You are all good to go!</p>\n<p>If your program reads from <strong>stdin</strong>, please add a “console” attribute to the launch config:</p>\n<pre><code class=\"json\">&#123;\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        &#123;\n            &quot;type&quot;: &quot;node&quot;,\n            &quot;request&quot;: &quot;launch&quot;,\n            &quot;name&quot;: &quot;Launch app.js&quot;,\n            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/app.js&quot;,\n            &quot;stopOnEntry&quot;: true,\n            &quot;args&quot;: [\n                &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;\n            ],\n            &quot;console&quot;: &quot;integratedTerminal&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>If you are running the program in the <strong>terminal</strong>, you can change the content alternatively to be:</p>\n<pre><code class=\"json\">&#123;\n    &quot;version&quot;: &quot;0.2.0&quot;,\n    &quot;configurations&quot;: [\n        &#123;\n            &quot;type&quot;: &quot;node&quot;,\n            &quot;request&quot;: &quot;attach&quot;,\n            &quot;name&quot;: &quot;Attach to app.js&quot;,\n            &quot;port&quot;: &quot;5858&quot;\n        &#125;\n    ]\n&#125;\n</code></pre>\n<p>The port is the <strong>debug port</strong> and it has nothing to do with your program (no matter it is a service or not). Then in the terminal, run the command:</p>\n<pre><code class=\"shell\">node --debug-brk app.js arg1 arg2 arg3...\n</code></pre>\n<blockquote>\n<p>The <code>--debug-brk</code> lets your program wait for the debugger to attach to. So there is no problem that it terminates before the debugger could attach.</p>\n</blockquote>\n<p><br></p>\n<p>Running such command, you may encounter a warning below:</p>\n<pre><code>(node:31245) [DEP0062] DeprecationWarning: `node --inspect --debug-brk` is deprecated. Please use `node --inspect-brk` instead.     \n</code></pre><p>As discussed in <a href=\"https://github.com/Microsoft/vscode/issues/32529\">microsoft github offical repository</a>, currently there is <strong>no way</strong> to prevent this happening. The reason why using <code>--inspect --debug-brk</code> is explained <a href=\"https://github.com/microsoft/vscode/issues/27731\">here</a>:</p>\n<blockquote>\n<p>This combination of args is the only way to enter debug mode across all node versions. At some point I’ll switch to inspect-brk if we don’t want to support node 6.x anymore, or will do version detection for it and do something for runtimeExecutable scenarios.</p>\n</blockquote>\n<blockquote>\n<p>The problem is that we do not really know what version of node a user is using, so we cannot adapt the flags we use to the node version in order to minimize the resulting deprecation warnings.</p>\n</blockquote>"},{"title":"Implement Zero Data Loss in Spark Streaming","date":"2019-05-22T22:19:14.000Z","photos":["../images/spark_kafka.JPG"],"_content":"This is a log from my own experience in spark streaming during my work. Base on different environment and servers, the strategy may vary. For here, I am working with **Kafka** and Google Cloud **PubSub**. <!-- more -->\n\n## Background\nI have such workflow that the spark streaming receives dataset from both Kafka and PubSub, after doing some clean up and modeling, push the data to the Cloud Datastore.\n![my Workflow](sparkworkflow.png)\nIt works fine when the data stream is small and reports me the expected values; however while the number of end users is growing large, especially when the data stream turns to be erratic and sometimes considerably large if end users interact frequently with our UI pages, the spark streaming will get a lot of uncertain runtime errors. Those errors are most likely caused by the finite number of workers in our cluster. Also when there are too much stream rushing over to the server, the limited memory in cache will cause failures. After we upgraded the cluster on cloud, the number of errors is significantly reduced.\n![CPU Utilization](cpudiagram.png)\nBut the data processed during the errors was permanently lost and cannot be recovered. The data running on spark is buffered in memory (cache) and will be cleared meanwhile a failure occurs. This is not desired since some valuable KPIs may be lost as well. To prevent such data loss, I tried different strategies.\n</br>\n\n## Checkpoint\nCheckpointing is a process supported by spark streaming after version which will save RDDs in log after being checkpointed. There are two level of checkpoints: reliable and local. **Reliable checkpoint** ensures that the data is stored permanentlly on HDFS, S3 or other distributed filesystems. Each job on cluster will create a directory for saving checkpointed logs, which will look pretty much like the directory below:\n```\n├── \"SomeUUID\"\n│   └── rdd-#\n│       ├── part-timestamp1\n│       ├── .part-timestamp1.crc\n│       ├── part-timestamp2\n│       └── .part-timestamp2.crc\n```\nSince the data stream will be replicated on disk, the performance will slow down due to file I/O. **Local checkpoint** privileges performance over fault-tolerance which will persist RDDs on local storage in the executors. Read or write will be faster in this case; however if a driver fails, the data not yet executed may not be recoverable. As default, the data storeage level is set to `MEMORY_AND_DISK` which saves data in cache and disk (some in cache and some in disk). For here I changed to `MEMORY_AND_DISK_SER_2` (more details can be referred to [here](https://stackoverflow.com/questions/30520428/what-is-the-difference-between-memory-only-and-memory-and-disk-caching-level-in)). The different is that, unlike **cache** only, the checkpoints doesn't save DAG with all the parents of RDDs; instead, they only save particular RDDs and remain for a longer time than cache. The time of persistance is strictly related to the executed computation and ends with the end of the spark application. To apply the checkpoint machanism, you just simply need to set the checkpoint directory when you are creating the **StreamingContext**\n```scala\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")   \n     val ssc = new StreamingContext(sparkConf, Seconds(1))\n     ...\n     ssc.checkpoint(CHECK_POINT_DIR)\n     ssc\n}\n```\nand before an action is operated on RDD:\n```scala\n    sRDD.checkpoint()\n    sRDD.foreachPartition { partitionOfRecords => {     \n        ...\n        }\n    }\n```\nand `sRDD.isCheckpointed()` will return **true**. For cleaning, the RDDs stored in cache will be cleaned with all other memory after the whole spark application is finished or terminated; the reliable RDDs stored on disk can be cleaned manually or set \n`spark.cleaner.referenceTracking.cleanCheckpoints` property to be **true** to enable automatic cleaning. This driver recovery mechanism is sufficient to ensure zero data loss if all data was reliably store in the system. However for my circumstance, the data is read from **kafka** and some of the data buffered in memory could be lost. If the driver process fails, all the executors running will be killed as well, along with any data in their memory. This pushes me to look for other mechanisms which are more advanced.\n</br>\n\n## Write Ahead Logs\nWrite Ahead Logs are used in database and file systems to ensure the durability of any data operations. The intention of the operation is first written down into a durable log , and then the operation is applied to the data. If the system fails in the middle of applying the operation, it can recover by reading the log and reapplying the operations it had intended to do.\n\nSpark streaming uses **Receiver** to read data from **Kafka**. They run as long-running tasks in the executors and store the revecived data in the memory of the executors. If you enable the **checkpoint**, the data will be checkpointed either in cache or disk **in executors** before porceed into the application drivers. Unlike **checkpoint**, applying **WAL** will instead backup the recevied data in an **external fault-tolerant filesystem**. And after the executor batches the received data and sends to the driver, **WAL** supports another log to store the block metadata into external filesystem before being executed.\n![https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html](wal_spark.png)\n(diagram from https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html)\nSpark streaming starts supporting WAL after version 1.2 and can be enabled by setting the config:\n\n```scala\nval ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")\n                                   .set(\"spark.streaming.receiver.writeAheadLog.enable\",\"true\")    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n}\n```\nSet the spark automatically clean checkpoints to release disk memory:\n```scala\nval ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")\n                                   .set(\"spark.streaming.receiver.writeAheadLog.enable\",\"true\")\n                                   .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n}\n\n```\nThis will not clean the latest checkpoint as it is still referred to by the application to recover from possible failures. If you expect to restart the application driver if it crashed due to some errors and exactly start from where it crashed last time instead of performing the whole operation once again, you can create **StreamingContext** from the previous checkpoint by using the method `getOrCreate()`:\n```scala\nval ssc = StreamingContext.getOrCreate(CHECK_POINT_DIR, () => createContext(...params))\n\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")\n                                   .set(\"spark.streaming.receiver.writeAheadLog.enable\",\"true\")\n                                   .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n}\n```\nHowever after I tried switching to `getOrCreate()`, I had the following exception:\n```\nException in thread \"main\" org.apache.spark.SparkException: Failed to read checkpoint from directory checkpointDir\n    at org.apache.spark.streaming.CheckpointReader$.read(Checkpoint.scala:368)\n\tat org.apache.spark.streaming.StreamingContext$.getOrCreate(StreamingContext.scala:827)\n    ...\nCaused by: java.io.IOException: java.lang.ClassCastException: cannot assign instance of com.some.project$$anonfun$1 to field org.apache.spark.streaming.dstream.MappedDStream.org$apache$spark$streaming$dstream$MappedDStream$$mapFunc of type scala.Function1 in instance of org.apache.spark.streaming.dstream.MappedDStream     \n\tat org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1310)\n\tat org.apache.spark.streaming.DStreamGraph.readObject(DStreamGraph.scala:194)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    ...\n```\nIt is because this is not the first time I use checkpoints, and there already exsists some other checkpoints in the same root directory (etc, the simple checkpoint discussed previously). Since the application tried to read from those unrelated checkpoints and expected to cast them to generate new context, it would throw such **ClassCastException**. This can be easily solved by deleting original checkpoints in HDFS locals (manually).\n\nWAL is an advanced checkpoint mechanism and also simple to be applied. Compared with checkpoint, it saves data into an external filesystem so that even though if the executor is terminated and the data in memory is clean-uped, data still can be recovered from the external filesystem. However. it can only recover the data which is logged in the filesystem, if the drivers fail due to some error, the executor will be terminated as well, so as the WAL writer. Then the rest incomming data will not be logged into the filesystem and hence, is not recoverable. It can be tested by calling **stop** to the **StreamContext**:\n```scala\ndef stop(stopSparkContext: Boolean, stopGracefully: Boolean): Unit\n```\nOnce it is called, the following console log interpretes that the **WAL Writer** is interrupted as well:\n```\nERROR ReceiverTracker: Deregistered receiver for stream 0: Stopped by driver\nWARN BlockGenerator: Cannot stop BlockGenerator as its not in the Active state [state = StoppedAll]     \nWARN BatchedWriteAheadLog: BatchedWriteAheadLog Writer queue interrupted.\n```\nAnd also the data will not be recoverable across applications or Spark upgrades and hence not very reliable\n</br>\n\n## Kafka Direct API\nThis mechanism is only available when you data source is **Kafka**. Kafka supports a commit strategy which is able to help you manage offsets of each topics. Each offset points to a slot in a topic. When the data stored in this slot is consumed by any receiver, Kafka will be acknowledged by this consumption and moves the index to the next data slot.\n![https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/](Spark-Streaming-flow-for-offsets.png)\n(diagram from https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/)\nWhen `enable.auto.commit` is set to be true, as soon as any receiver retrieves the data from the offset datastore in Kafka (here I use Kafka to store offsets), the receiver will automatically commit, which doesn't ensure that the data is successfully executed in the spark streaming. Therefore, we have to disbale the auto-commit when we are creating DStream from Kafka. After the data is successfully processed, we manually commit the offset to the datastore by calling the Kafka direct API:\n```scala\nstream.foreachRDD { rdd =>\n      //get current offset\n      val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n\n      //process data\n\n      //store data in some datastore\n      DataStoreDB.push(...param)\n\n      //commit offset to kafka\n      stream.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)\n    }\n  }\n```\nIf an error occurs at any point during the execution, the offset won;t be committed to the kafka offset store and hence the same data will be resent by kafka, which ensures that the data will be executed only once.\n","source":"_posts/Implement-Zero-Data-Loss-in-Spark-Streaming.md","raw":"---\ntitle: Implement Zero Data Loss in Spark Streaming\ndate: 2019-05-22 18:19:14\ntags: [Spark, Kafka]\nphotos: [\"../images/spark_kafka.JPG\"]\n---\nThis is a log from my own experience in spark streaming during my work. Base on different environment and servers, the strategy may vary. For here, I am working with **Kafka** and Google Cloud **PubSub**. <!-- more -->\n\n## Background\nI have such workflow that the spark streaming receives dataset from both Kafka and PubSub, after doing some clean up and modeling, push the data to the Cloud Datastore.\n![my Workflow](sparkworkflow.png)\nIt works fine when the data stream is small and reports me the expected values; however while the number of end users is growing large, especially when the data stream turns to be erratic and sometimes considerably large if end users interact frequently with our UI pages, the spark streaming will get a lot of uncertain runtime errors. Those errors are most likely caused by the finite number of workers in our cluster. Also when there are too much stream rushing over to the server, the limited memory in cache will cause failures. After we upgraded the cluster on cloud, the number of errors is significantly reduced.\n![CPU Utilization](cpudiagram.png)\nBut the data processed during the errors was permanently lost and cannot be recovered. The data running on spark is buffered in memory (cache) and will be cleared meanwhile a failure occurs. This is not desired since some valuable KPIs may be lost as well. To prevent such data loss, I tried different strategies.\n</br>\n\n## Checkpoint\nCheckpointing is a process supported by spark streaming after version which will save RDDs in log after being checkpointed. There are two level of checkpoints: reliable and local. **Reliable checkpoint** ensures that the data is stored permanentlly on HDFS, S3 or other distributed filesystems. Each job on cluster will create a directory for saving checkpointed logs, which will look pretty much like the directory below:\n```\n├── \"SomeUUID\"\n│   └── rdd-#\n│       ├── part-timestamp1\n│       ├── .part-timestamp1.crc\n│       ├── part-timestamp2\n│       └── .part-timestamp2.crc\n```\nSince the data stream will be replicated on disk, the performance will slow down due to file I/O. **Local checkpoint** privileges performance over fault-tolerance which will persist RDDs on local storage in the executors. Read or write will be faster in this case; however if a driver fails, the data not yet executed may not be recoverable. As default, the data storeage level is set to `MEMORY_AND_DISK` which saves data in cache and disk (some in cache and some in disk). For here I changed to `MEMORY_AND_DISK_SER_2` (more details can be referred to [here](https://stackoverflow.com/questions/30520428/what-is-the-difference-between-memory-only-and-memory-and-disk-caching-level-in)). The different is that, unlike **cache** only, the checkpoints doesn't save DAG with all the parents of RDDs; instead, they only save particular RDDs and remain for a longer time than cache. The time of persistance is strictly related to the executed computation and ends with the end of the spark application. To apply the checkpoint machanism, you just simply need to set the checkpoint directory when you are creating the **StreamingContext**\n```scala\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")   \n     val ssc = new StreamingContext(sparkConf, Seconds(1))\n     ...\n     ssc.checkpoint(CHECK_POINT_DIR)\n     ssc\n}\n```\nand before an action is operated on RDD:\n```scala\n    sRDD.checkpoint()\n    sRDD.foreachPartition { partitionOfRecords => {     \n        ...\n        }\n    }\n```\nand `sRDD.isCheckpointed()` will return **true**. For cleaning, the RDDs stored in cache will be cleaned with all other memory after the whole spark application is finished or terminated; the reliable RDDs stored on disk can be cleaned manually or set \n`spark.cleaner.referenceTracking.cleanCheckpoints` property to be **true** to enable automatic cleaning. This driver recovery mechanism is sufficient to ensure zero data loss if all data was reliably store in the system. However for my circumstance, the data is read from **kafka** and some of the data buffered in memory could be lost. If the driver process fails, all the executors running will be killed as well, along with any data in their memory. This pushes me to look for other mechanisms which are more advanced.\n</br>\n\n## Write Ahead Logs\nWrite Ahead Logs are used in database and file systems to ensure the durability of any data operations. The intention of the operation is first written down into a durable log , and then the operation is applied to the data. If the system fails in the middle of applying the operation, it can recover by reading the log and reapplying the operations it had intended to do.\n\nSpark streaming uses **Receiver** to read data from **Kafka**. They run as long-running tasks in the executors and store the revecived data in the memory of the executors. If you enable the **checkpoint**, the data will be checkpointed either in cache or disk **in executors** before porceed into the application drivers. Unlike **checkpoint**, applying **WAL** will instead backup the recevied data in an **external fault-tolerant filesystem**. And after the executor batches the received data and sends to the driver, **WAL** supports another log to store the block metadata into external filesystem before being executed.\n![https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html](wal_spark.png)\n(diagram from https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html)\nSpark streaming starts supporting WAL after version 1.2 and can be enabled by setting the config:\n\n```scala\nval ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")\n                                   .set(\"spark.streaming.receiver.writeAheadLog.enable\",\"true\")    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n}\n```\nSet the spark automatically clean checkpoints to release disk memory:\n```scala\nval ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")\n                                   .set(\"spark.streaming.receiver.writeAheadLog.enable\",\"true\")\n                                   .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n}\n\n```\nThis will not clean the latest checkpoint as it is still referred to by the application to recover from possible failures. If you expect to restart the application driver if it crashed due to some errors and exactly start from where it crashed last time instead of performing the whole operation once again, you can create **StreamingContext** from the previous checkpoint by using the method `getOrCreate()`:\n```scala\nval ssc = StreamingContext.getOrCreate(CHECK_POINT_DIR, () => createContext(...params))\n\ndef createContext(...params): StreamingContext = {\n    val sparkConf = new SparkConf().setAppName(\"KpiAnalysis\")\n                                   .set(\"spark.streaming.receiver.writeAheadLog.enable\",\"true\")\n                                   .set(\"spark.cleaner.referenceTracking.cleanCheckpoints\", \"true\")    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n}\n```\nHowever after I tried switching to `getOrCreate()`, I had the following exception:\n```\nException in thread \"main\" org.apache.spark.SparkException: Failed to read checkpoint from directory checkpointDir\n    at org.apache.spark.streaming.CheckpointReader$.read(Checkpoint.scala:368)\n\tat org.apache.spark.streaming.StreamingContext$.getOrCreate(StreamingContext.scala:827)\n    ...\nCaused by: java.io.IOException: java.lang.ClassCastException: cannot assign instance of com.some.project$$anonfun$1 to field org.apache.spark.streaming.dstream.MappedDStream.org$apache$spark$streaming$dstream$MappedDStream$$mapFunc of type scala.Function1 in instance of org.apache.spark.streaming.dstream.MappedDStream     \n\tat org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1310)\n\tat org.apache.spark.streaming.DStreamGraph.readObject(DStreamGraph.scala:194)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    ...\n```\nIt is because this is not the first time I use checkpoints, and there already exsists some other checkpoints in the same root directory (etc, the simple checkpoint discussed previously). Since the application tried to read from those unrelated checkpoints and expected to cast them to generate new context, it would throw such **ClassCastException**. This can be easily solved by deleting original checkpoints in HDFS locals (manually).\n\nWAL is an advanced checkpoint mechanism and also simple to be applied. Compared with checkpoint, it saves data into an external filesystem so that even though if the executor is terminated and the data in memory is clean-uped, data still can be recovered from the external filesystem. However. it can only recover the data which is logged in the filesystem, if the drivers fail due to some error, the executor will be terminated as well, so as the WAL writer. Then the rest incomming data will not be logged into the filesystem and hence, is not recoverable. It can be tested by calling **stop** to the **StreamContext**:\n```scala\ndef stop(stopSparkContext: Boolean, stopGracefully: Boolean): Unit\n```\nOnce it is called, the following console log interpretes that the **WAL Writer** is interrupted as well:\n```\nERROR ReceiverTracker: Deregistered receiver for stream 0: Stopped by driver\nWARN BlockGenerator: Cannot stop BlockGenerator as its not in the Active state [state = StoppedAll]     \nWARN BatchedWriteAheadLog: BatchedWriteAheadLog Writer queue interrupted.\n```\nAnd also the data will not be recoverable across applications or Spark upgrades and hence not very reliable\n</br>\n\n## Kafka Direct API\nThis mechanism is only available when you data source is **Kafka**. Kafka supports a commit strategy which is able to help you manage offsets of each topics. Each offset points to a slot in a topic. When the data stored in this slot is consumed by any receiver, Kafka will be acknowledged by this consumption and moves the index to the next data slot.\n![https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/](Spark-Streaming-flow-for-offsets.png)\n(diagram from https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/)\nWhen `enable.auto.commit` is set to be true, as soon as any receiver retrieves the data from the offset datastore in Kafka (here I use Kafka to store offsets), the receiver will automatically commit, which doesn't ensure that the data is successfully executed in the spark streaming. Therefore, we have to disbale the auto-commit when we are creating DStream from Kafka. After the data is successfully processed, we manually commit the offset to the datastore by calling the Kafka direct API:\n```scala\nstream.foreachRDD { rdd =>\n      //get current offset\n      val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n\n      //process data\n\n      //store data in some datastore\n      DataStoreDB.push(...param)\n\n      //commit offset to kafka\n      stream.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)\n    }\n  }\n```\nIf an error occurs at any point during the execution, the offset won;t be committed to the kafka offset store and hence the same data will be resent by kafka, which ensures that the data will be executed only once.\n","slug":"Implement-Zero-Data-Loss-in-Spark-Streaming","published":1,"updated":"2021-01-07T21:13:20.363Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhv000a5opua497dcr0","content":"<p>This is a log from my own experience in spark streaming during my work. Base on different environment and servers, the strategy may vary. For here, I am working with <strong>Kafka</strong> and Google Cloud <strong>PubSub</strong>. <a id=\"more\"></a></p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>I have such workflow that the spark streaming receives dataset from both Kafka and PubSub, after doing some clean up and modeling, push the data to the Cloud Datastore.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/sparkworkflow.png\" alt=\"my Workflow\"><br>It works fine when the data stream is small and reports me the expected values; however while the number of end users is growing large, especially when the data stream turns to be erratic and sometimes considerably large if end users interact frequently with our UI pages, the spark streaming will get a lot of uncertain runtime errors. Those errors are most likely caused by the finite number of workers in our cluster. Also when there are too much stream rushing over to the server, the limited memory in cache will cause failures. After we upgraded the cluster on cloud, the number of errors is significantly reduced.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/cpudiagram.png\" alt=\"CPU Utilization\"><br>But the data processed during the errors was permanently lost and cannot be recovered. The data running on spark is buffered in memory (cache) and will be cleared meanwhile a failure occurs. This is not desired since some valuable KPIs may be lost as well. To prevent such data loss, I tried different strategies.<br><br></p>\n<h2 id=\"Checkpoint\"><a href=\"#Checkpoint\" class=\"headerlink\" title=\"Checkpoint\"></a>Checkpoint</h2><p>Checkpointing is a process supported by spark streaming after version which will save RDDs in log after being checkpointed. There are two level of checkpoints: reliable and local. <strong>Reliable checkpoint</strong> ensures that the data is stored permanentlly on HDFS, S3 or other distributed filesystems. Each job on cluster will create a directory for saving checkpointed logs, which will look pretty much like the directory below:</p>\n<pre><code>├── &quot;SomeUUID&quot;\n│   └── rdd-#\n│       ├── part-timestamp1\n│       ├── .part-timestamp1.crc\n│       ├── part-timestamp2\n│       └── .part-timestamp2.crc\n</code></pre><p>Since the data stream will be replicated on disk, the performance will slow down due to file I/O. <strong>Local checkpoint</strong> privileges performance over fault-tolerance which will persist RDDs on local storage in the executors. Read or write will be faster in this case; however if a driver fails, the data not yet executed may not be recoverable. As default, the data storeage level is set to <code>MEMORY_AND_DISK</code> which saves data in cache and disk (some in cache and some in disk). For here I changed to <code>MEMORY_AND_DISK_SER_2</code> (more details can be referred to <a href=\"https://stackoverflow.com/questions/30520428/what-is-the-difference-between-memory-only-and-memory-and-disk-caching-level-in\">here</a>). The different is that, unlike <strong>cache</strong> only, the checkpoints doesn’t save DAG with all the parents of RDDs; instead, they only save particular RDDs and remain for a longer time than cache. The time of persistance is strictly related to the executed computation and ends with the end of the spark application. To apply the checkpoint machanism, you just simply need to set the checkpoint directory when you are creating the <strong>StreamingContext</strong></p>\n<pre><code class=\"scala\">def createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)   \n     val ssc = new StreamingContext(sparkConf, Seconds(1))\n     ...\n     ssc.checkpoint(CHECK_POINT_DIR)\n     ssc\n&#125;\n</code></pre>\n<p>and before an action is operated on RDD:</p>\n<pre><code class=\"scala\">    sRDD.checkpoint()\n    sRDD.foreachPartition &#123; partitionOfRecords =&gt; &#123;     \n        ...\n        &#125;\n    &#125;\n</code></pre>\n<p>and <code>sRDD.isCheckpointed()</code> will return <strong>true</strong>. For cleaning, the RDDs stored in cache will be cleaned with all other memory after the whole spark application is finished or terminated; the reliable RDDs stored on disk can be cleaned manually or set<br><code>spark.cleaner.referenceTracking.cleanCheckpoints</code> property to be <strong>true</strong> to enable automatic cleaning. This driver recovery mechanism is sufficient to ensure zero data loss if all data was reliably store in the system. However for my circumstance, the data is read from <strong>kafka</strong> and some of the data buffered in memory could be lost. If the driver process fails, all the executors running will be killed as well, along with any data in their memory. This pushes me to look for other mechanisms which are more advanced.<br><br></p>\n<h2 id=\"Write-Ahead-Logs\"><a href=\"#Write-Ahead-Logs\" class=\"headerlink\" title=\"Write Ahead Logs\"></a>Write Ahead Logs</h2><p>Write Ahead Logs are used in database and file systems to ensure the durability of any data operations. The intention of the operation is first written down into a durable log , and then the operation is applied to the data. If the system fails in the middle of applying the operation, it can recover by reading the log and reapplying the operations it had intended to do.</p>\n<p>Spark streaming uses <strong>Receiver</strong> to read data from <strong>Kafka</strong>. They run as long-running tasks in the executors and store the revecived data in the memory of the executors. If you enable the <strong>checkpoint</strong>, the data will be checkpointed either in cache or disk <strong>in executors</strong> before porceed into the application drivers. Unlike <strong>checkpoint</strong>, applying <strong>WAL</strong> will instead backup the recevied data in an <strong>external fault-tolerant filesystem</strong>. And after the executor batches the received data and sends to the driver, <strong>WAL</strong> supports another log to store the block metadata into external filesystem before being executed.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/wal_spark.png\" alt=\"https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html\"><br>(diagram from <a href=\"https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html\">https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html</a>)<br>Spark streaming starts supporting WAL after version 1.2 and can be enabled by setting the config:</p>\n<pre><code class=\"scala\">val ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)\n                                   .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;,&quot;true&quot;)    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n&#125;\n</code></pre>\n<p>Set the spark automatically clean checkpoints to release disk memory:</p>\n<pre><code class=\"scala\">val ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)\n                                   .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;,&quot;true&quot;)\n                                   .set(&quot;spark.cleaner.referenceTracking.cleanCheckpoints&quot;, &quot;true&quot;)    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n&#125;\n\n</code></pre>\n<p>This will not clean the latest checkpoint as it is still referred to by the application to recover from possible failures. If you expect to restart the application driver if it crashed due to some errors and exactly start from where it crashed last time instead of performing the whole operation once again, you can create <strong>StreamingContext</strong> from the previous checkpoint by using the method <code>getOrCreate()</code>:</p>\n<pre><code class=\"scala\">val ssc = StreamingContext.getOrCreate(CHECK_POINT_DIR, () =&gt; createContext(...params))\n\ndef createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)\n                                   .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;,&quot;true&quot;)\n                                   .set(&quot;spark.cleaner.referenceTracking.cleanCheckpoints&quot;, &quot;true&quot;)    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n&#125;\n</code></pre>\n<p>However after I tried switching to <code>getOrCreate()</code>, I had the following exception:</p>\n<pre><code>Exception in thread &quot;main&quot; org.apache.spark.SparkException: Failed to read checkpoint from directory checkpointDir\n    at org.apache.spark.streaming.CheckpointReader$.read(Checkpoint.scala:368)\n    at org.apache.spark.streaming.StreamingContext$.getOrCreate(StreamingContext.scala:827)\n    ...\nCaused by: java.io.IOException: java.lang.ClassCastException: cannot assign instance of com.some.project$$anonfun$1 to field org.apache.spark.streaming.dstream.MappedDStream.org$apache$spark$streaming$dstream$MappedDStream$$mapFunc of type scala.Function1 in instance of org.apache.spark.streaming.dstream.MappedDStream     \n    at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1310)\n    at org.apache.spark.streaming.DStreamGraph.readObject(DStreamGraph.scala:194)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    ...\n</code></pre><p>It is because this is not the first time I use checkpoints, and there already exsists some other checkpoints in the same root directory (etc, the simple checkpoint discussed previously). Since the application tried to read from those unrelated checkpoints and expected to cast them to generate new context, it would throw such <strong>ClassCastException</strong>. This can be easily solved by deleting original checkpoints in HDFS locals (manually).</p>\n<p>WAL is an advanced checkpoint mechanism and also simple to be applied. Compared with checkpoint, it saves data into an external filesystem so that even though if the executor is terminated and the data in memory is clean-uped, data still can be recovered from the external filesystem. However. it can only recover the data which is logged in the filesystem, if the drivers fail due to some error, the executor will be terminated as well, so as the WAL writer. Then the rest incomming data will not be logged into the filesystem and hence, is not recoverable. It can be tested by calling <strong>stop</strong> to the <strong>StreamContext</strong>:</p>\n<pre><code class=\"scala\">def stop(stopSparkContext: Boolean, stopGracefully: Boolean): Unit\n</code></pre>\n<p>Once it is called, the following console log interpretes that the <strong>WAL Writer</strong> is interrupted as well:</p>\n<pre><code>ERROR ReceiverTracker: Deregistered receiver for stream 0: Stopped by driver\nWARN BlockGenerator: Cannot stop BlockGenerator as its not in the Active state [state = StoppedAll]     \nWARN BatchedWriteAheadLog: BatchedWriteAheadLog Writer queue interrupted.\n</code></pre><p>And also the data will not be recoverable across applications or Spark upgrades and hence not very reliable<br><br></p>\n<h2 id=\"Kafka-Direct-API\"><a href=\"#Kafka-Direct-API\" class=\"headerlink\" title=\"Kafka Direct API\"></a>Kafka Direct API</h2><p>This mechanism is only available when you data source is <strong>Kafka</strong>. Kafka supports a commit strategy which is able to help you manage offsets of each topics. Each offset points to a slot in a topic. When the data stored in this slot is consumed by any receiver, Kafka will be acknowledged by this consumption and moves the index to the next data slot.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/Spark-Streaming-flow-for-offsets.png\" alt=\"https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/\"><br>(diagram from <a href=\"https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/\">https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/</a>)<br>When <code>enable.auto.commit</code> is set to be true, as soon as any receiver retrieves the data from the offset datastore in Kafka (here I use Kafka to store offsets), the receiver will automatically commit, which doesn’t ensure that the data is successfully executed in the spark streaming. Therefore, we have to disbale the auto-commit when we are creating DStream from Kafka. After the data is successfully processed, we manually commit the offset to the datastore by calling the Kafka direct API:</p>\n<pre><code class=\"scala\">stream.foreachRDD &#123; rdd =&gt;\n      //get current offset\n      val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n\n      //process data\n\n      //store data in some datastore\n      DataStoreDB.push(...param)\n\n      //commit offset to kafka\n      stream.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)\n    &#125;\n  &#125;\n</code></pre>\n<p>If an error occurs at any point during the execution, the offset won;t be committed to the kafka offset store and hence the same data will be resent by kafka, which ensures that the data will be executed only once.</p>\n","site":{"data":{}},"excerpt":"<p>This is a log from my own experience in spark streaming during my work. Base on different environment and servers, the strategy may vary. For here, I am working with <strong>Kafka</strong> and Google Cloud <strong>PubSub</strong>.</p>","more":"<p></p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>I have such workflow that the spark streaming receives dataset from both Kafka and PubSub, after doing some clean up and modeling, push the data to the Cloud Datastore.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/sparkworkflow.png\" alt=\"my Workflow\"><br>It works fine when the data stream is small and reports me the expected values; however while the number of end users is growing large, especially when the data stream turns to be erratic and sometimes considerably large if end users interact frequently with our UI pages, the spark streaming will get a lot of uncertain runtime errors. Those errors are most likely caused by the finite number of workers in our cluster. Also when there are too much stream rushing over to the server, the limited memory in cache will cause failures. After we upgraded the cluster on cloud, the number of errors is significantly reduced.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/cpudiagram.png\" alt=\"CPU Utilization\"><br>But the data processed during the errors was permanently lost and cannot be recovered. The data running on spark is buffered in memory (cache) and will be cleared meanwhile a failure occurs. This is not desired since some valuable KPIs may be lost as well. To prevent such data loss, I tried different strategies.<br><br></p>\n<h2 id=\"Checkpoint\"><a href=\"#Checkpoint\" class=\"headerlink\" title=\"Checkpoint\"></a>Checkpoint</h2><p>Checkpointing is a process supported by spark streaming after version which will save RDDs in log after being checkpointed. There are two level of checkpoints: reliable and local. <strong>Reliable checkpoint</strong> ensures that the data is stored permanentlly on HDFS, S3 or other distributed filesystems. Each job on cluster will create a directory for saving checkpointed logs, which will look pretty much like the directory below:</p>\n<pre><code>├── &quot;SomeUUID&quot;\n│   └── rdd-#\n│       ├── part-timestamp1\n│       ├── .part-timestamp1.crc\n│       ├── part-timestamp2\n│       └── .part-timestamp2.crc\n</code></pre><p>Since the data stream will be replicated on disk, the performance will slow down due to file I/O. <strong>Local checkpoint</strong> privileges performance over fault-tolerance which will persist RDDs on local storage in the executors. Read or write will be faster in this case; however if a driver fails, the data not yet executed may not be recoverable. As default, the data storeage level is set to <code>MEMORY_AND_DISK</code> which saves data in cache and disk (some in cache and some in disk). For here I changed to <code>MEMORY_AND_DISK_SER_2</code> (more details can be referred to <a href=\"https://stackoverflow.com/questions/30520428/what-is-the-difference-between-memory-only-and-memory-and-disk-caching-level-in\">here</a>). The different is that, unlike <strong>cache</strong> only, the checkpoints doesn’t save DAG with all the parents of RDDs; instead, they only save particular RDDs and remain for a longer time than cache. The time of persistance is strictly related to the executed computation and ends with the end of the spark application. To apply the checkpoint machanism, you just simply need to set the checkpoint directory when you are creating the <strong>StreamingContext</strong></p>\n<pre><code class=\"scala\">def createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)   \n     val ssc = new StreamingContext(sparkConf, Seconds(1))\n     ...\n     ssc.checkpoint(CHECK_POINT_DIR)\n     ssc\n&#125;\n</code></pre>\n<p>and before an action is operated on RDD:</p>\n<pre><code class=\"scala\">    sRDD.checkpoint()\n    sRDD.foreachPartition &#123; partitionOfRecords =&gt; &#123;     \n        ...\n        &#125;\n    &#125;\n</code></pre>\n<p>and <code>sRDD.isCheckpointed()</code> will return <strong>true</strong>. For cleaning, the RDDs stored in cache will be cleaned with all other memory after the whole spark application is finished or terminated; the reliable RDDs stored on disk can be cleaned manually or set<br><code>spark.cleaner.referenceTracking.cleanCheckpoints</code> property to be <strong>true</strong> to enable automatic cleaning. This driver recovery mechanism is sufficient to ensure zero data loss if all data was reliably store in the system. However for my circumstance, the data is read from <strong>kafka</strong> and some of the data buffered in memory could be lost. If the driver process fails, all the executors running will be killed as well, along with any data in their memory. This pushes me to look for other mechanisms which are more advanced.<br><br></p>\n<h2 id=\"Write-Ahead-Logs\"><a href=\"#Write-Ahead-Logs\" class=\"headerlink\" title=\"Write Ahead Logs\"></a>Write Ahead Logs</h2><p>Write Ahead Logs are used in database and file systems to ensure the durability of any data operations. The intention of the operation is first written down into a durable log , and then the operation is applied to the data. If the system fails in the middle of applying the operation, it can recover by reading the log and reapplying the operations it had intended to do.</p>\n<p>Spark streaming uses <strong>Receiver</strong> to read data from <strong>Kafka</strong>. They run as long-running tasks in the executors and store the revecived data in the memory of the executors. If you enable the <strong>checkpoint</strong>, the data will be checkpointed either in cache or disk <strong>in executors</strong> before porceed into the application drivers. Unlike <strong>checkpoint</strong>, applying <strong>WAL</strong> will instead backup the recevied data in an <strong>external fault-tolerant filesystem</strong>. And after the executor batches the received data and sends to the driver, <strong>WAL</strong> supports another log to store the block metadata into external filesystem before being executed.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/wal_spark.png\" alt=\"https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html\"><br>(diagram from <a href=\"https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html\">https://databricks.com/blog/2015/01/15/improved-driver-fault-tolerance-and-zero-data-loss-in-spark-streaming.html</a>)<br>Spark streaming starts supporting WAL after version 1.2 and can be enabled by setting the config:</p>\n<pre><code class=\"scala\">val ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)\n                                   .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;,&quot;true&quot;)    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n&#125;\n</code></pre>\n<p>Set the spark automatically clean checkpoints to release disk memory:</p>\n<pre><code class=\"scala\">val ssc = StreamingContext.createContext(...params)\n\ndef createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)\n                                   .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;,&quot;true&quot;)\n                                   .set(&quot;spark.cleaner.referenceTracking.cleanCheckpoints&quot;, &quot;true&quot;)    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n&#125;\n\n</code></pre>\n<p>This will not clean the latest checkpoint as it is still referred to by the application to recover from possible failures. If you expect to restart the application driver if it crashed due to some errors and exactly start from where it crashed last time instead of performing the whole operation once again, you can create <strong>StreamingContext</strong> from the previous checkpoint by using the method <code>getOrCreate()</code>:</p>\n<pre><code class=\"scala\">val ssc = StreamingContext.getOrCreate(CHECK_POINT_DIR, () =&gt; createContext(...params))\n\ndef createContext(...params): StreamingContext = &#123;\n    val sparkConf = new SparkConf().setAppName(&quot;KpiAnalysis&quot;)\n                                   .set(&quot;spark.streaming.receiver.writeAheadLog.enable&quot;,&quot;true&quot;)\n                                   .set(&quot;spark.cleaner.referenceTracking.cleanCheckpoints&quot;, &quot;true&quot;)    \n    val ssc = new StreamingContext(sparkConf, Seconds(1))\n    ...\n    ssc.checkpoint(CHECK_POINT_DIR)\n    ssc\n&#125;\n</code></pre>\n<p>However after I tried switching to <code>getOrCreate()</code>, I had the following exception:</p>\n<pre><code>Exception in thread &quot;main&quot; org.apache.spark.SparkException: Failed to read checkpoint from directory checkpointDir\n    at org.apache.spark.streaming.CheckpointReader$.read(Checkpoint.scala:368)\n    at org.apache.spark.streaming.StreamingContext$.getOrCreate(StreamingContext.scala:827)\n    ...\nCaused by: java.io.IOException: java.lang.ClassCastException: cannot assign instance of com.some.project$$anonfun$1 to field org.apache.spark.streaming.dstream.MappedDStream.org$apache$spark$streaming$dstream$MappedDStream$$mapFunc of type scala.Function1 in instance of org.apache.spark.streaming.dstream.MappedDStream     \n    at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1310)\n    at org.apache.spark.streaming.DStreamGraph.readObject(DStreamGraph.scala:194)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    ...\n</code></pre><p>It is because this is not the first time I use checkpoints, and there already exsists some other checkpoints in the same root directory (etc, the simple checkpoint discussed previously). Since the application tried to read from those unrelated checkpoints and expected to cast them to generate new context, it would throw such <strong>ClassCastException</strong>. This can be easily solved by deleting original checkpoints in HDFS locals (manually).</p>\n<p>WAL is an advanced checkpoint mechanism and also simple to be applied. Compared with checkpoint, it saves data into an external filesystem so that even though if the executor is terminated and the data in memory is clean-uped, data still can be recovered from the external filesystem. However. it can only recover the data which is logged in the filesystem, if the drivers fail due to some error, the executor will be terminated as well, so as the WAL writer. Then the rest incomming data will not be logged into the filesystem and hence, is not recoverable. It can be tested by calling <strong>stop</strong> to the <strong>StreamContext</strong>:</p>\n<pre><code class=\"scala\">def stop(stopSparkContext: Boolean, stopGracefully: Boolean): Unit\n</code></pre>\n<p>Once it is called, the following console log interpretes that the <strong>WAL Writer</strong> is interrupted as well:</p>\n<pre><code>ERROR ReceiverTracker: Deregistered receiver for stream 0: Stopped by driver\nWARN BlockGenerator: Cannot stop BlockGenerator as its not in the Active state [state = StoppedAll]     \nWARN BatchedWriteAheadLog: BatchedWriteAheadLog Writer queue interrupted.\n</code></pre><p>And also the data will not be recoverable across applications or Spark upgrades and hence not very reliable<br><br></p>\n<h2 id=\"Kafka-Direct-API\"><a href=\"#Kafka-Direct-API\" class=\"headerlink\" title=\"Kafka Direct API\"></a>Kafka Direct API</h2><p>This mechanism is only available when you data source is <strong>Kafka</strong>. Kafka supports a commit strategy which is able to help you manage offsets of each topics. Each offset points to a slot in a topic. When the data stored in this slot is consumed by any receiver, Kafka will be acknowledged by this consumption and moves the index to the next data slot.<br><img src=\"/2019/05/22/Implement-Zero-Data-Loss-in-Spark-Streaming/Spark-Streaming-flow-for-offsets.png\" alt=\"https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/\"><br>(diagram from <a href=\"https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/\">https://blog.cloudera.com/blog/2017/06/offset-management-for-apache-kafka-with-apache-spark-streaming/</a>)<br>When <code>enable.auto.commit</code> is set to be true, as soon as any receiver retrieves the data from the offset datastore in Kafka (here I use Kafka to store offsets), the receiver will automatically commit, which doesn’t ensure that the data is successfully executed in the spark streaming. Therefore, we have to disbale the auto-commit when we are creating DStream from Kafka. After the data is successfully processed, we manually commit the offset to the datastore by calling the Kafka direct API:</p>\n<pre><code class=\"scala\">stream.foreachRDD &#123; rdd =&gt;\n      //get current offset\n      val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n\n      //process data\n\n      //store data in some datastore\n      DataStoreDB.push(...param)\n\n      //commit offset to kafka\n      stream.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)\n    &#125;\n  &#125;\n</code></pre>\n<p>If an error occurs at any point during the execution, the offset won;t be committed to the kafka offset store and hence the same data will be resent by kafka, which ensures that the data will be executed only once.</p>"},{"title":"LRU Cache","date":"2019-10-22T18:28:12.000Z","photos":["../images/LRU.png"],"_content":"\nThis implementation is based on **double-linked-list** and **dictionary**. Runtime: O(1)\n<!-- more -->\n\n## Init\ninitialize the linked-list with a sentinel head and tail\n![init sentinel node](LRU_init_node.png)\nAnd an empty dictionary:\n```python\ndict = { }\n```\n<br/>\n\n## Insert\n\nSuppose we have a object to insert\n```\n{ keyA: value_a }\n```\nFirstly we check out if out dictionary already contains a key named `A` (if so remove it from the linked list). Then append the new node to the tail of our linked-list\n![init sentinel node](LRU_first_insert.png)\nAfterwards, add the new object to our dictionary key by `keyA`\n```python\ndict = { keyA: valueA }\n```\n\nIf we have already constructed the follwing linked-list\n![init sentinel node](LRU_before_second_insert.png)\nThen to insert { keyA: valueA } once again (for example, the same object is used/modified again)\nWe will firstly remove it from the current linked-list and append the same node at the tail of the list\n![init sentinel node](LRU_after_second_insert.png)\n\nAfter the insertion, if the size of the list hit the maximum capacity, we need to pop the first element (which is not recently used), and assign sentinel head to the next element\n<br/>\n\n## Get\n\nCheckout if our dictionary contains the key, if not, which means the element does not exist, return -1.\nIf the key does exist, get the target node, then remove it from the linked-list and append at the tail\n<br/>\n\n## Implementation\n\n```python\nclass Node:\n    def __init__(self, k, v):\n        self.key = k\n        self.val = v\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dict = {}\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def get(self, key: int) -> int:\n        if key in self.dict:\n            node = self.dict[key]\n            self._remove(node)\n            self._append(node)\n            return node.val\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.dict:\n            self._remove(self.dict[key])\n        node = Node(key, value)\n        self._append(node)\n        self.dict[key] = node\n        if len(self.dict) > self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del self.dict[n.key]\n\n    def _remove(self, node: Node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n    def _append(self, node: Node):\n        p = self.tail.prev\n        p.next = node\n        node.prev = p\n        node.next = self.tail\n        self.tail.prev = node\n\n```\n","source":"_posts/Least-Recently-Used-LRU-Cache-Implementation.md","raw":"---\ntitle: LRU Cache\ndate: 2019-10-22 14:28:12\ntags: [LRU, Algorithm, Data Structure]\nphotos: [\"../images/LRU.png\"]\n---\n\nThis implementation is based on **double-linked-list** and **dictionary**. Runtime: O(1)\n<!-- more -->\n\n## Init\ninitialize the linked-list with a sentinel head and tail\n![init sentinel node](LRU_init_node.png)\nAnd an empty dictionary:\n```python\ndict = { }\n```\n<br/>\n\n## Insert\n\nSuppose we have a object to insert\n```\n{ keyA: value_a }\n```\nFirstly we check out if out dictionary already contains a key named `A` (if so remove it from the linked list). Then append the new node to the tail of our linked-list\n![init sentinel node](LRU_first_insert.png)\nAfterwards, add the new object to our dictionary key by `keyA`\n```python\ndict = { keyA: valueA }\n```\n\nIf we have already constructed the follwing linked-list\n![init sentinel node](LRU_before_second_insert.png)\nThen to insert { keyA: valueA } once again (for example, the same object is used/modified again)\nWe will firstly remove it from the current linked-list and append the same node at the tail of the list\n![init sentinel node](LRU_after_second_insert.png)\n\nAfter the insertion, if the size of the list hit the maximum capacity, we need to pop the first element (which is not recently used), and assign sentinel head to the next element\n<br/>\n\n## Get\n\nCheckout if our dictionary contains the key, if not, which means the element does not exist, return -1.\nIf the key does exist, get the target node, then remove it from the linked-list and append at the tail\n<br/>\n\n## Implementation\n\n```python\nclass Node:\n    def __init__(self, k, v):\n        self.key = k\n        self.val = v\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dict = {}\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def get(self, key: int) -> int:\n        if key in self.dict:\n            node = self.dict[key]\n            self._remove(node)\n            self._append(node)\n            return node.val\n        return -1\n\n    def put(self, key: int, value: int) -> None:\n        if key in self.dict:\n            self._remove(self.dict[key])\n        node = Node(key, value)\n        self._append(node)\n        self.dict[key] = node\n        if len(self.dict) > self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del self.dict[n.key]\n\n    def _remove(self, node: Node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n    def _append(self, node: Node):\n        p = self.tail.prev\n        p.next = node\n        node.prev = p\n        node.next = self.tail\n        self.tail.prev = node\n\n```\n","slug":"Least-Recently-Used-LRU-Cache-Implementation","published":1,"updated":"2021-01-07T21:13:20.369Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhw000c5opub9vegfqs","content":"<p>This implementation is based on <strong>double-linked-list</strong> and <strong>dictionary</strong>. Runtime: O(1)<br><a id=\"more\"></a></p>\n<h2 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h2><p>initialize the linked-list with a sentinel head and tail<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_init_node.png\" alt=\"init sentinel node\"><br>And an empty dictionary:</p>\n<pre><code class=\"python\">dict = &#123; &#125;\n</code></pre>\n<p><br></p>\n<h2 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h2><p>Suppose we have a object to insert</p>\n<pre><code>&#123; keyA: value_a &#125;\n</code></pre><p>Firstly we check out if out dictionary already contains a key named <code>A</code> (if so remove it from the linked list). Then append the new node to the tail of our linked-list<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_first_insert.png\" alt=\"init sentinel node\"><br>Afterwards, add the new object to our dictionary key by <code>keyA</code></p>\n<pre><code class=\"python\">dict = &#123; keyA: valueA &#125;\n</code></pre>\n<p>If we have already constructed the follwing linked-list<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_before_second_insert.png\" alt=\"init sentinel node\"><br>Then to insert { keyA: valueA } once again (for example, the same object is used/modified again)<br>We will firstly remove it from the current linked-list and append the same node at the tail of the list<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_after_second_insert.png\" alt=\"init sentinel node\"></p>\n<p>After the insertion, if the size of the list hit the maximum capacity, we need to pop the first element (which is not recently used), and assign sentinel head to the next element<br><br></p>\n<h2 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"Get\"></a>Get</h2><p>Checkout if our dictionary contains the key, if not, which means the element does not exist, return -1.<br>If the key does exist, get the target node, then remove it from the linked-list and append at the tail<br><br></p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><pre><code class=\"python\">class Node:\n    def __init__(self, k, v):\n        self.key = k\n        self.val = v\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dict = &#123;&#125;\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def get(self, key: int) -&gt; int:\n        if key in self.dict:\n            node = self.dict[key]\n            self._remove(node)\n            self._append(node)\n            return node.val\n        return -1\n\n    def put(self, key: int, value: int) -&gt; None:\n        if key in self.dict:\n            self._remove(self.dict[key])\n        node = Node(key, value)\n        self._append(node)\n        self.dict[key] = node\n        if len(self.dict) &gt; self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del self.dict[n.key]\n\n    def _remove(self, node: Node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n    def _append(self, node: Node):\n        p = self.tail.prev\n        p.next = node\n        node.prev = p\n        node.next = self.tail\n        self.tail.prev = node\n\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>This implementation is based on <strong>double-linked-list</strong> and <strong>dictionary</strong>. Runtime: O(1)<br></p>","more":"<p></p>\n<h2 id=\"Init\"><a href=\"#Init\" class=\"headerlink\" title=\"Init\"></a>Init</h2><p>initialize the linked-list with a sentinel head and tail<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_init_node.png\" alt=\"init sentinel node\"><br>And an empty dictionary:</p>\n<pre><code class=\"python\">dict = &#123; &#125;\n</code></pre>\n<p><br></p>\n<h2 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h2><p>Suppose we have a object to insert</p>\n<pre><code>&#123; keyA: value_a &#125;\n</code></pre><p>Firstly we check out if out dictionary already contains a key named <code>A</code> (if so remove it from the linked list). Then append the new node to the tail of our linked-list<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_first_insert.png\" alt=\"init sentinel node\"><br>Afterwards, add the new object to our dictionary key by <code>keyA</code></p>\n<pre><code class=\"python\">dict = &#123; keyA: valueA &#125;\n</code></pre>\n<p>If we have already constructed the follwing linked-list<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_before_second_insert.png\" alt=\"init sentinel node\"><br>Then to insert { keyA: valueA } once again (for example, the same object is used/modified again)<br>We will firstly remove it from the current linked-list and append the same node at the tail of the list<br><img src=\"/2019/10/22/Least-Recently-Used-LRU-Cache-Implementation/LRU_after_second_insert.png\" alt=\"init sentinel node\"></p>\n<p>After the insertion, if the size of the list hit the maximum capacity, we need to pop the first element (which is not recently used), and assign sentinel head to the next element<br><br></p>\n<h2 id=\"Get\"><a href=\"#Get\" class=\"headerlink\" title=\"Get\"></a>Get</h2><p>Checkout if our dictionary contains the key, if not, which means the element does not exist, return -1.<br>If the key does exist, get the target node, then remove it from the linked-list and append at the tail<br><br></p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><pre><code class=\"python\">class Node:\n    def __init__(self, k, v):\n        self.key = k\n        self.val = v\n        self.prev = None\n        self.next = None\n\nclass LRUCache:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.dict = &#123;&#125;\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def get(self, key: int) -&gt; int:\n        if key in self.dict:\n            node = self.dict[key]\n            self._remove(node)\n            self._append(node)\n            return node.val\n        return -1\n\n    def put(self, key: int, value: int) -&gt; None:\n        if key in self.dict:\n            self._remove(self.dict[key])\n        node = Node(key, value)\n        self._append(node)\n        self.dict[key] = node\n        if len(self.dict) &gt; self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del self.dict[n.key]\n\n    def _remove(self, node: Node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n    def _append(self, node: Node):\n        p = self.tail.prev\n        p.next = node\n        node.prev = p\n        node.next = self.tail\n        self.tail.prev = node\n\n</code></pre>"},{"title":"Memory Leaks in Serveral Commonly Used Programming Languages","date":"2019-05-05T19:37:22.000Z","photos":["../images/Memory-Leaks.JPG"],"_content":"Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<!-- more -->\n\nWiki's Def:\n>[**Memory leak**](https://en.wikipedia.org/wiki/Memory_leak) is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: \n- memory which is no longer needed is not released\n- an object is stored in memory but cannot be accessed by the running code\n\nWe usually encounter this issue in programming languages that don't have [**GC**](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science), for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.\n</br>\n\n## This is really common in C++\nLet's take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won't be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.\n\nWe all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function **`free()`** or **`delete[]`**. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn't ever reach the line to release memory:\n```c++\nint sample(int n) {\n    void  *ptr = malloc(16);\n    if (n)\n        return -1; //memory leak here\n    free(ptr);\n    return 0;\n}\n```\nor:\n```c++\nclass Sample {\n    public:\n        init() { int *n = new int;  throw any_exception(); }\n        ~init() { delete n; }\n    private:\n        int *n;\n};\nSample *n = new Sample; //memory leak here\n```\nThe solution to the above examples is also really simple: check control flows and **do remember to call the destructor before anywhere the procedure may exit**. Well if you want to do it in a fancy way, you can use ***smart pointer*** alternatively:\n```c++\nclass Sample {\n    public:\n        init() { n = std::make_shared<int>(new int) }\n        ~init() {}\n    private:\n        std::shared_ptr<int> n;\n};\n```\nSmart pointer helps you manage this object and if it is not referred anymore, release its memory.\n</br>\n\n## free( )/delete is not enough\nNow your program has such a concrete control flow that **free( )** or **delete** is called before all the possible drop out. That is great but still not enough. **free( )** and **delete** can **only release the memory where the pointer is currently pointing to but not the pointer itself!** The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to **NULL**, instead some random values that cannot be predicted.\n```c++\nint main() {\n    char *p = (char*) malloc(sizeof(char) * 100);\n    strcpy(p, \"hello\");\n    free(p);\n    if (p != NULL) //doesn't prevent issue\n        strcpy(p, \"world\"); // error\n}\n```\nThis pointer p is called [***dangling pointer***](https://en.wikipedia.org/wiki/Dangling_pointer) or [***wild pointer***](https://en.wikipedia.org/wiki/Dangling_pointer) and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called wild pointer, and in real life it is called [**cat**](https://en.wikipedia.org/wiki/Cat). To prevent it, we should **always set the pointer to be NULL when it is not used/the memory is released**.\n\n***Note***: when you define a pointer without setting up its initial value, that pointer will also be a **wild pointer** and has a value of some random number (which doesn't equal to **NULL**). Hence it is necessary to set the value of a pointer to be **NULL** if it cannot be asigned a value at the beginning.\n\nFor some simple pointers, they can be reasigned to **NULL** to prevent **wild pointer**, however for a pointer referring to a hierarchical object, simply setting to **NULL** cannot resolve the potential issues. For example, you are using a **`vector`** in C++ :\n```c++\nvector <string> v\nint main() {\n    for (int i=0; i<1000000; i++)\n        v.push_back(\"test\");\n    \n    cout << v.capacity() << endl;  //memory usage: 54M\n    v.clear();\n    cout << v.capacity() << endl;  //memory usage: still 54M\n}\n```\nEven though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. **`clear()`** removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as **`deque`**. To handle this, before **C++ 11**, we can swap the pointers:\n```c++\nint main() {\n    ...\n    v.clear();\n    vector<string>(v).swap(v); //new a vector with the same content and swap    \n    cout << v.capacity() << endl;  //memory usage: 0\n}\n```\nafter C++ 11, it provides function **`shrink_to_fit()`** to remove the extra allocated memory.\n</br>\n\n## GC doesn't avoid memory leaks\nIt's not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. **Java** is such language which has powerful and unruly GC that can be hardly controlled (call **`System.gc()`** doesn't certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.\n\nThere are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:\n```java\npublic class Sample {\n    Object object;\n    public void anymethod(){\n        object = new Object();\n        ...\n    }\n    ...\n}\n```\nIf ***object*** is only used inside ***anymethod( )***, then after stack pops ***anymethod( )***, the lifecycle of ***object*** should also be ended. But for here, because class ***Sample*** is still proceeding and keeps the reference of ***object***, ***object*** cannot be collected by GC and hence leaks the memory. The solution will be either init ***object*** inside ***anymethod( )*** (as a local varible) or set ***object*** to be ***null*** after ***anymethod*** is finished.\n\nAnother case is the use of **`HashSet`**. ***HashSet*** is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the ***HashSet***, we need to override the method **`HashCode()`** so that the same object has the same hash vaule and being stored in the same place in ***HashSet***. However, if we push something into the ***HashSet*** and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our ***HashSet*** to do some operations, for example delete this object from the ***HashSet***, this object might not be found in the set and hence cannot be deleted:\n```java\n    HashSet<Obejct> set = new HashSet<Object>();\n    Object something = new Object();\n    set.add(something);\n    something.doSomethingChanges();\n    set.contains(something);  //this may return false\n    set.remove(something);  //'something' cannot be removed if the previous line returns false      \n```\n</br>\n\n## Python\n\n","source":"_posts/Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages.md","raw":"---\ntitle: Memory Leaks in Serveral Commonly Used Programming Languages\ndate: 2019-05-05 15:37:22\ntags: [C++, Java, Python, NodeJS]\nphotos: [\"../images/Memory-Leaks.JPG\"]\n---\nUsually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<!-- more -->\n\nWiki's Def:\n>[**Memory leak**](https://en.wikipedia.org/wiki/Memory_leak) is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: \n- memory which is no longer needed is not released\n- an object is stored in memory but cannot be accessed by the running code\n\nWe usually encounter this issue in programming languages that don't have [**GC**](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science), for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.\n</br>\n\n## This is really common in C++\nLet's take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won't be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.\n\nWe all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function **`free()`** or **`delete[]`**. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn't ever reach the line to release memory:\n```c++\nint sample(int n) {\n    void  *ptr = malloc(16);\n    if (n)\n        return -1; //memory leak here\n    free(ptr);\n    return 0;\n}\n```\nor:\n```c++\nclass Sample {\n    public:\n        init() { int *n = new int;  throw any_exception(); }\n        ~init() { delete n; }\n    private:\n        int *n;\n};\nSample *n = new Sample; //memory leak here\n```\nThe solution to the above examples is also really simple: check control flows and **do remember to call the destructor before anywhere the procedure may exit**. Well if you want to do it in a fancy way, you can use ***smart pointer*** alternatively:\n```c++\nclass Sample {\n    public:\n        init() { n = std::make_shared<int>(new int) }\n        ~init() {}\n    private:\n        std::shared_ptr<int> n;\n};\n```\nSmart pointer helps you manage this object and if it is not referred anymore, release its memory.\n</br>\n\n## free( )/delete is not enough\nNow your program has such a concrete control flow that **free( )** or **delete** is called before all the possible drop out. That is great but still not enough. **free( )** and **delete** can **only release the memory where the pointer is currently pointing to but not the pointer itself!** The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to **NULL**, instead some random values that cannot be predicted.\n```c++\nint main() {\n    char *p = (char*) malloc(sizeof(char) * 100);\n    strcpy(p, \"hello\");\n    free(p);\n    if (p != NULL) //doesn't prevent issue\n        strcpy(p, \"world\"); // error\n}\n```\nThis pointer p is called [***dangling pointer***](https://en.wikipedia.org/wiki/Dangling_pointer) or [***wild pointer***](https://en.wikipedia.org/wiki/Dangling_pointer) and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called wild pointer, and in real life it is called [**cat**](https://en.wikipedia.org/wiki/Cat). To prevent it, we should **always set the pointer to be NULL when it is not used/the memory is released**.\n\n***Note***: when you define a pointer without setting up its initial value, that pointer will also be a **wild pointer** and has a value of some random number (which doesn't equal to **NULL**). Hence it is necessary to set the value of a pointer to be **NULL** if it cannot be asigned a value at the beginning.\n\nFor some simple pointers, they can be reasigned to **NULL** to prevent **wild pointer**, however for a pointer referring to a hierarchical object, simply setting to **NULL** cannot resolve the potential issues. For example, you are using a **`vector`** in C++ :\n```c++\nvector <string> v\nint main() {\n    for (int i=0; i<1000000; i++)\n        v.push_back(\"test\");\n    \n    cout << v.capacity() << endl;  //memory usage: 54M\n    v.clear();\n    cout << v.capacity() << endl;  //memory usage: still 54M\n}\n```\nEven though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. **`clear()`** removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as **`deque`**. To handle this, before **C++ 11**, we can swap the pointers:\n```c++\nint main() {\n    ...\n    v.clear();\n    vector<string>(v).swap(v); //new a vector with the same content and swap    \n    cout << v.capacity() << endl;  //memory usage: 0\n}\n```\nafter C++ 11, it provides function **`shrink_to_fit()`** to remove the extra allocated memory.\n</br>\n\n## GC doesn't avoid memory leaks\nIt's not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. **Java** is such language which has powerful and unruly GC that can be hardly controlled (call **`System.gc()`** doesn't certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.\n\nThere are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:\n```java\npublic class Sample {\n    Object object;\n    public void anymethod(){\n        object = new Object();\n        ...\n    }\n    ...\n}\n```\nIf ***object*** is only used inside ***anymethod( )***, then after stack pops ***anymethod( )***, the lifecycle of ***object*** should also be ended. But for here, because class ***Sample*** is still proceeding and keeps the reference of ***object***, ***object*** cannot be collected by GC and hence leaks the memory. The solution will be either init ***object*** inside ***anymethod( )*** (as a local varible) or set ***object*** to be ***null*** after ***anymethod*** is finished.\n\nAnother case is the use of **`HashSet`**. ***HashSet*** is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the ***HashSet***, we need to override the method **`HashCode()`** so that the same object has the same hash vaule and being stored in the same place in ***HashSet***. However, if we push something into the ***HashSet*** and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our ***HashSet*** to do some operations, for example delete this object from the ***HashSet***, this object might not be found in the set and hence cannot be deleted:\n```java\n    HashSet<Obejct> set = new HashSet<Object>();\n    Object something = new Object();\n    set.add(something);\n    something.doSomethingChanges();\n    set.contains(something);  //this may return false\n    set.remove(something);  //'something' cannot be removed if the previous line returns false      \n```\n</br>\n\n## Python\n\n","slug":"Memory-Leak-in-Serveral-Commonly-Used-Programming-Languages","published":1,"updated":"2021-01-07T21:13:20.372Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhy000d5opub7bo7mgg","content":"<p>Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.<a id=\"more\"></a></p>\n<p>Wiki’s Def:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Memory_leak\"><strong>Memory leak</strong></a> is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: </p>\n<ul>\n<li>memory which is no longer needed is not released</li>\n<li>an object is stored in memory but cannot be accessed by the running code</li>\n</ul>\n</blockquote>\n<p>We usually encounter this issue in programming languages that don’t have <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science\"><strong>GC</strong></a>, for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.<br><br></p>\n<h2 id=\"This-is-really-common-in-C\"><a href=\"#This-is-really-common-in-C\" class=\"headerlink\" title=\"This is really common in C++\"></a>This is really common in C++</h2><p>Let’s take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won’t be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.</p>\n<p>We all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function <strong><code>free()</code></strong> or <strong><code>delete[]</code></strong>. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn’t ever reach the line to release memory:</p>\n<pre><code class=\"c++\">int sample(int n) &#123;\n    void  *ptr = malloc(16);\n    if (n)\n        return -1; //memory leak here\n    free(ptr);\n    return 0;\n&#125;\n</code></pre>\n<p>or:</p>\n<pre><code class=\"c++\">class Sample &#123;\n    public:\n        init() &#123; int *n = new int;  throw any_exception(); &#125;\n        ~init() &#123; delete n; &#125;\n    private:\n        int *n;\n&#125;;\nSample *n = new Sample; //memory leak here\n</code></pre>\n<p>The solution to the above examples is also really simple: check control flows and <strong>do remember to call the destructor before anywhere the procedure may exit</strong>. Well if you want to do it in a fancy way, you can use <strong><em>smart pointer</em></strong> alternatively:</p>\n<pre><code class=\"c++\">class Sample &#123;\n    public:\n        init() &#123; n = std::make_shared&lt;int&gt;(new int) &#125;\n        ~init() &#123;&#125;\n    private:\n        std::shared_ptr&lt;int&gt; n;\n&#125;;\n</code></pre>\n<p>Smart pointer helps you manage this object and if it is not referred anymore, release its memory.<br><br></p>\n<h2 id=\"free-delete-is-not-enough\"><a href=\"#free-delete-is-not-enough\" class=\"headerlink\" title=\"free( )/delete is not enough\"></a>free( )/delete is not enough</h2><p>Now your program has such a concrete control flow that <strong>free( )</strong> or <strong>delete</strong> is called before all the possible drop out. That is great but still not enough. <strong>free( )</strong> and <strong>delete</strong> can <strong>only release the memory where the pointer is currently pointing to but not the pointer itself!</strong> The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to <strong>NULL</strong>, instead some random values that cannot be predicted.</p>\n<pre><code class=\"c++\">int main() &#123;\n    char *p = (char*) malloc(sizeof(char) * 100);\n    strcpy(p, &quot;hello&quot;);\n    free(p);\n    if (p != NULL) //doesn&#39;t prevent issue\n        strcpy(p, &quot;world&quot;); // error\n&#125;\n</code></pre>\n<p>This pointer p is called <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\"><strong><em>dangling pointer</em></strong></a> or <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\"><strong><em>wild pointer</em></strong></a> and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called wild pointer, and in real life it is called <a href=\"https://en.wikipedia.org/wiki/Cat\"><strong>cat</strong></a>. To prevent it, we should <strong>always set the pointer to be NULL when it is not used/the memory is released</strong>.</p>\n<p><strong><em>Note</em></strong>: when you define a pointer without setting up its initial value, that pointer will also be a <strong>wild pointer</strong> and has a value of some random number (which doesn’t equal to <strong>NULL</strong>). Hence it is necessary to set the value of a pointer to be <strong>NULL</strong> if it cannot be asigned a value at the beginning.</p>\n<p>For some simple pointers, they can be reasigned to <strong>NULL</strong> to prevent <strong>wild pointer</strong>, however for a pointer referring to a hierarchical object, simply setting to <strong>NULL</strong> cannot resolve the potential issues. For example, you are using a <strong><code>vector</code></strong> in C++ :</p>\n<pre><code class=\"c++\">vector &lt;string&gt; v\nint main() &#123;\n    for (int i=0; i&lt;1000000; i++)\n        v.push_back(&quot;test&quot;);\n\n    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: 54M\n    v.clear();\n    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: still 54M\n&#125;\n</code></pre>\n<p>Even though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. <strong><code>clear()</code></strong> removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as <strong><code>deque</code></strong>. To handle this, before <strong>C++ 11</strong>, we can swap the pointers:</p>\n<pre><code class=\"c++\">int main() &#123;\n    ...\n    v.clear();\n    vector&lt;string&gt;(v).swap(v); //new a vector with the same content and swap    \n    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: 0\n&#125;\n</code></pre>\n<p>after C++ 11, it provides function <strong><code>shrink_to_fit()</code></strong> to remove the extra allocated memory.<br><br></p>\n<h2 id=\"GC-doesn’t-avoid-memory-leaks\"><a href=\"#GC-doesn’t-avoid-memory-leaks\" class=\"headerlink\" title=\"GC doesn’t avoid memory leaks\"></a>GC doesn’t avoid memory leaks</h2><p>It’s not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. <strong>Java</strong> is such language which has powerful and unruly GC that can be hardly controlled (call <strong><code>System.gc()</code></strong> doesn’t certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.</p>\n<p>There are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:</p>\n<pre><code class=\"java\">public class Sample &#123;\n    Object object;\n    public void anymethod()&#123;\n        object = new Object();\n        ...\n    &#125;\n    ...\n&#125;\n</code></pre>\n<p>If <strong><em>object</em></strong> is only used inside <strong><em>anymethod( )</em></strong>, then after stack pops <strong><em>anymethod( )</em></strong>, the lifecycle of <strong><em>object</em></strong> should also be ended. But for here, because class <strong><em>Sample</em></strong> is still proceeding and keeps the reference of <strong><em>object</em></strong>, <strong><em>object</em></strong> cannot be collected by GC and hence leaks the memory. The solution will be either init <strong><em>object</em></strong> inside <strong><em>anymethod( )</em></strong> (as a local varible) or set <strong><em>object</em></strong> to be <strong><em>null</em></strong> after <strong><em>anymethod</em></strong> is finished.</p>\n<p>Another case is the use of <strong><code>HashSet</code></strong>. <strong><em>HashSet</em></strong> is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the <strong><em>HashSet</em></strong>, we need to override the method <strong><code>HashCode()</code></strong> so that the same object has the same hash vaule and being stored in the same place in <strong><em>HashSet</em></strong>. However, if we push something into the <strong><em>HashSet</em></strong> and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our <strong><em>HashSet</em></strong> to do some operations, for example delete this object from the <strong><em>HashSet</em></strong>, this object might not be found in the set and hence cannot be deleted:</p>\n<pre><code class=\"java\">    HashSet&lt;Obejct&gt; set = new HashSet&lt;Object&gt;();\n    Object something = new Object();\n    set.add(something);\n    something.doSomethingChanges();\n    set.contains(something);  //this may return false\n    set.remove(something);  //&#39;something&#39; cannot be removed if the previous line returns false      \n</code></pre>\n<p><br></p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2>","site":{"data":{}},"excerpt":"<p>Usually when we talk about memory leaks we are actually talking about the memory leaks in heap memory. When an object is initialized, it will be dynamically allocated to a piece of memory in the heap and ready to be manipulated. After we perform some operations and the whole procedure is finished, the object stored in heap should also be erased; however in the case of memory leak, that piece of memory is not released but still held in the heap, marked as occupied but no reference refers to it.</p>","more":"<p></p>\n<p>Wiki’s Def:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Memory_leak\"><strong>Memory leak</strong></a> is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that: </p>\n<ul>\n<li>memory which is no longer needed is not released</li>\n<li>an object is stored in memory but cannot be accessed by the running code</li>\n</ul>\n</blockquote>\n<p>We usually encounter this issue in programming languages that don’t have <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science\"><strong>GC</strong></a>, for example C++ and C. For such languages, we have to manage the memory by ourselves which, if not done properly, will expose the risks of memory leaks.<br><br></p>\n<h2 id=\"This-is-really-common-in-C\"><a href=\"#This-is-really-common-in-C\" class=\"headerlink\" title=\"This is really common in C++\"></a>This is really common in C++</h2><p>Let’s take a look in C++. There are literally hundreds of ways that can cause memory leaks and most of them won’t be detected during compilation and even in runtime. Only a few leaks will not have any impact on the system; however if we are running a huge application and those leaks accumulate, that will significantly reduce the real runtime performance of the whole system.</p>\n<p>We all know that when we allocate an object, we have to release the memory if this object is not used anymore. The way we release the memory is simply call the buid-in function <strong><code>free()</code></strong> or <strong><code>delete[]</code></strong>. However in C++ the procedure can exit anywhere. An exception can be thrown in the half way so that the code doesn’t ever reach the line to release memory:</p>\n<pre><code class=\"c++\">int sample(int n) &#123;\n    void  *ptr = malloc(16);\n    if (n)\n        return -1; //memory leak here\n    free(ptr);\n    return 0;\n&#125;\n</code></pre>\n<p>or:</p>\n<pre><code class=\"c++\">class Sample &#123;\n    public:\n        init() &#123; int *n = new int;  throw any_exception(); &#125;\n        ~init() &#123; delete n; &#125;\n    private:\n        int *n;\n&#125;;\nSample *n = new Sample; //memory leak here\n</code></pre>\n<p>The solution to the above examples is also really simple: check control flows and <strong>do remember to call the destructor before anywhere the procedure may exit</strong>. Well if you want to do it in a fancy way, you can use <strong><em>smart pointer</em></strong> alternatively:</p>\n<pre><code class=\"c++\">class Sample &#123;\n    public:\n        init() &#123; n = std::make_shared&lt;int&gt;(new int) &#125;\n        ~init() &#123;&#125;\n    private:\n        std::shared_ptr&lt;int&gt; n;\n&#125;;\n</code></pre>\n<p>Smart pointer helps you manage this object and if it is not referred anymore, release its memory.<br><br></p>\n<h2 id=\"free-delete-is-not-enough\"><a href=\"#free-delete-is-not-enough\" class=\"headerlink\" title=\"free( )/delete is not enough\"></a>free( )/delete is not enough</h2><p>Now your program has such a concrete control flow that <strong>free( )</strong> or <strong>delete</strong> is called before all the possible drop out. That is great but still not enough. <strong>free( )</strong> and <strong>delete</strong> can <strong>only release the memory where the pointer is currently pointing to but not the pointer itself!</strong> The pointer will still point to the original memory address but the content has been already removed. In this circumstance, the value of the pointer does not equal to <strong>NULL</strong>, instead some random values that cannot be predicted.</p>\n<pre><code class=\"c++\">int main() &#123;\n    char *p = (char*) malloc(sizeof(char) * 100);\n    strcpy(p, &quot;hello&quot;);\n    free(p);\n    if (p != NULL) //doesn&#39;t prevent issue\n        strcpy(p, &quot;world&quot;); // error\n&#125;\n</code></pre>\n<p>This pointer p is called <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\"><strong><em>dangling pointer</em></strong></a> or <a href=\"https://en.wikipedia.org/wiki/Dangling_pointer\"><strong><em>wild pointer</em></strong></a> and will only be erased after the whole procedure is finished or terminated. The wild pointer is really risky because of its random behavior. Imagine there is something in your room that sometimes can be observed sometimes cannot, randomly breaks your stuff but never leaves footprint. In programming it is called wild pointer, and in real life it is called <a href=\"https://en.wikipedia.org/wiki/Cat\"><strong>cat</strong></a>. To prevent it, we should <strong>always set the pointer to be NULL when it is not used/the memory is released</strong>.</p>\n<p><strong><em>Note</em></strong>: when you define a pointer without setting up its initial value, that pointer will also be a <strong>wild pointer</strong> and has a value of some random number (which doesn’t equal to <strong>NULL</strong>). Hence it is necessary to set the value of a pointer to be <strong>NULL</strong> if it cannot be asigned a value at the beginning.</p>\n<p>For some simple pointers, they can be reasigned to <strong>NULL</strong> to prevent <strong>wild pointer</strong>, however for a pointer referring to a hierarchical object, simply setting to <strong>NULL</strong> cannot resolve the potential issues. For example, you are using a <strong><code>vector</code></strong> in C++ :</p>\n<pre><code class=\"c++\">vector &lt;string&gt; v\nint main() &#123;\n    for (int i=0; i&lt;1000000; i++)\n        v.push_back(&quot;test&quot;);\n\n    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: 54M\n    v.clear();\n    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: still 54M\n&#125;\n</code></pre>\n<p>Even though we have cleared the vector and all its elements were indeed released, the capacity of the vector is still unchanged. <strong><code>clear()</code></strong> removed all its element but cannot shrink the size of the container. The same thing happens to other containers such as <strong><code>deque</code></strong>. To handle this, before <strong>C++ 11</strong>, we can swap the pointers:</p>\n<pre><code class=\"c++\">int main() &#123;\n    ...\n    v.clear();\n    vector&lt;string&gt;(v).swap(v); //new a vector with the same content and swap    \n    cout &lt;&lt; v.capacity() &lt;&lt; endl;  //memory usage: 0\n&#125;\n</code></pre>\n<p>after C++ 11, it provides function <strong><code>shrink_to_fit()</code></strong> to remove the extra allocated memory.<br><br></p>\n<h2 id=\"GC-doesn’t-avoid-memory-leaks\"><a href=\"#GC-doesn’t-avoid-memory-leaks\" class=\"headerlink\" title=\"GC doesn’t avoid memory leaks\"></a>GC doesn’t avoid memory leaks</h2><p>It’s not suprising that GC can prevent most cases of memory leaks because it is runnig in an individual thread, checking the memory regularly and removing the unreferred objects. It is so powerful that porgrammers rarely pay attention to memory management and be aware of the memory leaks. <strong>Java</strong> is such language which has powerful and unruly GC that can be hardly controlled (call <strong><code>System.gc()</code></strong> doesn’t certainly invoke GC). It helps to manage the memory in jvm, but it cannot avoid memory leaks.</p>\n<p>There are mainly two cases that can lead to memory leaks in Java. One is the object which has a longer lifecycle keeps a reference to another object which has a shorter lifecycle:</p>\n<pre><code class=\"java\">public class Sample &#123;\n    Object object;\n    public void anymethod()&#123;\n        object = new Object();\n        ...\n    &#125;\n    ...\n&#125;\n</code></pre>\n<p>If <strong><em>object</em></strong> is only used inside <strong><em>anymethod( )</em></strong>, then after stack pops <strong><em>anymethod( )</em></strong>, the lifecycle of <strong><em>object</em></strong> should also be ended. But for here, because class <strong><em>Sample</em></strong> is still proceeding and keeps the reference of <strong><em>object</em></strong>, <strong><em>object</em></strong> cannot be collected by GC and hence leaks the memory. The solution will be either init <strong><em>object</em></strong> inside <strong><em>anymethod( )</em></strong> (as a local varible) or set <strong><em>object</em></strong> to be <strong><em>null</em></strong> after <strong><em>anymethod</em></strong> is finished.</p>\n<p>Another case is the use of <strong><code>HashSet</code></strong>. <strong><em>HashSet</em></strong> is the implementation of hash-table and it stores elements according to their different hash values. In order to push and withdraw the same object in the <strong><em>HashSet</em></strong>, we need to override the method <strong><code>HashCode()</code></strong> so that the same object has the same hash vaule and being stored in the same place in <strong><em>HashSet</em></strong>. However, if we push something into the <strong><em>HashSet</em></strong> and then change some properties of this object (those properties are most likely to be used to calculate the hashcode), the hashcode of this object may vary and when we refer this object back to our <strong><em>HashSet</em></strong> to do some operations, for example delete this object from the <strong><em>HashSet</em></strong>, this object might not be found in the set and hence cannot be deleted:</p>\n<pre><code class=\"java\">    HashSet&lt;Obejct&gt; set = new HashSet&lt;Object&gt;();\n    Object something = new Object();\n    set.add(something);\n    something.doSomethingChanges();\n    set.contains(something);  //this may return false\n    set.remove(something);  //&#39;something&#39; cannot be removed if the previous line returns false      \n</code></pre>\n<p><br></p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2>"},{"title":"Min Heap","date":"2019-10-23T18:47:16.000Z","photos":["../images/Min_Heap.png"],"_content":"\nThis is a python implementation of min-heap. It takes runtime of **O(n)** to build/heapify and **O(lgn)** for each of the operation (push or pop).\n<!-- more -->\n<br/>\n\n## Heap Queue\n\nWe use a complete binary tree to represent our heap. A complete binary tree can be stored in an array with list[parent] being the parent node of two children list[parent \\* 2] and list[parent \\* 2 + 1]\n![Min Heap in List](Min_Heap_List.png)\n\n<br/>\n\n## <heapq.py> Implementation\n\n**heapq** is a python library provides an implementation of min heap, also known as the priority queue. This implementation uses zero-based indexing (the first element stored in heapq[0]). A full documentation can be referred [here](https://docs.python.org/2/library/heapq.html)\n\nWe will mainly use **heappush** and **heappop** to create our own wrapper.\n\n> **heapq.heappush(heap, item)**\n> Push the value item onto the heap, maintaining the heap invariant.\n\n> **heapq.heappop(heap)**\n> Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].\n\n```python\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self._heap = []\n\n    def __len__(self):\n        return len(self._heap)\n\n    def push(self, priority, item):\n        \"\"\"\n        Push an item with priority into the heap.\n        Priority 0 is the highest.\n        \"\"\"\n        assert priority >= 0\n        heapq.heappush(self._heap, (priority, item))\n\n    def pop():\n        \"\"\"\n        Returns the item with lowest priority\n        \"\"\"\n        return heapq.heappop(self._heap)[1] # (priority, item)[1] == item\n\n```\n\n<br/>\n\n## Raw Implementation\n\nWe maintain the heap in a index-one-based list (always keep heap[0] to be None). For all elements in the heap, heap[parent] will ideally have two children on heap[parent \\* 2] and heap[parent \\* 2 + 1]. Besides, in order to maintain the heap to be a complete binary tree, we should always insert to the end of the list and do some procedures to rearrange the new element to a proper place in our heap.\n\nFor the insertion, we will always append to the list. Afterwards, bubble up the new element. Start from the last element (which is the newly inserted one), compare its value with its parent (index divided by two), if less than its parent, swap parent and child until its value is no longer less than its parent or hit the root of the heap.\n![Insert in Min Heap](Min_Heap_Insert.png)\n\nWhen calling pop, we pop heap[1], which is the minimum value out of the heap, replace heap[1] with the last element of the heap to maintain a complete binary tree. Afterwards, sink down the new root element to a proper palce in the heap. Precisely, compare the value of the root (previously the last element) and two of its child, if any of them is less than the root value, swap root and that child. Keeping doing this until none of its two child is less than itself or reach the leaf of the tree.\n![Pop in Min Heap](Min_Heap_Pop.png)\n\nBelow is a complete implementation\n\n```python\nclass MinHeap:\n    def __init__(self):\n        \"\"\"\n        Init with index-one-based list\n        \"\"\"\n        self._heap = [None]\n\n    def __len__(self):\n        return len(self._heap) - 1\n\n    def _swap(self, t1, t2):\n        self._heap[t1], self._heap[t2] = self._heap[t2], self._heap[t1]\n\n    def _up_heap(self, index):\n        \"\"\"\n        Bubble up the inserted element to the proper place\n        \"\"\"\n        while index > 1:\n            parent = index // 2\n            if self._heap[parent] > self._heap[index]:\n                self._swap(parent, index)\n            index = parent\n\n    def _down_heap(self, index):\n        \"\"\"\n        Sink down the root element\n        \"\"\"\n        length = len(self._heap)\n        while index * 2 < length:\n            child = index * 2\n            # compare two children, assign target child to be the smaller one\n            if child + 1 < length and self._heap[child+1] < self._heap[child]:      \n                child += 1\n            if self._heap[child] < self._heap[index]:\n                self._swap(child, index)\n            index = child\n\n    def empty():\n        return len(self._heap) == 1\n\n    def push(self, value):\n        \"\"\"\n        Push a new element at the tail of the heap\n        And bubble up\n        \"\"\"\n        if not value:\n            raise TypeError('\"value\" cannot be of NoneType')\n        self._heap.append(value)\n        self._up_heap(len(self._heap) - 1)\n    \n    def pop(self):\n        \"\"\"\n        Pop the root element, which is the minimum value of the heap\n        Assign the last element from the list to be the new root\n        Then sink down\n        \"\"\"\n        if leb(self._heap) <= 1:\n            return None\n        result = self._heap[1]\n        last = self._heap.pop(-1)\n        if len(self._heap) > 1:\n            self._heap[1] = last\n            self._down_heap(1)\n        return result\n    \n    def peak(self):\n        if len(self._heap) > 1:\n            return self._heap[1]\n        return None\n\n```\n","source":"_posts/Min-Heap-Python-Implementation.md","raw":"---\ntitle: Min Heap\ndate: 2019-10-23 14:47:16\ntags: [Min Heap, Algorithm, Data Structure]\nphotos: [\"../images/Min_Heap.png\"]\n---\n\nThis is a python implementation of min-heap. It takes runtime of **O(n)** to build/heapify and **O(lgn)** for each of the operation (push or pop).\n<!-- more -->\n<br/>\n\n## Heap Queue\n\nWe use a complete binary tree to represent our heap. A complete binary tree can be stored in an array with list[parent] being the parent node of two children list[parent \\* 2] and list[parent \\* 2 + 1]\n![Min Heap in List](Min_Heap_List.png)\n\n<br/>\n\n## <heapq.py> Implementation\n\n**heapq** is a python library provides an implementation of min heap, also known as the priority queue. This implementation uses zero-based indexing (the first element stored in heapq[0]). A full documentation can be referred [here](https://docs.python.org/2/library/heapq.html)\n\nWe will mainly use **heappush** and **heappop** to create our own wrapper.\n\n> **heapq.heappush(heap, item)**\n> Push the value item onto the heap, maintaining the heap invariant.\n\n> **heapq.heappop(heap)**\n> Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].\n\n```python\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self._heap = []\n\n    def __len__(self):\n        return len(self._heap)\n\n    def push(self, priority, item):\n        \"\"\"\n        Push an item with priority into the heap.\n        Priority 0 is the highest.\n        \"\"\"\n        assert priority >= 0\n        heapq.heappush(self._heap, (priority, item))\n\n    def pop():\n        \"\"\"\n        Returns the item with lowest priority\n        \"\"\"\n        return heapq.heappop(self._heap)[1] # (priority, item)[1] == item\n\n```\n\n<br/>\n\n## Raw Implementation\n\nWe maintain the heap in a index-one-based list (always keep heap[0] to be None). For all elements in the heap, heap[parent] will ideally have two children on heap[parent \\* 2] and heap[parent \\* 2 + 1]. Besides, in order to maintain the heap to be a complete binary tree, we should always insert to the end of the list and do some procedures to rearrange the new element to a proper place in our heap.\n\nFor the insertion, we will always append to the list. Afterwards, bubble up the new element. Start from the last element (which is the newly inserted one), compare its value with its parent (index divided by two), if less than its parent, swap parent and child until its value is no longer less than its parent or hit the root of the heap.\n![Insert in Min Heap](Min_Heap_Insert.png)\n\nWhen calling pop, we pop heap[1], which is the minimum value out of the heap, replace heap[1] with the last element of the heap to maintain a complete binary tree. Afterwards, sink down the new root element to a proper palce in the heap. Precisely, compare the value of the root (previously the last element) and two of its child, if any of them is less than the root value, swap root and that child. Keeping doing this until none of its two child is less than itself or reach the leaf of the tree.\n![Pop in Min Heap](Min_Heap_Pop.png)\n\nBelow is a complete implementation\n\n```python\nclass MinHeap:\n    def __init__(self):\n        \"\"\"\n        Init with index-one-based list\n        \"\"\"\n        self._heap = [None]\n\n    def __len__(self):\n        return len(self._heap) - 1\n\n    def _swap(self, t1, t2):\n        self._heap[t1], self._heap[t2] = self._heap[t2], self._heap[t1]\n\n    def _up_heap(self, index):\n        \"\"\"\n        Bubble up the inserted element to the proper place\n        \"\"\"\n        while index > 1:\n            parent = index // 2\n            if self._heap[parent] > self._heap[index]:\n                self._swap(parent, index)\n            index = parent\n\n    def _down_heap(self, index):\n        \"\"\"\n        Sink down the root element\n        \"\"\"\n        length = len(self._heap)\n        while index * 2 < length:\n            child = index * 2\n            # compare two children, assign target child to be the smaller one\n            if child + 1 < length and self._heap[child+1] < self._heap[child]:      \n                child += 1\n            if self._heap[child] < self._heap[index]:\n                self._swap(child, index)\n            index = child\n\n    def empty():\n        return len(self._heap) == 1\n\n    def push(self, value):\n        \"\"\"\n        Push a new element at the tail of the heap\n        And bubble up\n        \"\"\"\n        if not value:\n            raise TypeError('\"value\" cannot be of NoneType')\n        self._heap.append(value)\n        self._up_heap(len(self._heap) - 1)\n    \n    def pop(self):\n        \"\"\"\n        Pop the root element, which is the minimum value of the heap\n        Assign the last element from the list to be the new root\n        Then sink down\n        \"\"\"\n        if leb(self._heap) <= 1:\n            return None\n        result = self._heap[1]\n        last = self._heap.pop(-1)\n        if len(self._heap) > 1:\n            self._heap[1] = last\n            self._down_heap(1)\n        return result\n    \n    def peak(self):\n        if len(self._heap) > 1:\n            return self._heap[1]\n        return None\n\n```\n","slug":"Min-Heap-Python-Implementation","published":1,"updated":"2021-01-07T21:13:20.373Z","comments":1,"layout":"post","link":"","_id":"ckjnncqhz000f5opu616w4mzu","content":"<p>This is a python implementation of min-heap. It takes runtime of <strong>O(n)</strong> to build/heapify and <strong>O(lgn)</strong> for each of the operation (push or pop).<br><a id=\"more\"></a><br><br></p>\n<h2 id=\"Heap-Queue\"><a href=\"#Heap-Queue\" class=\"headerlink\" title=\"Heap Queue\"></a>Heap Queue</h2><p>We use a complete binary tree to represent our heap. A complete binary tree can be stored in an array with list[parent] being the parent node of two children list[parent * 2] and list[parent * 2 + 1]<br><img src=\"/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_List.png\" alt=\"Min Heap in List\"></p>\n<p><br></p>\n<h2 id=\"lt-heapq-py-gt-Implementation\"><a href=\"#lt-heapq-py-gt-Implementation\" class=\"headerlink\" title=\"&lt;heapq.py&gt; Implementation\"></a>&lt;heapq.py&gt; Implementation</h2><p><strong>heapq</strong> is a python library provides an implementation of min heap, also known as the priority queue. This implementation uses zero-based indexing (the first element stored in heapq[0]). A full documentation can be referred <a href=\"https://docs.python.org/2/library/heapq.html\">here</a></p>\n<p>We will mainly use <strong>heappush</strong> and <strong>heappop</strong> to create our own wrapper.</p>\n<blockquote>\n<p><strong>heapq.heappush(heap, item)</strong><br>Push the value item onto the heap, maintaining the heap invariant.</p>\n</blockquote>\n<blockquote>\n<p><strong>heapq.heappop(heap)</strong><br>Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].</p>\n</blockquote>\n<pre><code class=\"python\">import heapq\n\nclass MinHeap:\n    def __init__(self):\n        self._heap = []\n\n    def __len__(self):\n        return len(self._heap)\n\n    def push(self, priority, item):\n        &quot;&quot;&quot;\n        Push an item with priority into the heap.\n        Priority 0 is the highest.\n        &quot;&quot;&quot;\n        assert priority &gt;= 0\n        heapq.heappush(self._heap, (priority, item))\n\n    def pop():\n        &quot;&quot;&quot;\n        Returns the item with lowest priority\n        &quot;&quot;&quot;\n        return heapq.heappop(self._heap)[1] # (priority, item)[1] == item\n\n</code></pre>\n<p><br></p>\n<h2 id=\"Raw-Implementation\"><a href=\"#Raw-Implementation\" class=\"headerlink\" title=\"Raw Implementation\"></a>Raw Implementation</h2><p>We maintain the heap in a index-one-based list (always keep heap[0] to be None). For all elements in the heap, heap[parent] will ideally have two children on heap[parent * 2] and heap[parent * 2 + 1]. Besides, in order to maintain the heap to be a complete binary tree, we should always insert to the end of the list and do some procedures to rearrange the new element to a proper place in our heap.</p>\n<p>For the insertion, we will always append to the list. Afterwards, bubble up the new element. Start from the last element (which is the newly inserted one), compare its value with its parent (index divided by two), if less than its parent, swap parent and child until its value is no longer less than its parent or hit the root of the heap.<br><img src=\"/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_Insert.png\" alt=\"Insert in Min Heap\"></p>\n<p>When calling pop, we pop heap[1], which is the minimum value out of the heap, replace heap[1] with the last element of the heap to maintain a complete binary tree. Afterwards, sink down the new root element to a proper palce in the heap. Precisely, compare the value of the root (previously the last element) and two of its child, if any of them is less than the root value, swap root and that child. Keeping doing this until none of its two child is less than itself or reach the leaf of the tree.<br><img src=\"/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_Pop.png\" alt=\"Pop in Min Heap\"></p>\n<p>Below is a complete implementation</p>\n<pre><code class=\"python\">class MinHeap:\n    def __init__(self):\n        &quot;&quot;&quot;\n        Init with index-one-based list\n        &quot;&quot;&quot;\n        self._heap = [None]\n\n    def __len__(self):\n        return len(self._heap) - 1\n\n    def _swap(self, t1, t2):\n        self._heap[t1], self._heap[t2] = self._heap[t2], self._heap[t1]\n\n    def _up_heap(self, index):\n        &quot;&quot;&quot;\n        Bubble up the inserted element to the proper place\n        &quot;&quot;&quot;\n        while index &gt; 1:\n            parent = index // 2\n            if self._heap[parent] &gt; self._heap[index]:\n                self._swap(parent, index)\n            index = parent\n\n    def _down_heap(self, index):\n        &quot;&quot;&quot;\n        Sink down the root element\n        &quot;&quot;&quot;\n        length = len(self._heap)\n        while index * 2 &lt; length:\n            child = index * 2\n            # compare two children, assign target child to be the smaller one\n            if child + 1 &lt; length and self._heap[child+1] &lt; self._heap[child]:      \n                child += 1\n            if self._heap[child] &lt; self._heap[index]:\n                self._swap(child, index)\n            index = child\n\n    def empty():\n        return len(self._heap) == 1\n\n    def push(self, value):\n        &quot;&quot;&quot;\n        Push a new element at the tail of the heap\n        And bubble up\n        &quot;&quot;&quot;\n        if not value:\n            raise TypeError(&#39;&quot;value&quot; cannot be of NoneType&#39;)\n        self._heap.append(value)\n        self._up_heap(len(self._heap) - 1)\n\n    def pop(self):\n        &quot;&quot;&quot;\n        Pop the root element, which is the minimum value of the heap\n        Assign the last element from the list to be the new root\n        Then sink down\n        &quot;&quot;&quot;\n        if leb(self._heap) &lt;= 1:\n            return None\n        result = self._heap[1]\n        last = self._heap.pop(-1)\n        if len(self._heap) &gt; 1:\n            self._heap[1] = last\n            self._down_heap(1)\n        return result\n\n    def peak(self):\n        if len(self._heap) &gt; 1:\n            return self._heap[1]\n        return None\n\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>This is a python implementation of min-heap. It takes runtime of <strong>O(n)</strong> to build/heapify and <strong>O(lgn)</strong> for each of the operation (push or pop).<br></p>","more":"<br><br><p></p>\n<h2 id=\"Heap-Queue\"><a href=\"#Heap-Queue\" class=\"headerlink\" title=\"Heap Queue\"></a>Heap Queue</h2><p>We use a complete binary tree to represent our heap. A complete binary tree can be stored in an array with list[parent] being the parent node of two children list[parent * 2] and list[parent * 2 + 1]<br><img src=\"/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_List.png\" alt=\"Min Heap in List\"></p>\n<p><br></p>\n<h2 id=\"lt-heapq-py-gt-Implementation\"><a href=\"#lt-heapq-py-gt-Implementation\" class=\"headerlink\" title=\"&lt;heapq.py&gt; Implementation\"></a>&lt;heapq.py&gt; Implementation</h2><p><strong>heapq</strong> is a python library provides an implementation of min heap, also known as the priority queue. This implementation uses zero-based indexing (the first element stored in heapq[0]). A full documentation can be referred <a href=\"https://docs.python.org/2/library/heapq.html\">here</a></p>\n<p>We will mainly use <strong>heappush</strong> and <strong>heappop</strong> to create our own wrapper.</p>\n<blockquote>\n<p><strong>heapq.heappush(heap, item)</strong><br>Push the value item onto the heap, maintaining the heap invariant.</p>\n</blockquote>\n<blockquote>\n<p><strong>heapq.heappop(heap)</strong><br>Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].</p>\n</blockquote>\n<pre><code class=\"python\">import heapq\n\nclass MinHeap:\n    def __init__(self):\n        self._heap = []\n\n    def __len__(self):\n        return len(self._heap)\n\n    def push(self, priority, item):\n        &quot;&quot;&quot;\n        Push an item with priority into the heap.\n        Priority 0 is the highest.\n        &quot;&quot;&quot;\n        assert priority &gt;= 0\n        heapq.heappush(self._heap, (priority, item))\n\n    def pop():\n        &quot;&quot;&quot;\n        Returns the item with lowest priority\n        &quot;&quot;&quot;\n        return heapq.heappop(self._heap)[1] # (priority, item)[1] == item\n\n</code></pre>\n<p><br></p>\n<h2 id=\"Raw-Implementation\"><a href=\"#Raw-Implementation\" class=\"headerlink\" title=\"Raw Implementation\"></a>Raw Implementation</h2><p>We maintain the heap in a index-one-based list (always keep heap[0] to be None). For all elements in the heap, heap[parent] will ideally have two children on heap[parent * 2] and heap[parent * 2 + 1]. Besides, in order to maintain the heap to be a complete binary tree, we should always insert to the end of the list and do some procedures to rearrange the new element to a proper place in our heap.</p>\n<p>For the insertion, we will always append to the list. Afterwards, bubble up the new element. Start from the last element (which is the newly inserted one), compare its value with its parent (index divided by two), if less than its parent, swap parent and child until its value is no longer less than its parent or hit the root of the heap.<br><img src=\"/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_Insert.png\" alt=\"Insert in Min Heap\"></p>\n<p>When calling pop, we pop heap[1], which is the minimum value out of the heap, replace heap[1] with the last element of the heap to maintain a complete binary tree. Afterwards, sink down the new root element to a proper palce in the heap. Precisely, compare the value of the root (previously the last element) and two of its child, if any of them is less than the root value, swap root and that child. Keeping doing this until none of its two child is less than itself or reach the leaf of the tree.<br><img src=\"/2019/10/23/Min-Heap-Python-Implementation/Min_Heap_Pop.png\" alt=\"Pop in Min Heap\"></p>\n<p>Below is a complete implementation</p>\n<pre><code class=\"python\">class MinHeap:\n    def __init__(self):\n        &quot;&quot;&quot;\n        Init with index-one-based list\n        &quot;&quot;&quot;\n        self._heap = [None]\n\n    def __len__(self):\n        return len(self._heap) - 1\n\n    def _swap(self, t1, t2):\n        self._heap[t1], self._heap[t2] = self._heap[t2], self._heap[t1]\n\n    def _up_heap(self, index):\n        &quot;&quot;&quot;\n        Bubble up the inserted element to the proper place\n        &quot;&quot;&quot;\n        while index &gt; 1:\n            parent = index // 2\n            if self._heap[parent] &gt; self._heap[index]:\n                self._swap(parent, index)\n            index = parent\n\n    def _down_heap(self, index):\n        &quot;&quot;&quot;\n        Sink down the root element\n        &quot;&quot;&quot;\n        length = len(self._heap)\n        while index * 2 &lt; length:\n            child = index * 2\n            # compare two children, assign target child to be the smaller one\n            if child + 1 &lt; length and self._heap[child+1] &lt; self._heap[child]:      \n                child += 1\n            if self._heap[child] &lt; self._heap[index]:\n                self._swap(child, index)\n            index = child\n\n    def empty():\n        return len(self._heap) == 1\n\n    def push(self, value):\n        &quot;&quot;&quot;\n        Push a new element at the tail of the heap\n        And bubble up\n        &quot;&quot;&quot;\n        if not value:\n            raise TypeError(&#39;&quot;value&quot; cannot be of NoneType&#39;)\n        self._heap.append(value)\n        self._up_heap(len(self._heap) - 1)\n\n    def pop(self):\n        &quot;&quot;&quot;\n        Pop the root element, which is the minimum value of the heap\n        Assign the last element from the list to be the new root\n        Then sink down\n        &quot;&quot;&quot;\n        if leb(self._heap) &lt;= 1:\n            return None\n        result = self._heap[1]\n        last = self._heap.pop(-1)\n        if len(self._heap) &gt; 1:\n            self._heap[1] = last\n            self._down_heap(1)\n        return result\n\n    def peak(self):\n        if len(self._heap) &gt; 1:\n            return self._heap[1]\n        return None\n\n</code></pre>"},{"title":"Prefix Notation","date":"2019-04-30T15:11:21.000Z","photos":["../images/lisp.JPG"],"_content":"```python\n( 20 + 5 )\n( 16 / 4 )\n```\nSuch expressions which denote procedures, are called ***combinations***. The left and the right elements are called ***operands***, and the element in the middle to indicate the operation is called ***operator***. This is the most common style we have seen by now; however there is another way to construct a procedure known as ***prefix notation***:\n```python\n( + 20 5 )\n( / 16 4 )\n```\nInstead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<!-- more -->\n\nconditions:\n```python\n( define ( abs x )\n    ( cond (( > x 0 ) x )\n           (( = x 0 ) 0 )\n           (( < x 0 ) ( - x ))))\n```\nThe general form can be expressed as:\n>( cond (<\\P1> <\\E1>)\n>       (<\\P2> <\\E2>)\n>            ...\n>       (<\\Pn> <\\En>))\n\nIf none of them is evaluated to be **true**, then the value of the **cond** will be **undefined**. It can also be simplified by using ***else***:\n```python\n( define ( abs x )\n    ( cond (( < x 0 ) ( - x ))\n           ( else  x )))\n```\nIf there is only two ***predicates*** (the expression to be interpreted as either true of false), then it can use a special form ***if***:\n```python\n( define ( abs x )\n    ( if ( < x 0 )\n         ( - x )\n         x ))\n```\nThe general form of an ***if*** expression is:\n>( if <\\predicate> <\\consequent> <\\alternative> )\n\nThe logic operators:\n>( and <\\E1> ... <\\En> )\n>( or <\\E1> ... <\\En> )\n>( not <E> )\n\nThen use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:\n```python\n( define ( >= x y )\n    ( or ( > x y ) ( = x y ))\n```\nThat is all the syntax, **there is no loop in a functional programming language!**</br></br>\n## Recursion\nConsidering the factorial function:\n> n! = n ⋅ (n-1) ⋅ (n-2) ⋅ ... ⋅2⋅1\n\nWhich can be computed as:\n> n! = n ⋅ (n-1)!\n\nIf we end it up with **1!**, then simply output **1**. Then the factorial function can be implemented in ***linear recursion***:\n```python\n( define ( factorial n )\n    ( if ( = n 1 )\n        1\n        ( * n ( factorial ( - n 1 )))))\n```\n***Linear recursion*** defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as ***Tree Recursion***. The best example will be the Fibonacci series, in which each element is the sum of the previous two:\n```python\n( define ( fib n )\n    ( cond ( = n 0 ) 0 )\n           ( = n 1 ) 1 )\n           ( else ( + ( fib ( - n 1 ) )\n                      ( fib ( - n 2 ) )))))\n```\nYou may find out that this procedure is not really efficient because to compute **fib( - n 1)**, **fib( - n 2)** has to be computed one more time which causes duplicated work.\n![Tree Recursion](../images/treeRecursion.png)\nTherefore, instead of ***Tree Recursion***, let's try to convert it to be ***Linear Recursion***. Reasign the sum of **a** and **b** to **a**, and the previous **a** to **b**:\n```python\n( define ( fib n )\n    ( iterate 1 0 n ))\n\n( define ( iterate a b count )\n    ( if ( = count 0 )\n        b\n        ( iterate ( + a b ) a ( - count 1 ))))\n```\n</br>\n## Lambda\nInstead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides ***Lambda Expression***:\n>( lambda ( <\\formal-param> ) <\\body> )\n\nFor instance,\n```python\n( define ( Add a b ) ( + a b ))\n```\ncan be written as:\n```python\n( define add ( lambda ( a b ) ( + a b )))\n```\nAnd operators can also be represented by ***Lambda Expression***:\n```python\n(( lambda ( a b ) ( + ( * a a ) ( * b b ))) 2 3 )\n```\nAnother use of ***Lambda Expression*** is creating local variables. An expression can be binded with a specific name by using keyword ***let***. The above example then can be interpreted as:\n```python\n( define ( sumsqr x y )\n    ( let ( a ( * x x ))\n          ( b ( * y y ))\n        ( + a b )))\n```\n***Note:*** The scope of a variable specified by a ***let*** is only applied to the **body** of the ***let***. For example, if the evalue of **x** is **2**, then the expression:\n```python\n( let (( x 3 )\n        ( y ( + x 2 )))\n    ( * x y ))\n```\nThe value of **y** will be **4** as being outside of the **let** body, and the output will be **3 * 4 = 12**. It seems like ***let*** is really similar to ***define***; however, in the most cases, we much prefer using ***let*** and only apply ***define*** to **internal procedures**.","source":"_posts/Prefix-Notation.md","raw":"---\ntitle: Prefix Notation\ndate: 2019-04-30 11:11:21\ntags: [Lisp, Scheme, Prefix Notation, Functional Programming]\nphotos: [\"../images/lisp.JPG\"]\n---\n```python\n( 20 + 5 )\n( 16 / 4 )\n```\nSuch expressions which denote procedures, are called ***combinations***. The left and the right elements are called ***operands***, and the element in the middle to indicate the operation is called ***operator***. This is the most common style we have seen by now; however there is another way to construct a procedure known as ***prefix notation***:\n```python\n( + 20 5 )\n( / 16 4 )\n```\nInstead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<!-- more -->\n\nconditions:\n```python\n( define ( abs x )\n    ( cond (( > x 0 ) x )\n           (( = x 0 ) 0 )\n           (( < x 0 ) ( - x ))))\n```\nThe general form can be expressed as:\n>( cond (<\\P1> <\\E1>)\n>       (<\\P2> <\\E2>)\n>            ...\n>       (<\\Pn> <\\En>))\n\nIf none of them is evaluated to be **true**, then the value of the **cond** will be **undefined**. It can also be simplified by using ***else***:\n```python\n( define ( abs x )\n    ( cond (( < x 0 ) ( - x ))\n           ( else  x )))\n```\nIf there is only two ***predicates*** (the expression to be interpreted as either true of false), then it can use a special form ***if***:\n```python\n( define ( abs x )\n    ( if ( < x 0 )\n         ( - x )\n         x ))\n```\nThe general form of an ***if*** expression is:\n>( if <\\predicate> <\\consequent> <\\alternative> )\n\nThe logic operators:\n>( and <\\E1> ... <\\En> )\n>( or <\\E1> ... <\\En> )\n>( not <E> )\n\nThen use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:\n```python\n( define ( >= x y )\n    ( or ( > x y ) ( = x y ))\n```\nThat is all the syntax, **there is no loop in a functional programming language!**</br></br>\n## Recursion\nConsidering the factorial function:\n> n! = n ⋅ (n-1) ⋅ (n-2) ⋅ ... ⋅2⋅1\n\nWhich can be computed as:\n> n! = n ⋅ (n-1)!\n\nIf we end it up with **1!**, then simply output **1**. Then the factorial function can be implemented in ***linear recursion***:\n```python\n( define ( factorial n )\n    ( if ( = n 1 )\n        1\n        ( * n ( factorial ( - n 1 )))))\n```\n***Linear recursion*** defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as ***Tree Recursion***. The best example will be the Fibonacci series, in which each element is the sum of the previous two:\n```python\n( define ( fib n )\n    ( cond ( = n 0 ) 0 )\n           ( = n 1 ) 1 )\n           ( else ( + ( fib ( - n 1 ) )\n                      ( fib ( - n 2 ) )))))\n```\nYou may find out that this procedure is not really efficient because to compute **fib( - n 1)**, **fib( - n 2)** has to be computed one more time which causes duplicated work.\n![Tree Recursion](../images/treeRecursion.png)\nTherefore, instead of ***Tree Recursion***, let's try to convert it to be ***Linear Recursion***. Reasign the sum of **a** and **b** to **a**, and the previous **a** to **b**:\n```python\n( define ( fib n )\n    ( iterate 1 0 n ))\n\n( define ( iterate a b count )\n    ( if ( = count 0 )\n        b\n        ( iterate ( + a b ) a ( - count 1 ))))\n```\n</br>\n## Lambda\nInstead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides ***Lambda Expression***:\n>( lambda ( <\\formal-param> ) <\\body> )\n\nFor instance,\n```python\n( define ( Add a b ) ( + a b ))\n```\ncan be written as:\n```python\n( define add ( lambda ( a b ) ( + a b )))\n```\nAnd operators can also be represented by ***Lambda Expression***:\n```python\n(( lambda ( a b ) ( + ( * a a ) ( * b b ))) 2 3 )\n```\nAnother use of ***Lambda Expression*** is creating local variables. An expression can be binded with a specific name by using keyword ***let***. The above example then can be interpreted as:\n```python\n( define ( sumsqr x y )\n    ( let ( a ( * x x ))\n          ( b ( * y y ))\n        ( + a b )))\n```\n***Note:*** The scope of a variable specified by a ***let*** is only applied to the **body** of the ***let***. For example, if the evalue of **x** is **2**, then the expression:\n```python\n( let (( x 3 )\n        ( y ( + x 2 )))\n    ( * x y ))\n```\nThe value of **y** will be **4** as being outside of the **let** body, and the output will be **3 * 4 = 12**. It seems like ***let*** is really similar to ***define***; however, in the most cases, we much prefer using ***let*** and only apply ***define*** to **internal procedures**.","slug":"Prefix-Notation","published":1,"updated":"2021-01-07T21:13:20.376Z","comments":1,"layout":"post","link":"","_id":"ckjnncqi0000h5opuh9wt9bg0","content":"<pre><code class=\"python\">( 20 + 5 )\n( 16 / 4 )\n</code></pre>\n<p>Such expressions which denote procedures, are called <strong><em>combinations</em></strong>. The left and the right elements are called <strong><em>operands</em></strong>, and the element in the middle to indicate the operation is called <strong><em>operator</em></strong>. This is the most common style we have seen by now; however there is another way to construct a procedure known as <strong><em>prefix notation</em></strong>:</p>\n<pre><code class=\"python\">( + 20 5 )\n( / 16 4 )\n</code></pre>\n<p>Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.<a id=\"more\"></a></p>\n<p>conditions:</p>\n<pre><code class=\"python\">( define ( abs x )\n    ( cond (( &gt; x 0 ) x )\n           (( = x 0 ) 0 )\n           (( &lt; x 0 ) ( - x ))))\n</code></pre>\n<p>The general form can be expressed as:</p>\n<blockquote>\n<p>( cond (&lt;\\P1&gt; &lt;\\E1&gt;)<br>      (&lt;\\P2&gt; &lt;\\E2&gt;)<br>           …<br>      (&lt;\\Pn&gt; &lt;\\En&gt;))</p>\n</blockquote>\n<p>If none of them is evaluated to be <strong>true</strong>, then the value of the <strong>cond</strong> will be <strong>undefined</strong>. It can also be simplified by using <strong><em>else</em></strong>:</p>\n<pre><code class=\"python\">( define ( abs x )\n    ( cond (( &lt; x 0 ) ( - x ))\n           ( else  x )))\n</code></pre>\n<p>If there is only two <strong><em>predicates</em></strong> (the expression to be interpreted as either true of false), then it can use a special form <strong><em>if</em></strong>:</p>\n<pre><code class=\"python\">( define ( abs x )\n    ( if ( &lt; x 0 )\n         ( - x )\n         x ))\n</code></pre>\n<p>The general form of an <strong><em>if</em></strong> expression is:</p>\n<blockquote>\n<p>( if &lt;\\predicate&gt; &lt;\\consequent&gt; &lt;\\alternative&gt; )</p>\n</blockquote>\n<p>The logic operators:</p>\n<blockquote>\n<p>( and &lt;\\E1&gt; … &lt;\\En&gt; )<br>( or &lt;\\E1&gt; … &lt;\\En&gt; )<br>( not <E> )</E></p>\n</blockquote>\n<p>Then use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:</p>\n<pre><code class=\"python\">( define ( &gt;= x y )\n    ( or ( &gt; x y ) ( = x y ))\n</code></pre>\n<p>That is all the syntax, <strong>there is no loop in a functional programming language!</strong><br><br></p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>Considering the factorial function:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1) ⋅ (n-2) ⋅ … ⋅2⋅1</p>\n</blockquote>\n<p>Which can be computed as:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1)!</p>\n</blockquote>\n<p>If we end it up with <strong>1!</strong>, then simply output <strong>1</strong>. Then the factorial function can be implemented in <strong><em>linear recursion</em></strong>:</p>\n<pre><code class=\"python\">( define ( factorial n )\n    ( if ( = n 1 )\n        1\n        ( * n ( factorial ( - n 1 )))))\n</code></pre>\n<p><strong><em>Linear recursion</em></strong> defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as <strong><em>Tree Recursion</em></strong>. The best example will be the Fibonacci series, in which each element is the sum of the previous two:</p>\n<pre><code class=\"python\">( define ( fib n )\n    ( cond ( = n 0 ) 0 )\n           ( = n 1 ) 1 )\n           ( else ( + ( fib ( - n 1 ) )\n                      ( fib ( - n 2 ) )))))\n</code></pre>\n<p>You may find out that this procedure is not really efficient because to compute <strong>fib( - n 1)</strong>, <strong>fib( - n 2)</strong> has to be computed one more time which causes duplicated work.<br><img src=\"../images/treeRecursion.png\" alt=\"Tree Recursion\"><br>Therefore, instead of <strong><em>Tree Recursion</em></strong>, let’s try to convert it to be <strong><em>Linear Recursion</em></strong>. Reasign the sum of <strong>a</strong> and <strong>b</strong> to <strong>a</strong>, and the previous <strong>a</strong> to <strong>b</strong>:</p>\n<pre><code class=\"python\">( define ( fib n )\n    ( iterate 1 0 n ))\n\n( define ( iterate a b count )\n    ( if ( = count 0 )\n        b\n        ( iterate ( + a b ) a ( - count 1 ))))\n</code></pre>\n<p><br></p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Instead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides <strong><em>Lambda Expression</em></strong>:</p>\n<blockquote>\n<p>( lambda ( &lt;\\formal-param&gt; ) &lt;\\body&gt; )</p>\n</blockquote>\n<p>For instance,</p>\n<pre><code class=\"python\">( define ( Add a b ) ( + a b ))\n</code></pre>\n<p>can be written as:</p>\n<pre><code class=\"python\">( define add ( lambda ( a b ) ( + a b )))\n</code></pre>\n<p>And operators can also be represented by <strong><em>Lambda Expression</em></strong>:</p>\n<pre><code class=\"python\">(( lambda ( a b ) ( + ( * a a ) ( * b b ))) 2 3 )\n</code></pre>\n<p>Another use of <strong><em>Lambda Expression</em></strong> is creating local variables. An expression can be binded with a specific name by using keyword <strong><em>let</em></strong>. The above example then can be interpreted as:</p>\n<pre><code class=\"python\">( define ( sumsqr x y )\n    ( let ( a ( * x x ))\n          ( b ( * y y ))\n        ( + a b )))\n</code></pre>\n<p><strong><em>Note:</em></strong> The scope of a variable specified by a <strong><em>let</em></strong> is only applied to the <strong>body</strong> of the <strong><em>let</em></strong>. For example, if the evalue of <strong>x</strong> is <strong>2</strong>, then the expression:</p>\n<pre><code class=\"python\">( let (( x 3 )\n        ( y ( + x 2 )))\n    ( * x y ))\n</code></pre>\n<p>The value of <strong>y</strong> will be <strong>4</strong> as being outside of the <strong>let</strong> body, and the output will be <strong>3 * 4 = 12</strong>. It seems like <strong><em>let</em></strong> is really similar to <strong><em>define</em></strong>; however, in the most cases, we much prefer using <strong><em>let</em></strong> and only apply <strong><em>define</em></strong> to <strong>internal procedures</strong>.</p>\n","site":{"data":{}},"excerpt":"<pre><code class=\"python\">( 20 + 5 )\n( 16 / 4 )\n</code></pre>\n<p>Such expressions which denote procedures, are called <strong><em>combinations</em></strong>. The left and the right elements are called <strong><em>operands</em></strong>, and the element in the middle to indicate the operation is called <strong><em>operator</em></strong>. This is the most common style we have seen by now; however there is another way to construct a procedure known as <strong><em>prefix notation</em></strong>:</p>\n<pre><code class=\"python\">( + 20 5 )\n( / 16 4 )\n</code></pre>\n<p>Instead of injecting the operator between operands, which is a more human readable style, the prefix notation requires the operator always to be at the left most.</p>","more":"<p></p>\n<p>conditions:</p>\n<pre><code class=\"python\">( define ( abs x )\n    ( cond (( &gt; x 0 ) x )\n           (( = x 0 ) 0 )\n           (( &lt; x 0 ) ( - x ))))\n</code></pre>\n<p>The general form can be expressed as:</p>\n<blockquote>\n<p>( cond (&lt;\\P1&gt; &lt;\\E1&gt;)<br>      (&lt;\\P2&gt; &lt;\\E2&gt;)<br>           …<br>      (&lt;\\Pn&gt; &lt;\\En&gt;))</p>\n</blockquote>\n<p>If none of them is evaluated to be <strong>true</strong>, then the value of the <strong>cond</strong> will be <strong>undefined</strong>. It can also be simplified by using <strong><em>else</em></strong>:</p>\n<pre><code class=\"python\">( define ( abs x )\n    ( cond (( &lt; x 0 ) ( - x ))\n           ( else  x )))\n</code></pre>\n<p>If there is only two <strong><em>predicates</em></strong> (the expression to be interpreted as either true of false), then it can use a special form <strong><em>if</em></strong>:</p>\n<pre><code class=\"python\">( define ( abs x )\n    ( if ( &lt; x 0 )\n         ( - x )\n         x ))\n</code></pre>\n<p>The general form of an <strong><em>if</em></strong> expression is:</p>\n<blockquote>\n<p>( if &lt;\\predicate&gt; &lt;\\consequent&gt; &lt;\\alternative&gt; )</p>\n</blockquote>\n<p>The logic operators:</p>\n<blockquote>\n<p>( and &lt;\\E1&gt; … &lt;\\En&gt; )<br>( or &lt;\\E1&gt; … &lt;\\En&gt; )<br>( not <E> )</E></p>\n</blockquote>\n<p>Then use the logic operators to define a predicate to evaluate if a number id larger or equal to the other one:</p>\n<pre><code class=\"python\">( define ( &gt;= x y )\n    ( or ( &gt; x y ) ( = x y ))\n</code></pre>\n<p>That is all the syntax, <strong>there is no loop in a functional programming language!</strong><br><br></p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>Considering the factorial function:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1) ⋅ (n-2) ⋅ … ⋅2⋅1</p>\n</blockquote>\n<p>Which can be computed as:</p>\n<blockquote>\n<p>n! = n ⋅ (n-1)!</p>\n</blockquote>\n<p>If we end it up with <strong>1!</strong>, then simply output <strong>1</strong>. Then the factorial function can be implemented in <strong><em>linear recursion</em></strong>:</p>\n<pre><code class=\"python\">( define ( factorial n )\n    ( if ( = n 1 )\n        1\n        ( * n ( factorial ( - n 1 )))))\n</code></pre>\n<p><strong><em>Linear recursion</em></strong> defines that the computation chains of operations is proportional to n and hence grows linearly. There is also another pattern of recursion, known as <strong><em>Tree Recursion</em></strong>. The best example will be the Fibonacci series, in which each element is the sum of the previous two:</p>\n<pre><code class=\"python\">( define ( fib n )\n    ( cond ( = n 0 ) 0 )\n           ( = n 1 ) 1 )\n           ( else ( + ( fib ( - n 1 ) )\n                      ( fib ( - n 2 ) )))))\n</code></pre>\n<p>You may find out that this procedure is not really efficient because to compute <strong>fib( - n 1)</strong>, <strong>fib( - n 2)</strong> has to be computed one more time which causes duplicated work.<br><img src=\"../images/treeRecursion.png\" alt=\"Tree Recursion\"><br>Therefore, instead of <strong><em>Tree Recursion</em></strong>, let’s try to convert it to be <strong><em>Linear Recursion</em></strong>. Reasign the sum of <strong>a</strong> and <strong>b</strong> to <strong>a</strong>, and the previous <strong>a</strong> to <strong>b</strong>:</p>\n<pre><code class=\"python\">( define ( fib n )\n    ( iterate 1 0 n ))\n\n( define ( iterate a b count )\n    ( if ( = count 0 )\n        b\n        ( iterate ( + a b ) a ( - count 1 ))))\n</code></pre>\n<p><br></p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Instead of defining some trivial procedures so that we can pass them as arguments of the other procedures, functional programming provides <strong><em>Lambda Expression</em></strong>:</p>\n<blockquote>\n<p>( lambda ( &lt;\\formal-param&gt; ) &lt;\\body&gt; )</p>\n</blockquote>\n<p>For instance,</p>\n<pre><code class=\"python\">( define ( Add a b ) ( + a b ))\n</code></pre>\n<p>can be written as:</p>\n<pre><code class=\"python\">( define add ( lambda ( a b ) ( + a b )))\n</code></pre>\n<p>And operators can also be represented by <strong><em>Lambda Expression</em></strong>:</p>\n<pre><code class=\"python\">(( lambda ( a b ) ( + ( * a a ) ( * b b ))) 2 3 )\n</code></pre>\n<p>Another use of <strong><em>Lambda Expression</em></strong> is creating local variables. An expression can be binded with a specific name by using keyword <strong><em>let</em></strong>. The above example then can be interpreted as:</p>\n<pre><code class=\"python\">( define ( sumsqr x y )\n    ( let ( a ( * x x ))\n          ( b ( * y y ))\n        ( + a b )))\n</code></pre>\n<p><strong><em>Note:</em></strong> The scope of a variable specified by a <strong><em>let</em></strong> is only applied to the <strong>body</strong> of the <strong><em>let</em></strong>. For example, if the evalue of <strong>x</strong> is <strong>2</strong>, then the expression:</p>\n<pre><code class=\"python\">( let (( x 3 )\n        ( y ( + x 2 )))\n    ( * x y ))\n</code></pre>\n<p>The value of <strong>y</strong> will be <strong>4</strong> as being outside of the <strong>let</strong> body, and the output will be <strong>3 * 4 = 12</strong>. It seems like <strong><em>let</em></strong> is really similar to <strong><em>define</em></strong>; however, in the most cases, we much prefer using <strong><em>let</em></strong> and only apply <strong><em>define</em></strong> to <strong>internal procedures</strong>.</p>"},{"title":"Prefix Tree","date":"2019-07-18T22:30:12.000Z","photos":["../images/prefixTree.JPG"],"_content":"\n> A trie, also called digital tree, radix tree or prefix tree, is a kind of search tree—an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. \n\nEach node of the tree represents a string (prefix) and has multiple child nodes. A prefix tree is always used as search prompt when users browse through the search engine. The runtime of each query operation is independent with the size of the prefix tree; instead, it is decided by the length of the query target. <!-- more -->\n</br>\n\n## Sample\nHere list an array of some random words:\n> sin, sis, con, com, cin, cmd\n\nThen we can construct a prefix tree as following:\n![prefix tree sample](prefix_tree.JPG)\nDuring the query operation, there is no need to iterate the whole tree; instead, simply following each node and recursively going through its children will return the target or none if the target does not exist in the tree.\n</br>\n\n## Construct A Prefix Tree\nThere are multiple ways to form a prefix tree. The most popular method is to maintain three arrays in the instance to record end, path and next.\n\n- **Node**\n```python\nclass TrieNode:\n    def __init__(self):\n        self.nodes = {}\n        self.count = 0\n        self.isword = False\n```\n\n- **CRUD**\n```python\nclass Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize data structure.\n        \"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word: str):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr.nodes:\n                curr.nodes[char] = TrieNode()\n            curr.nodes[char].count += 1\n            curr = curr.nodes[char]\n        curr.isword = True\n\n    def query(self, target: str):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type target: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in target:\n            if char not in curr.nodes:\n                return False\n            curr = curr.nodes[char]\n        return curr.isword\n\n    def startWith(self, prefix: str):\n        \"\"\"\n        Returns the number of words in the trie that start with the given prefix.   \n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return 0\n            curr = curr.nodes[char]\n        return curr.count\n\n    def delete(self, target: str):\n        \"\"\"\n        Returns true if target exist and successfully delete from the trie.\n        :type target: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return False\n            curr = curr.nodes[char]\n        if curr.isword:\n            curr.isword = False\n            return True\n        return False\n\n    def listAllMatches(self, prefix: str):\n        \"\"\"\n        Returns all words started with prefix\n        :param prefix:\n        :return: List[str]\n        \"\"\"\n        result = []\n        def recursiveQuery(node: TrieNode, path: str):\n            if not node.nodes:\n                result.append(path)\n            else:\n                for key in node.nodes.keys():\n                    recursiveQuery(node.nodes[key], path + key)\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return result\n            curr = curr.nodes[char]\n        recursiveQuery('')\n        return result\n```\n","source":"_posts/Prefix-Tree.md","raw":"---\ntitle: Prefix Tree\ndate: 2019-07-18 18:30:12\ntags: [Prefix Tree, Algorithm, Data Structure]\nphotos: [\"../images/prefixTree.JPG\"]\n---\n\n> A trie, also called digital tree, radix tree or prefix tree, is a kind of search tree—an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. \n\nEach node of the tree represents a string (prefix) and has multiple child nodes. A prefix tree is always used as search prompt when users browse through the search engine. The runtime of each query operation is independent with the size of the prefix tree; instead, it is decided by the length of the query target. <!-- more -->\n</br>\n\n## Sample\nHere list an array of some random words:\n> sin, sis, con, com, cin, cmd\n\nThen we can construct a prefix tree as following:\n![prefix tree sample](prefix_tree.JPG)\nDuring the query operation, there is no need to iterate the whole tree; instead, simply following each node and recursively going through its children will return the target or none if the target does not exist in the tree.\n</br>\n\n## Construct A Prefix Tree\nThere are multiple ways to form a prefix tree. The most popular method is to maintain three arrays in the instance to record end, path and next.\n\n- **Node**\n```python\nclass TrieNode:\n    def __init__(self):\n        self.nodes = {}\n        self.count = 0\n        self.isword = False\n```\n\n- **CRUD**\n```python\nclass Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize data structure.\n        \"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word: str):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr.nodes:\n                curr.nodes[char] = TrieNode()\n            curr.nodes[char].count += 1\n            curr = curr.nodes[char]\n        curr.isword = True\n\n    def query(self, target: str):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type target: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in target:\n            if char not in curr.nodes:\n                return False\n            curr = curr.nodes[char]\n        return curr.isword\n\n    def startWith(self, prefix: str):\n        \"\"\"\n        Returns the number of words in the trie that start with the given prefix.   \n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return 0\n            curr = curr.nodes[char]\n        return curr.count\n\n    def delete(self, target: str):\n        \"\"\"\n        Returns true if target exist and successfully delete from the trie.\n        :type target: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return False\n            curr = curr.nodes[char]\n        if curr.isword:\n            curr.isword = False\n            return True\n        return False\n\n    def listAllMatches(self, prefix: str):\n        \"\"\"\n        Returns all words started with prefix\n        :param prefix:\n        :return: List[str]\n        \"\"\"\n        result = []\n        def recursiveQuery(node: TrieNode, path: str):\n            if not node.nodes:\n                result.append(path)\n            else:\n                for key in node.nodes.keys():\n                    recursiveQuery(node.nodes[key], path + key)\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return result\n            curr = curr.nodes[char]\n        recursiveQuery('')\n        return result\n```\n","slug":"Prefix-Tree","published":1,"updated":"2021-01-07T21:13:20.376Z","comments":1,"layout":"post","link":"","_id":"ckjnncqi1000k5opu9ovl53au","content":"<blockquote>\n<p>A trie, also called digital tree, radix tree or prefix tree, is a kind of search tree—an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. </p>\n</blockquote>\n<p>Each node of the tree represents a string (prefix) and has multiple child nodes. A prefix tree is always used as search prompt when users browse through the search engine. The runtime of each query operation is independent with the size of the prefix tree; instead, it is decided by the length of the query target. <a id=\"more\"></a><br><br></p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><p>Here list an array of some random words:</p>\n<blockquote>\n<p>sin, sis, con, com, cin, cmd</p>\n</blockquote>\n<p>Then we can construct a prefix tree as following:<br><img src=\"/2019/07/18/Prefix-Tree/prefix_tree.JPG\" alt=\"prefix tree sample\"><br>During the query operation, there is no need to iterate the whole tree; instead, simply following each node and recursively going through its children will return the target or none if the target does not exist in the tree.<br><br></p>\n<h2 id=\"Construct-A-Prefix-Tree\"><a href=\"#Construct-A-Prefix-Tree\" class=\"headerlink\" title=\"Construct A Prefix Tree\"></a>Construct A Prefix Tree</h2><p>There are multiple ways to form a prefix tree. The most popular method is to maintain three arrays in the instance to record end, path and next.</p>\n<ul>\n<li><p><strong>Node</strong></p>\n<pre><code class=\"python\">class TrieNode:\n  def __init__(self):\n      self.nodes = &#123;&#125;\n      self.count = 0\n      self.isword = False\n</code></pre>\n</li>\n<li><p><strong>CRUD</strong></p>\n<pre><code class=\"python\">class Trie:\n  def __init__(self):\n      &quot;&quot;&quot;\n      Initialize data structure.\n      &quot;&quot;&quot;\n      self.root = TrieNode()\n\n  def insert(self, word: str):\n      &quot;&quot;&quot;\n      Inserts a word into the trie.\n      :type word: str\n      :rtype: void\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in word:\n          if char not in curr.nodes:\n              curr.nodes[char] = TrieNode()\n          curr.nodes[char].count += 1\n          curr = curr.nodes[char]\n      curr.isword = True\n\n  def query(self, target: str):\n      &quot;&quot;&quot;\n      Returns if the word is in the trie.\n      :type target: str\n      :rtype: bool\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in target:\n          if char not in curr.nodes:\n              return False\n          curr = curr.nodes[char]\n      return curr.isword\n\n  def startWith(self, prefix: str):\n      &quot;&quot;&quot;\n      Returns the number of words in the trie that start with the given prefix.   \n      :type prefix: str\n      :rtype: int\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in prefix:\n          if char not in curr.nodes:\n              return 0\n          curr = curr.nodes[char]\n      return curr.count\n\n  def delete(self, target: str):\n      &quot;&quot;&quot;\n      Returns true if target exist and successfully delete from the trie.\n      :type target: str\n      :rtype: bool\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in prefix:\n          if char not in curr.nodes:\n              return False\n          curr = curr.nodes[char]\n      if curr.isword:\n          curr.isword = False\n          return True\n      return False\n\n  def listAllMatches(self, prefix: str):\n      &quot;&quot;&quot;\n      Returns all words started with prefix\n      :param prefix:\n      :return: List[str]\n      &quot;&quot;&quot;\n      result = []\n      def recursiveQuery(node: TrieNode, path: str):\n          if not node.nodes:\n              result.append(path)\n          else:\n              for key in node.nodes.keys():\n                  recursiveQuery(node.nodes[key], path + key)\n      curr = self.root\n      for char in prefix:\n          if char not in curr.nodes:\n              return result\n          curr = curr.nodes[char]\n      recursiveQuery(&#39;&#39;)\n      return result\n</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>A trie, also called digital tree, radix tree or prefix tree, is a kind of search tree—an ordered tree data structure used to store a dynamic set or associative array where the keys are usually strings. </p>\n</blockquote>\n<p>Each node of the tree represents a string (prefix) and has multiple child nodes. A prefix tree is always used as search prompt when users browse through the search engine. The runtime of each query operation is independent with the size of the prefix tree; instead, it is decided by the length of the query target.</p>","more":"<br><br><p></p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><p>Here list an array of some random words:</p>\n<blockquote>\n<p>sin, sis, con, com, cin, cmd</p>\n</blockquote>\n<p>Then we can construct a prefix tree as following:<br><img src=\"/2019/07/18/Prefix-Tree/prefix_tree.JPG\" alt=\"prefix tree sample\"><br>During the query operation, there is no need to iterate the whole tree; instead, simply following each node and recursively going through its children will return the target or none if the target does not exist in the tree.<br><br></p>\n<h2 id=\"Construct-A-Prefix-Tree\"><a href=\"#Construct-A-Prefix-Tree\" class=\"headerlink\" title=\"Construct A Prefix Tree\"></a>Construct A Prefix Tree</h2><p>There are multiple ways to form a prefix tree. The most popular method is to maintain three arrays in the instance to record end, path and next.</p>\n<ul>\n<li><p><strong>Node</strong></p>\n<pre><code class=\"python\">class TrieNode:\n  def __init__(self):\n      self.nodes = &#123;&#125;\n      self.count = 0\n      self.isword = False\n</code></pre>\n</li>\n<li><p><strong>CRUD</strong></p>\n<pre><code class=\"python\">class Trie:\n  def __init__(self):\n      &quot;&quot;&quot;\n      Initialize data structure.\n      &quot;&quot;&quot;\n      self.root = TrieNode()\n\n  def insert(self, word: str):\n      &quot;&quot;&quot;\n      Inserts a word into the trie.\n      :type word: str\n      :rtype: void\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in word:\n          if char not in curr.nodes:\n              curr.nodes[char] = TrieNode()\n          curr.nodes[char].count += 1\n          curr = curr.nodes[char]\n      curr.isword = True\n\n  def query(self, target: str):\n      &quot;&quot;&quot;\n      Returns if the word is in the trie.\n      :type target: str\n      :rtype: bool\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in target:\n          if char not in curr.nodes:\n              return False\n          curr = curr.nodes[char]\n      return curr.isword\n\n  def startWith(self, prefix: str):\n      &quot;&quot;&quot;\n      Returns the number of words in the trie that start with the given prefix.   \n      :type prefix: str\n      :rtype: int\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in prefix:\n          if char not in curr.nodes:\n              return 0\n          curr = curr.nodes[char]\n      return curr.count\n\n  def delete(self, target: str):\n      &quot;&quot;&quot;\n      Returns true if target exist and successfully delete from the trie.\n      :type target: str\n      :rtype: bool\n      &quot;&quot;&quot;\n      curr = self.root\n      for char in prefix:\n          if char not in curr.nodes:\n              return False\n          curr = curr.nodes[char]\n      if curr.isword:\n          curr.isword = False\n          return True\n      return False\n\n  def listAllMatches(self, prefix: str):\n      &quot;&quot;&quot;\n      Returns all words started with prefix\n      :param prefix:\n      :return: List[str]\n      &quot;&quot;&quot;\n      result = []\n      def recursiveQuery(node: TrieNode, path: str):\n          if not node.nodes:\n              result.append(path)\n          else:\n              for key in node.nodes.keys():\n                  recursiveQuery(node.nodes[key], path + key)\n      curr = self.root\n      for char in prefix:\n          if char not in curr.nodes:\n              return result\n          curr = curr.nodes[char]\n      recursiveQuery(&#39;&#39;)\n      return result\n</code></pre>\n</li>\n</ul>"},{"title":"Segment Tree","date":"2019-10-29T16:01:45.000Z","photos":["../images/Segment_Tree.png"],"_content":"\nA Segment tree is used for storing information about intervals. The general query and insertion operations have a runtime of **O(logn)**. It will also take extra **O(nlogn)** time to build the tree.\n<!-- more -->\n<br/>\n\n## Introduction\n\nA segment tree is always a full binary tree which every node other than the leaves has two children (each node has exactly zero or two children). Therefore, if there are n nodes in total (n is always an odd number), there will be (n+1)/2 leaves.\n\n![A Full Binary Tree](Full_Binary_Tree.png)\nEach of the leaf will represent an unit interval [n:n], which has a length of 1 and assigned weight. A parent node [n:n+1] will always have two children [n:n] and [n+1:n+1], with sum_length to be set as the sum of lengths of its children and sum_weight to be the sum of its children's weights. Hence the sum_length of the root node will represent the length converage of the given intervals and the sum_weight will show the accumulative weight.\n<br/>\n\n## Initialization\n\n> **Note**: For this implementation, we fix the boundaries of the tree (assign lower and upper bound while initializing). Thus, if the boundary was assinged to be [0:100], then the insertion of [90:110] will only insert the valid partition of the target (which is [90:100]).\n\nFirst of all, we decide the boundary of our tree and assign the boundary as the root interval. Then find the middle point of the root interval, assign left child to be [lower_bound:mid] and right child to be [mid:upper_bound]. Recursively calling the init function until start == end in [start:end] which is eactly the leave node of the tree.\n\n```python\ndef __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.sum_value = {}\n        self.length = {}\n        self._init(start, end)\n\n\ndef _init(self, start, end):\n    self.sum_value[(start, end)] = 0\n    self.length[(start, end)] = 0\n    if start < end:\n        mid = start + (end - start)//2\n        self._init(start, mid)\n        self._init(mid+1, end)\n\n```\n<br/>\n\n## Insertion\n\nBefore the insertion, we validate the boundary of the target interval\n```python\ndef check_bound(self, start, end):\n    _start = max(self.start, start)\n    _end = min(self.end, end)\n    if _start > _end:\n        return None, None\n    return _start, _end\n```\nAfterwards, behave the insertion. We may encounter three cases:\n\n1. The target upper bound is less than mid value, hence insert to the left child\n![Insert to the left child](Segment_Tree_Left_Insert.png)\n\n2. The target lower bound is greater than mid value, hence insert to the right child\n![Insert to the right child](Segment_Tree_Right_Insert.png)\n\n3. The target crosses over two children, thus split it into two intervals and insert to the corresponding child\n![Split and insert to both children](Segment_Tree_Split_Insert.png)\n\nRecursively calling insert function and update sum_length and sum_weight of the current root node. Return true if insert target successfully.\n\n```python\ndef _add(self, start, end, weight, total_start, total_end):\n    key = (total_start, total_end)\n    if total_start == total_end:\n        self.sum_value[key] += weight\n        self.length[key] = 1 if self.sum_value[key] != 0 else 0\n        return\n    mid = self.start + (self.end - self.start)//2\n    # if segment is on the left hand side of mid point\n    if mid >= end:\n        self._add(start, end, weight, total_start, mid)\n    # if segment is on the right hand side of mid point\n    elif mid < start:\n        self._add(start, end, weight, mid+1, total_end)\n    # if segment cross over the mid point\n    else:\n        self._add(start, mid, weight, total_start, mid)\n        self._add(mid+1, end, weight, mid+1, total_end)\n    self.sum_value[key] = self.sum_value[(total_start, mid)] + self.sum_value[(mid+1, total_end)]   \n    self.length[key] = self.length[(total_start, mid)] + self.length[(mid+1, total_end)]\n\ndef add(self, start, end, weight = 1):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return False\n    self._add(_start, _end, weight, self.start, self.end)\n    return True\n```\n<br/>\n\n## Query\n\nSame as insertion, query the target interval and return corresponding sum_weight or sum_length, for example:\n```python\ndef _find_sum(self, start, end, total_start, total_end):\n    if start == total_start and end == total_end:\n        return self.sum_value([start, end])\n    mid = total_start + (total_end - total_end)//2\n    # if segment is on the left hand side of mid point\n    if mid >= end:\n        return self._find_sum(start, end, total_start, mid)\n    # if segment is on the right hand side of mid point\n    if mid < start:\n        return self._find_sum(start, end, mid+1, total_end)\n    # if segment cross over the mid point\n    return self._find_sum(start, mid, total_start, mid) + self._find_sum(mid+1, end, mid+1, total_end)  \n\ndef find_sum(self, start, end):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return 0\n    return self._find_sum(_start, _end, self.start, self.end)\n```\n\nA full implementation can be referred [here](https://github.com/OhYoooo/Segment-Tree/blob/master/segment_tree.py)\n","source":"_posts/Segment-Tree.md","raw":"---\ntitle: Segment Tree\ndate: 2019-10-29 12:01:45\ntags: [Segment Tree, Algorithm, Data Structure]\nphotos: [\"../images/Segment_Tree.png\"]\n---\n\nA Segment tree is used for storing information about intervals. The general query and insertion operations have a runtime of **O(logn)**. It will also take extra **O(nlogn)** time to build the tree.\n<!-- more -->\n<br/>\n\n## Introduction\n\nA segment tree is always a full binary tree which every node other than the leaves has two children (each node has exactly zero or two children). Therefore, if there are n nodes in total (n is always an odd number), there will be (n+1)/2 leaves.\n\n![A Full Binary Tree](Full_Binary_Tree.png)\nEach of the leaf will represent an unit interval [n:n], which has a length of 1 and assigned weight. A parent node [n:n+1] will always have two children [n:n] and [n+1:n+1], with sum_length to be set as the sum of lengths of its children and sum_weight to be the sum of its children's weights. Hence the sum_length of the root node will represent the length converage of the given intervals and the sum_weight will show the accumulative weight.\n<br/>\n\n## Initialization\n\n> **Note**: For this implementation, we fix the boundaries of the tree (assign lower and upper bound while initializing). Thus, if the boundary was assinged to be [0:100], then the insertion of [90:110] will only insert the valid partition of the target (which is [90:100]).\n\nFirst of all, we decide the boundary of our tree and assign the boundary as the root interval. Then find the middle point of the root interval, assign left child to be [lower_bound:mid] and right child to be [mid:upper_bound]. Recursively calling the init function until start == end in [start:end] which is eactly the leave node of the tree.\n\n```python\ndef __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.sum_value = {}\n        self.length = {}\n        self._init(start, end)\n\n\ndef _init(self, start, end):\n    self.sum_value[(start, end)] = 0\n    self.length[(start, end)] = 0\n    if start < end:\n        mid = start + (end - start)//2\n        self._init(start, mid)\n        self._init(mid+1, end)\n\n```\n<br/>\n\n## Insertion\n\nBefore the insertion, we validate the boundary of the target interval\n```python\ndef check_bound(self, start, end):\n    _start = max(self.start, start)\n    _end = min(self.end, end)\n    if _start > _end:\n        return None, None\n    return _start, _end\n```\nAfterwards, behave the insertion. We may encounter three cases:\n\n1. The target upper bound is less than mid value, hence insert to the left child\n![Insert to the left child](Segment_Tree_Left_Insert.png)\n\n2. The target lower bound is greater than mid value, hence insert to the right child\n![Insert to the right child](Segment_Tree_Right_Insert.png)\n\n3. The target crosses over two children, thus split it into two intervals and insert to the corresponding child\n![Split and insert to both children](Segment_Tree_Split_Insert.png)\n\nRecursively calling insert function and update sum_length and sum_weight of the current root node. Return true if insert target successfully.\n\n```python\ndef _add(self, start, end, weight, total_start, total_end):\n    key = (total_start, total_end)\n    if total_start == total_end:\n        self.sum_value[key] += weight\n        self.length[key] = 1 if self.sum_value[key] != 0 else 0\n        return\n    mid = self.start + (self.end - self.start)//2\n    # if segment is on the left hand side of mid point\n    if mid >= end:\n        self._add(start, end, weight, total_start, mid)\n    # if segment is on the right hand side of mid point\n    elif mid < start:\n        self._add(start, end, weight, mid+1, total_end)\n    # if segment cross over the mid point\n    else:\n        self._add(start, mid, weight, total_start, mid)\n        self._add(mid+1, end, weight, mid+1, total_end)\n    self.sum_value[key] = self.sum_value[(total_start, mid)] + self.sum_value[(mid+1, total_end)]   \n    self.length[key] = self.length[(total_start, mid)] + self.length[(mid+1, total_end)]\n\ndef add(self, start, end, weight = 1):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return False\n    self._add(_start, _end, weight, self.start, self.end)\n    return True\n```\n<br/>\n\n## Query\n\nSame as insertion, query the target interval and return corresponding sum_weight or sum_length, for example:\n```python\ndef _find_sum(self, start, end, total_start, total_end):\n    if start == total_start and end == total_end:\n        return self.sum_value([start, end])\n    mid = total_start + (total_end - total_end)//2\n    # if segment is on the left hand side of mid point\n    if mid >= end:\n        return self._find_sum(start, end, total_start, mid)\n    # if segment is on the right hand side of mid point\n    if mid < start:\n        return self._find_sum(start, end, mid+1, total_end)\n    # if segment cross over the mid point\n    return self._find_sum(start, mid, total_start, mid) + self._find_sum(mid+1, end, mid+1, total_end)  \n\ndef find_sum(self, start, end):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return 0\n    return self._find_sum(_start, _end, self.start, self.end)\n```\n\nA full implementation can be referred [here](https://github.com/OhYoooo/Segment-Tree/blob/master/segment_tree.py)\n","slug":"Segment-Tree","published":1,"updated":"2021-01-07T21:13:20.378Z","comments":1,"layout":"post","link":"","_id":"ckjnncqi2000m5opu9rc61g5h","content":"<p>A Segment tree is used for storing information about intervals. The general query and insertion operations have a runtime of <strong>O(logn)</strong>. It will also take extra <strong>O(nlogn)</strong> time to build the tree.<br><a id=\"more\"></a><br><br></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>A segment tree is always a full binary tree which every node other than the leaves has two children (each node has exactly zero or two children). Therefore, if there are n nodes in total (n is always an odd number), there will be (n+1)/2 leaves.</p>\n<p><img src=\"/2019/10/29/Segment-Tree/Full_Binary_Tree.png\" alt=\"A Full Binary Tree\"><br>Each of the leaf will represent an unit interval [n:n], which has a length of 1 and assigned weight. A parent node [n:n+1] will always have two children [n:n] and [n+1:n+1], with sum_length to be set as the sum of lengths of its children and sum_weight to be the sum of its children’s weights. Hence the sum_length of the root node will represent the length converage of the given intervals and the sum_weight will show the accumulative weight.<br><br></p>\n<h2 id=\"Initialization\"><a href=\"#Initialization\" class=\"headerlink\" title=\"Initialization\"></a>Initialization</h2><blockquote>\n<p><strong>Note</strong>: For this implementation, we fix the boundaries of the tree (assign lower and upper bound while initializing). Thus, if the boundary was assinged to be [0:100], then the insertion of [90:110] will only insert the valid partition of the target (which is [90:100]).</p>\n</blockquote>\n<p>First of all, we decide the boundary of our tree and assign the boundary as the root interval. Then find the middle point of the root interval, assign left child to be [lower_bound:mid] and right child to be [mid:upper_bound]. Recursively calling the init function until start == end in [start:end] which is eactly the leave node of the tree.</p>\n<pre><code class=\"python\">def __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.sum_value = &#123;&#125;\n        self.length = &#123;&#125;\n        self._init(start, end)\n\n\ndef _init(self, start, end):\n    self.sum_value[(start, end)] = 0\n    self.length[(start, end)] = 0\n    if start &lt; end:\n        mid = start + (end - start)//2\n        self._init(start, mid)\n        self._init(mid+1, end)\n\n</code></pre>\n<p><br></p>\n<h2 id=\"Insertion\"><a href=\"#Insertion\" class=\"headerlink\" title=\"Insertion\"></a>Insertion</h2><p>Before the insertion, we validate the boundary of the target interval</p>\n<pre><code class=\"python\">def check_bound(self, start, end):\n    _start = max(self.start, start)\n    _end = min(self.end, end)\n    if _start &gt; _end:\n        return None, None\n    return _start, _end\n</code></pre>\n<p>Afterwards, behave the insertion. We may encounter three cases:</p>\n<ol>\n<li><p>The target upper bound is less than mid value, hence insert to the left child<br><img src=\"/2019/10/29/Segment-Tree/Segment_Tree_Left_Insert.png\" alt=\"Insert to the left child\"></p>\n</li>\n<li><p>The target lower bound is greater than mid value, hence insert to the right child<br><img src=\"/2019/10/29/Segment-Tree/Segment_Tree_Right_Insert.png\" alt=\"Insert to the right child\"></p>\n</li>\n<li><p>The target crosses over two children, thus split it into two intervals and insert to the corresponding child<br><img src=\"/2019/10/29/Segment-Tree/Segment_Tree_Split_Insert.png\" alt=\"Split and insert to both children\"></p>\n</li>\n</ol>\n<p>Recursively calling insert function and update sum_length and sum_weight of the current root node. Return true if insert target successfully.</p>\n<pre><code class=\"python\">def _add(self, start, end, weight, total_start, total_end):\n    key = (total_start, total_end)\n    if total_start == total_end:\n        self.sum_value[key] += weight\n        self.length[key] = 1 if self.sum_value[key] != 0 else 0\n        return\n    mid = self.start + (self.end - self.start)//2\n    # if segment is on the left hand side of mid point\n    if mid &gt;= end:\n        self._add(start, end, weight, total_start, mid)\n    # if segment is on the right hand side of mid point\n    elif mid &lt; start:\n        self._add(start, end, weight, mid+1, total_end)\n    # if segment cross over the mid point\n    else:\n        self._add(start, mid, weight, total_start, mid)\n        self._add(mid+1, end, weight, mid+1, total_end)\n    self.sum_value[key] = self.sum_value[(total_start, mid)] + self.sum_value[(mid+1, total_end)]   \n    self.length[key] = self.length[(total_start, mid)] + self.length[(mid+1, total_end)]\n\ndef add(self, start, end, weight = 1):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return False\n    self._add(_start, _end, weight, self.start, self.end)\n    return True\n</code></pre>\n<p><br></p>\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>Same as insertion, query the target interval and return corresponding sum_weight or sum_length, for example:</p>\n<pre><code class=\"python\">def _find_sum(self, start, end, total_start, total_end):\n    if start == total_start and end == total_end:\n        return self.sum_value([start, end])\n    mid = total_start + (total_end - total_end)//2\n    # if segment is on the left hand side of mid point\n    if mid &gt;= end:\n        return self._find_sum(start, end, total_start, mid)\n    # if segment is on the right hand side of mid point\n    if mid &lt; start:\n        return self._find_sum(start, end, mid+1, total_end)\n    # if segment cross over the mid point\n    return self._find_sum(start, mid, total_start, mid) + self._find_sum(mid+1, end, mid+1, total_end)  \n\ndef find_sum(self, start, end):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return 0\n    return self._find_sum(_start, _end, self.start, self.end)\n</code></pre>\n<p>A full implementation can be referred <a href=\"https://github.com/OhYoooo/Segment-Tree/blob/master/segment_tree.py\">here</a></p>\n","site":{"data":{}},"excerpt":"<p>A Segment tree is used for storing information about intervals. The general query and insertion operations have a runtime of <strong>O(logn)</strong>. It will also take extra <strong>O(nlogn)</strong> time to build the tree.<br></p>","more":"<br><br><p></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>A segment tree is always a full binary tree which every node other than the leaves has two children (each node has exactly zero or two children). Therefore, if there are n nodes in total (n is always an odd number), there will be (n+1)/2 leaves.</p>\n<p><img src=\"/2019/10/29/Segment-Tree/Full_Binary_Tree.png\" alt=\"A Full Binary Tree\"><br>Each of the leaf will represent an unit interval [n:n], which has a length of 1 and assigned weight. A parent node [n:n+1] will always have two children [n:n] and [n+1:n+1], with sum_length to be set as the sum of lengths of its children and sum_weight to be the sum of its children’s weights. Hence the sum_length of the root node will represent the length converage of the given intervals and the sum_weight will show the accumulative weight.<br><br></p>\n<h2 id=\"Initialization\"><a href=\"#Initialization\" class=\"headerlink\" title=\"Initialization\"></a>Initialization</h2><blockquote>\n<p><strong>Note</strong>: For this implementation, we fix the boundaries of the tree (assign lower and upper bound while initializing). Thus, if the boundary was assinged to be [0:100], then the insertion of [90:110] will only insert the valid partition of the target (which is [90:100]).</p>\n</blockquote>\n<p>First of all, we decide the boundary of our tree and assign the boundary as the root interval. Then find the middle point of the root interval, assign left child to be [lower_bound:mid] and right child to be [mid:upper_bound]. Recursively calling the init function until start == end in [start:end] which is eactly the leave node of the tree.</p>\n<pre><code class=\"python\">def __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.sum_value = &#123;&#125;\n        self.length = &#123;&#125;\n        self._init(start, end)\n\n\ndef _init(self, start, end):\n    self.sum_value[(start, end)] = 0\n    self.length[(start, end)] = 0\n    if start &lt; end:\n        mid = start + (end - start)//2\n        self._init(start, mid)\n        self._init(mid+1, end)\n\n</code></pre>\n<p><br></p>\n<h2 id=\"Insertion\"><a href=\"#Insertion\" class=\"headerlink\" title=\"Insertion\"></a>Insertion</h2><p>Before the insertion, we validate the boundary of the target interval</p>\n<pre><code class=\"python\">def check_bound(self, start, end):\n    _start = max(self.start, start)\n    _end = min(self.end, end)\n    if _start &gt; _end:\n        return None, None\n    return _start, _end\n</code></pre>\n<p>Afterwards, behave the insertion. We may encounter three cases:</p>\n<ol>\n<li><p>The target upper bound is less than mid value, hence insert to the left child<br><img src=\"/2019/10/29/Segment-Tree/Segment_Tree_Left_Insert.png\" alt=\"Insert to the left child\"></p>\n</li>\n<li><p>The target lower bound is greater than mid value, hence insert to the right child<br><img src=\"/2019/10/29/Segment-Tree/Segment_Tree_Right_Insert.png\" alt=\"Insert to the right child\"></p>\n</li>\n<li><p>The target crosses over two children, thus split it into two intervals and insert to the corresponding child<br><img src=\"/2019/10/29/Segment-Tree/Segment_Tree_Split_Insert.png\" alt=\"Split and insert to both children\"></p>\n</li>\n</ol>\n<p>Recursively calling insert function and update sum_length and sum_weight of the current root node. Return true if insert target successfully.</p>\n<pre><code class=\"python\">def _add(self, start, end, weight, total_start, total_end):\n    key = (total_start, total_end)\n    if total_start == total_end:\n        self.sum_value[key] += weight\n        self.length[key] = 1 if self.sum_value[key] != 0 else 0\n        return\n    mid = self.start + (self.end - self.start)//2\n    # if segment is on the left hand side of mid point\n    if mid &gt;= end:\n        self._add(start, end, weight, total_start, mid)\n    # if segment is on the right hand side of mid point\n    elif mid &lt; start:\n        self._add(start, end, weight, mid+1, total_end)\n    # if segment cross over the mid point\n    else:\n        self._add(start, mid, weight, total_start, mid)\n        self._add(mid+1, end, weight, mid+1, total_end)\n    self.sum_value[key] = self.sum_value[(total_start, mid)] + self.sum_value[(mid+1, total_end)]   \n    self.length[key] = self.length[(total_start, mid)] + self.length[(mid+1, total_end)]\n\ndef add(self, start, end, weight = 1):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return False\n    self._add(_start, _end, weight, self.start, self.end)\n    return True\n</code></pre>\n<p><br></p>\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>Same as insertion, query the target interval and return corresponding sum_weight or sum_length, for example:</p>\n<pre><code class=\"python\">def _find_sum(self, start, end, total_start, total_end):\n    if start == total_start and end == total_end:\n        return self.sum_value([start, end])\n    mid = total_start + (total_end - total_end)//2\n    # if segment is on the left hand side of mid point\n    if mid &gt;= end:\n        return self._find_sum(start, end, total_start, mid)\n    # if segment is on the right hand side of mid point\n    if mid &lt; start:\n        return self._find_sum(start, end, mid+1, total_end)\n    # if segment cross over the mid point\n    return self._find_sum(start, mid, total_start, mid) + self._find_sum(mid+1, end, mid+1, total_end)  \n\ndef find_sum(self, start, end):\n    _start, _end = self.check_bound(start, end)\n    if _start == None:\n        return 0\n    return self._find_sum(_start, _end, self.start, self.end)\n</code></pre>\n<p>A full implementation can be referred <a href=\"https://github.com/OhYoooo/Segment-Tree/blob/master/segment_tree.py\">here</a></p>"},{"title":"Suffix Tree","date":"2019-07-23T00:07:12.000Z","photos":["../images/SuffixTree_Cover.JPG"],"_content":"Suffix tree is a data structure aimming at solving **string** related problems in **linear time**\n<!-- more -->\n\n## String Match Algorithm\n\nA common string match problem always contains:\n- **Text** as an array of length n: T[n]\n- **Pattern** as an array of length m which m <=n: P[m]\n- **Valid Shift** which is the offset of the first character of the pattern showing up in the target text\n![String Match Problem Sample](PrefixTree_StringProblem.JPG)\n\nWe usually use two methods to solve string match problem:\n- Naive String Matching Algorithm\n- Knuth-Morris-Pratt Algorithm（KMP Algorithm)\n\nThe algorithm always consists with two steps: **Preprocessing** and **Matching**, and the total runtime will be accordingly the sum of two procedures.\n> Naive String Matching: O( (n-m)m )\n> KMP: O( m + n )\n\nSuch algorithms are all doing preprocessings on the pattern to boost the searching procedure and the best runtime perfomance will be O(m) on preprocessing where m represents the length of the pattern. On contrary, is there a preprocessing which can be applied on **text** to speed up the whole process? This is the key reason why I am moving to **suffix tree**, which is a data structure doing preprocessing on text.\n</br>\n\n## Suffix Tree\n\nMy previous post used to introduce a prefix tree, for example:\n![prefix tree sample](prefix_tree.JPG)\nIndividual nodes branch out from the same prefix. As you can see, there are some nodes which only have one child. Let's try to compress them together:\n![prefix tree sample](Compressed_PrefixTree.JPG)\nAfter the compression, we get a **Compressed Prefix Tree**. A compressed prefix tree, also called **Compressed Tire** is the fundamental of suffix tree. Besides, the key values stored in each nodes of a suffix tree is all the possible suffix.\n\nFor example, for a single word (**Text**) `banana\\0`, we have the following set of suffix:\n```\nbanana\\0\nanana\\0\nnana\\0\nana\\0\nna\\0\na\\0\n\\0\n```\nConstruct a prefix tree using the above key words:\n![Banana Prefix Tree](Banana_PrefixTree.JPG)\nAfterwards, compress it:\n![Banana Suffix Tree](Banana_SuffixTree.JPG)\nHere, by lising all the suffix and making a compressed prefix tree, we obtain a suffix tree.\n\nHowever, there is a faster way to construct a suffix tree which can be done in the linear time (By Esko Ukkonen in 1997). Let's start from a simple example before exploring more complicated cases.\n</br>\n\n## \"abc\"\nUnlike prefix tree, the edge in suffix tree will no longer represent a single character(key); instead, it will represent a list of integers [from, to] which interprets the indexes in the original text. Therefore, each edge can represent abitrary length of characters and consume constant memory.\n\nConsidering a simple string ` abc ` which has no duplicated character. Start from the first character ` a `, construct an edge from root node to its leaf:\n![Sample \"abc\" -- a](PrefixTree_a.JPG)\nWhere [0, #] represents start from offset 0 and end up at offset #. Currently # equals to 1, which represents character ` a `.\n\nAfter finishing the procudure of the first character, let's move forward to the second one ` b `:\n![Sample \"abc\" -- ab](PrefixTree_ab.JPG)\nThen do the same thing on the last character ` c `:\n![Sample \"abc\" -- abc](PrefixTree_abc.JPG)\nWe maintain a pointer pointing to the current end character of the text. Each time when we add a new edge for a new character, we will update the # point. Thus, the runtime for each procedure is O(1) and hence the overall runtime to construct this \"abc\" suffix tree will be O(n).\n</br>\n\n## \"abcabxabcd\"\n\"abc\" is a really simple example since there is no duplicated characters in the text. Now let's consider a more complicated text ` abcabxabcd `. Before we get started to construct, there are two more concepts that need to be introduced\n\n- **active point**: a structure indicates `active_node`, `active_value` and `offset`\n- **remainder**: remaining characters to be inserted\n\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n</br>\n\n### The first character => `a`\n\nWe append ` a ` directly to the root node\n1. Before we append the node, set `remainder = remainder + 1` (0 + 1), states that we are going to insert a new node\n2. Append 'a' to the root node\n3. After the insertion, a new node is appended to the tree, hence `remainder = remainder - 1` (1 - 1)\n4. After the whole procudure:\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n\n![Sample \"abcabx\" -- abc](SuffixTree-Sample-a.JPG)\n\n### The second character => `b`\n\n1. Before we append the node, set `remainder = remainder + 1` (0 + 1), states that we are going to insert a new node\n2. Expend every leave node; hence change 'a' to 'ab'\n3. Query the current node, which is the root node, since there is no prefix starts with 'b', we need to create a new node and insert 'b'. (The prefix for the previous prefix will be [a, ab] now)\n3. After the insertion, a new node is appended to the tree, hence `remainder = remainder - 1` (1 - 1)\n4. After the whole procudure:\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n\n![Sample \"abcabx\" -- abc](SuffixTree-Sample-ab.JPG)\n\n### The third character => `c`\n\nSame as the procedure of inserting 'b'\n![Sample \"abcabx\" -- abc](SuffixTree-Sample-abc.JPG)\n\n### The fourth character => `a` again\n\nThis time we encounter the same character we have already inserted\n1. Before we append the node, set `remainder = remainder + 1` (0 + 1)\n2. Expend every leave node; hence change 'abc' -> 'abca', 'bc' -> 'bca', 'c' -> 'ca'\n3. Query the current node, which is the root node, find out the there already exist a prefix which starts from 'a'; hence we modify the `active_point`:\n```\nactive_point = (root, 'a', 1)\nremainder = 1\n```\n> **active_node**: the parent node is still root node hence remain unchanged\n> **active_value**: the current value will be set to 'a'\n> **offset**: the offset of the current value, which is 1 (states the first character in the prefix)\n> **remainder** after the insertion, no new node is inserted in the tree, hence remainder keep the same (remainder = 1)\n\n\n### The fifth character => `b` again\n\nStill duplicated with previous nodes\n1. `remainder = remainder + 1` (1 + 1)\n2. Expend every leave node; hence change 'abca' -> 'abcab', 'bca' -> 'bcab', 'ca' -> 'cab', `active_point[1] = 'a' -> 'ab'`\n3. Start from **active_node**, query the **active_value** in its prefix and the prefix of its sub-nodes. Modify **active_point** to the following:\n```\nactive_point = (root, 'ab', 2)\nremainder = 2\n```\n> **active_node**: the active node is still root node hence remain unchanged.\n> **active_value**: the active value has been expended to 'ab'.\n> **offset**: 'ab' already exists in node 'ab' (which is the sub-node of root node), the offset of matched index is 2.\n> **remainder**: after the insertion, no new node is inserted in the tree, hence remainder keep the same\n\nBy this step, we still have the same amount of nodes inserted into the tree (3 nodes)\n![Sample \"abcabx\" -- abcab](SuffixTree-Sample-abcab.JPG)\n\n### The sixth character => `x`\n\n1. `remainder = remainder + 1` (2 + 1).\n2. Expend every leave node; hence change 'abcab' -> 'abcabx', 'bcab' -> 'bcabx', 'cab' -> 'cabx', `active_point[1] = 'ab' -> 'abx'`.\n3. Start from **active_node**, query the **active_value** in its prefix and the prefix of its sub-nodes. Since there isn't a prefix which perfectly matches the pattern 'abx'; hence this is the point where to **split**:\n\n### Split\n\nWhen we find out the exact place where the prefix starts to mismatch the pattern, then we need to insert new nodes to our tree to append this new suffix character. For example, prefix 'abc' and pattern 'abx' share the same two characters 'ab' at the beginning and mismatch at the third character (offset = 3), then we can simply split at the third index to make a tree like 'ab' -> ['c', 'x']. We will do the same thing here:\n1. We already know the offset (which is active_point[2]).\n2. Split node **'abcabx' to 'ab' -> ['cabx', 'x']**.\n3. Modify **active_point** and **remainder**:\n```\nactive_point = (root, 'bx', 1)\nremainder = 2\n```\n> **active_node**: still root node\n> **active_value**: 'abx' has been inserted, then we need to insert 'bx', then 'x' and so on so far\n> **offset**: active_point[1] changes from 'abx' to 'bx', then the offset will also shift from 2 to 1\n> **remainder**: a new node is inserted, hence `remainder = remainder - 1` (3 - 1)\n>> **Why do we change offset as well?**\n>> This is actually a trick to reduce runtime. For each step of insertion, we will make an sub suffix tree by characters we already have (inserted). For example, if we have a string 'abc' and we have inserted the last character 'c' in the suffix tree, then all possible suffix of string (text) 'abc', which is 'abc', 'bc' and 'c' must exist in the suffix tree, either implicitly (have not splitted yet, like the fourth insertion above) or explicitly (has its own node). Hence, by inserting 'ab +x' and splitting the node, we know that 'b +x' must exist in the tree; therefore, we reduce the offset by 1 to state that the offset of the next split will start from the first character of the node 'b...'.\n\n![Sample \"abcabx\" -- abcabx](SuffixTree-Sample-abcabx.JPG)\n4. The remainder is still greater than 0; hence we will keep inserting 'bx'. Do the same thing here, start from the **parent_node**, query the sub prefix 'bx'. Found 'bx' in the prefix 'bcabx'; hence split the node **'bcabx' to 'b' -> ['cabx', 'x']**\n5. Modify **active_point** and **remainder**:\n```\nactive_point = (root, 'x', 0)\nremainder = 1\n```\n> **active_node**: still root node\n> **active_value**: 'bx' has been inserted, then we need to insert 'x'\n> **offset**: active_point[1] changes from 'bx' to 'x', then the offset will also shift from 1 to 0\n> **remainder**: a new node is inserted, hence `remainder = remainder - 1` (2 - 1)\n\n![Sample \"abcabx\" -- abcabx - 2](SuffixTree-Sample-abcabx-2.JPG)\n\n6. Since remainder is still greater than 0, we have to do another insertion to reduce it to zero. However, the character 'x' hasn't been inserted before, then we append 'x' directly to the root node.\n7. Modify **active_point** and **remainder**:\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n> **active_node**: still root node\n> **active_value**: the last character 'x' has been inserted, reduce to empty\n> **remainder**: a new node is inserted, hence `remainder = remainder - 1` (1- 1)\n\n![Sample \"abcabx\" -- abcabx - 3](SuffixTree-Sample-abcabx-3.JPG)\n\n**Is there a relationship between two splitted node `ab` and `b`?**\nWhen we separated 'ab' and 'b', we modified the previous 'abcabx' node first, then modified the second node 'bcabx'. If we encounter another string starting with 'abk', then after 'abk' is inserted, we definately need to insert 'bk' as well. Repeating the same query will slow down the whole procedure; thus, we can add a link from 'ab' to 'b' to indicate that if an update is made in node 'ab', then another insertion will be done on the link target 'b' afterwards.\n![Sample \"abcabx\" -- abcabx - 4](SuffixTree-Sample-abcabx-4.JPG)\n\n### The seventh character => `a`\n\nSame as the fourth insertion 'a'\n```\nactive_point = (root, 'a', 1)\nremainder = 1\n```\n\n### The eighth character = `b`\n\nSame as the fifth insertion 'b'\n```\nactive_point = (root, 'ab', 2)\nremainder = 2\n```\n\n### The ninth character => `c`\n\nWhen we try to insert 'c'\n1. `remainder= remainder + 1` (3)\n2. Expand every leave node\n![Sample \"abcabxabc\" -- abcabxabc](SuffixTree-Sample-abcabxabc.JPG)\n3. Query 'abc', find 'abc' under the parent node 'ab'\n> **Extra Procedure**:\n> **active_point**: The node 'cabxabc' constains the last character of the target prefix ('abc'), whose parent node is 'ab'; thus, set `active_point[0] = 'ab'`.\n> **active_node**: set `active_point[1] = 'abc'`.\n> **offset**: the offset of the character 'c' in its node string('cabxabc') which is 1. Set `active_point[2] = 1`\n> **remainder**: After the modification, no new node is inserted, hence **remainder** keeps unchanged.\n\n```\nactive_point = ('ab', 'abc', 1)\nremainder = 3\n```\n\n### The last character => `d`\n\nWe will use the link built-up in previous steps to simplify the updates.\n1. `remainder = remainder + 1` (3 + 1)\n2. Expand every leave nodes\n3. Query the current parent node ('ab'), find if there exist any prefix contains the target 'abcd'? Since there isn't any prefix match the pattern, then this will be a split point.\n\n### Split\n\n> **active_point[0] = 'ab'**: start from the curent parent node ('ab'), looking into its sub nodes.\n> **active_point[1] = 'abcd'**: 'd' is inserted into the active value .\n> **active_point[2] = 1**: parent node 'ab' already contains 'ab', and its sub-node 'cabxabcd' starts from the third character 'c' at offset 0. Then the second character of 'cabxabcd', which is 'a' mismatches the following target 'd'; hence this is where to be splitted, at offset 1 (of 'cabxabcd').\n\n1. Split **'cabxabcd' to c -> [abxabcd, d]**\n2. Since a new node has been inserted, then `remainder = remainder - 1` (3). Remainder is still greater than 0, we still cannot stop here.\n```\nactive_point = ('ab', 'abcd', 1)\nremainder = 3\n```\n\n![Sample \"abcabxabc\" -- 10 - 1](SuffixTree-Sample-abcabxabc-10-1.JPG)\n3. active_point[0] ('ab') has a link pointing to 'b'. We change the active_point according to the link target.\n> **active_point[0] = 'b'**\n> **active_point[1] = 'bcd'**\n> **active_point[2] remains unchange**\n\n4. start from active_point[0], query its sub-nodes. 'b' is the parent node and its sub-node 'cabxabcd' contains 'c' at offset 0 and mismatch at offset 1; hence we split its sub-node **'cabxabcd' to 'c' -> [abxabcd, d]**. Since a new node is inserted, `remainder = remainder - 1` (2) and `active_point[1] = 'cd'`\n![Sample \"abcabxabc\" -- 10 - 2](SuffixTree-Sample-abcabxabc-10-2.JPG)\n5. At this point, **active_node** reduce to empty and does not have any link, then we reset **active_point[0] = 'root'\n6. Insert 'cd', start from the current node (active_point[0]), which is the 'root', query its sub-nose for active_point[1] ('cd'). Node 'cabxabcd' contains target character 'c' and mismatches at offset 1. Split **'cabxabcd' to c -> [abxabcd, d]**. **remainder = remainder - 1** (1).                         \n![Sample \"abcabxabc\" -- 10 - 3](SuffixTree-Sample-abcabxabc-10-3.JPG)\n\n7. Finally insert 'd' directly on root node and `remainder = remainder - 1` which is 0\n![Sample \"abcabxabc\" -- 10 - 4](SuffixTree-Sample-abcabxabc-10-4.JPG)\n","source":"_posts/Suffix-Tree.md","raw":"---\ntitle: Suffix Tree\ndate: 2019-07-22 20:07:12\ntags: [Suffix Tree, Algorithm, Data Structure]\nphotos: [\"../images/SuffixTree_Cover.JPG\"]\n---\nSuffix tree is a data structure aimming at solving **string** related problems in **linear time**\n<!-- more -->\n\n## String Match Algorithm\n\nA common string match problem always contains:\n- **Text** as an array of length n: T[n]\n- **Pattern** as an array of length m which m <=n: P[m]\n- **Valid Shift** which is the offset of the first character of the pattern showing up in the target text\n![String Match Problem Sample](PrefixTree_StringProblem.JPG)\n\nWe usually use two methods to solve string match problem:\n- Naive String Matching Algorithm\n- Knuth-Morris-Pratt Algorithm（KMP Algorithm)\n\nThe algorithm always consists with two steps: **Preprocessing** and **Matching**, and the total runtime will be accordingly the sum of two procedures.\n> Naive String Matching: O( (n-m)m )\n> KMP: O( m + n )\n\nSuch algorithms are all doing preprocessings on the pattern to boost the searching procedure and the best runtime perfomance will be O(m) on preprocessing where m represents the length of the pattern. On contrary, is there a preprocessing which can be applied on **text** to speed up the whole process? This is the key reason why I am moving to **suffix tree**, which is a data structure doing preprocessing on text.\n</br>\n\n## Suffix Tree\n\nMy previous post used to introduce a prefix tree, for example:\n![prefix tree sample](prefix_tree.JPG)\nIndividual nodes branch out from the same prefix. As you can see, there are some nodes which only have one child. Let's try to compress them together:\n![prefix tree sample](Compressed_PrefixTree.JPG)\nAfter the compression, we get a **Compressed Prefix Tree**. A compressed prefix tree, also called **Compressed Tire** is the fundamental of suffix tree. Besides, the key values stored in each nodes of a suffix tree is all the possible suffix.\n\nFor example, for a single word (**Text**) `banana\\0`, we have the following set of suffix:\n```\nbanana\\0\nanana\\0\nnana\\0\nana\\0\nna\\0\na\\0\n\\0\n```\nConstruct a prefix tree using the above key words:\n![Banana Prefix Tree](Banana_PrefixTree.JPG)\nAfterwards, compress it:\n![Banana Suffix Tree](Banana_SuffixTree.JPG)\nHere, by lising all the suffix and making a compressed prefix tree, we obtain a suffix tree.\n\nHowever, there is a faster way to construct a suffix tree which can be done in the linear time (By Esko Ukkonen in 1997). Let's start from a simple example before exploring more complicated cases.\n</br>\n\n## \"abc\"\nUnlike prefix tree, the edge in suffix tree will no longer represent a single character(key); instead, it will represent a list of integers [from, to] which interprets the indexes in the original text. Therefore, each edge can represent abitrary length of characters and consume constant memory.\n\nConsidering a simple string ` abc ` which has no duplicated character. Start from the first character ` a `, construct an edge from root node to its leaf:\n![Sample \"abc\" -- a](PrefixTree_a.JPG)\nWhere [0, #] represents start from offset 0 and end up at offset #. Currently # equals to 1, which represents character ` a `.\n\nAfter finishing the procudure of the first character, let's move forward to the second one ` b `:\n![Sample \"abc\" -- ab](PrefixTree_ab.JPG)\nThen do the same thing on the last character ` c `:\n![Sample \"abc\" -- abc](PrefixTree_abc.JPG)\nWe maintain a pointer pointing to the current end character of the text. Each time when we add a new edge for a new character, we will update the # point. Thus, the runtime for each procedure is O(1) and hence the overall runtime to construct this \"abc\" suffix tree will be O(n).\n</br>\n\n## \"abcabxabcd\"\n\"abc\" is a really simple example since there is no duplicated characters in the text. Now let's consider a more complicated text ` abcabxabcd `. Before we get started to construct, there are two more concepts that need to be introduced\n\n- **active point**: a structure indicates `active_node`, `active_value` and `offset`\n- **remainder**: remaining characters to be inserted\n\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n</br>\n\n### The first character => `a`\n\nWe append ` a ` directly to the root node\n1. Before we append the node, set `remainder = remainder + 1` (0 + 1), states that we are going to insert a new node\n2. Append 'a' to the root node\n3. After the insertion, a new node is appended to the tree, hence `remainder = remainder - 1` (1 - 1)\n4. After the whole procudure:\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n\n![Sample \"abcabx\" -- abc](SuffixTree-Sample-a.JPG)\n\n### The second character => `b`\n\n1. Before we append the node, set `remainder = remainder + 1` (0 + 1), states that we are going to insert a new node\n2. Expend every leave node; hence change 'a' to 'ab'\n3. Query the current node, which is the root node, since there is no prefix starts with 'b', we need to create a new node and insert 'b'. (The prefix for the previous prefix will be [a, ab] now)\n3. After the insertion, a new node is appended to the tree, hence `remainder = remainder - 1` (1 - 1)\n4. After the whole procudure:\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n\n![Sample \"abcabx\" -- abc](SuffixTree-Sample-ab.JPG)\n\n### The third character => `c`\n\nSame as the procedure of inserting 'b'\n![Sample \"abcabx\" -- abc](SuffixTree-Sample-abc.JPG)\n\n### The fourth character => `a` again\n\nThis time we encounter the same character we have already inserted\n1. Before we append the node, set `remainder = remainder + 1` (0 + 1)\n2. Expend every leave node; hence change 'abc' -> 'abca', 'bc' -> 'bca', 'c' -> 'ca'\n3. Query the current node, which is the root node, find out the there already exist a prefix which starts from 'a'; hence we modify the `active_point`:\n```\nactive_point = (root, 'a', 1)\nremainder = 1\n```\n> **active_node**: the parent node is still root node hence remain unchanged\n> **active_value**: the current value will be set to 'a'\n> **offset**: the offset of the current value, which is 1 (states the first character in the prefix)\n> **remainder** after the insertion, no new node is inserted in the tree, hence remainder keep the same (remainder = 1)\n\n\n### The fifth character => `b` again\n\nStill duplicated with previous nodes\n1. `remainder = remainder + 1` (1 + 1)\n2. Expend every leave node; hence change 'abca' -> 'abcab', 'bca' -> 'bcab', 'ca' -> 'cab', `active_point[1] = 'a' -> 'ab'`\n3. Start from **active_node**, query the **active_value** in its prefix and the prefix of its sub-nodes. Modify **active_point** to the following:\n```\nactive_point = (root, 'ab', 2)\nremainder = 2\n```\n> **active_node**: the active node is still root node hence remain unchanged.\n> **active_value**: the active value has been expended to 'ab'.\n> **offset**: 'ab' already exists in node 'ab' (which is the sub-node of root node), the offset of matched index is 2.\n> **remainder**: after the insertion, no new node is inserted in the tree, hence remainder keep the same\n\nBy this step, we still have the same amount of nodes inserted into the tree (3 nodes)\n![Sample \"abcabx\" -- abcab](SuffixTree-Sample-abcab.JPG)\n\n### The sixth character => `x`\n\n1. `remainder = remainder + 1` (2 + 1).\n2. Expend every leave node; hence change 'abcab' -> 'abcabx', 'bcab' -> 'bcabx', 'cab' -> 'cabx', `active_point[1] = 'ab' -> 'abx'`.\n3. Start from **active_node**, query the **active_value** in its prefix and the prefix of its sub-nodes. Since there isn't a prefix which perfectly matches the pattern 'abx'; hence this is the point where to **split**:\n\n### Split\n\nWhen we find out the exact place where the prefix starts to mismatch the pattern, then we need to insert new nodes to our tree to append this new suffix character. For example, prefix 'abc' and pattern 'abx' share the same two characters 'ab' at the beginning and mismatch at the third character (offset = 3), then we can simply split at the third index to make a tree like 'ab' -> ['c', 'x']. We will do the same thing here:\n1. We already know the offset (which is active_point[2]).\n2. Split node **'abcabx' to 'ab' -> ['cabx', 'x']**.\n3. Modify **active_point** and **remainder**:\n```\nactive_point = (root, 'bx', 1)\nremainder = 2\n```\n> **active_node**: still root node\n> **active_value**: 'abx' has been inserted, then we need to insert 'bx', then 'x' and so on so far\n> **offset**: active_point[1] changes from 'abx' to 'bx', then the offset will also shift from 2 to 1\n> **remainder**: a new node is inserted, hence `remainder = remainder - 1` (3 - 1)\n>> **Why do we change offset as well?**\n>> This is actually a trick to reduce runtime. For each step of insertion, we will make an sub suffix tree by characters we already have (inserted). For example, if we have a string 'abc' and we have inserted the last character 'c' in the suffix tree, then all possible suffix of string (text) 'abc', which is 'abc', 'bc' and 'c' must exist in the suffix tree, either implicitly (have not splitted yet, like the fourth insertion above) or explicitly (has its own node). Hence, by inserting 'ab +x' and splitting the node, we know that 'b +x' must exist in the tree; therefore, we reduce the offset by 1 to state that the offset of the next split will start from the first character of the node 'b...'.\n\n![Sample \"abcabx\" -- abcabx](SuffixTree-Sample-abcabx.JPG)\n4. The remainder is still greater than 0; hence we will keep inserting 'bx'. Do the same thing here, start from the **parent_node**, query the sub prefix 'bx'. Found 'bx' in the prefix 'bcabx'; hence split the node **'bcabx' to 'b' -> ['cabx', 'x']**\n5. Modify **active_point** and **remainder**:\n```\nactive_point = (root, 'x', 0)\nremainder = 1\n```\n> **active_node**: still root node\n> **active_value**: 'bx' has been inserted, then we need to insert 'x'\n> **offset**: active_point[1] changes from 'bx' to 'x', then the offset will also shift from 1 to 0\n> **remainder**: a new node is inserted, hence `remainder = remainder - 1` (2 - 1)\n\n![Sample \"abcabx\" -- abcabx - 2](SuffixTree-Sample-abcabx-2.JPG)\n\n6. Since remainder is still greater than 0, we have to do another insertion to reduce it to zero. However, the character 'x' hasn't been inserted before, then we append 'x' directly to the root node.\n7. Modify **active_point** and **remainder**:\n```\nactive_point = (root, '', 0)\nremainder = 0\n```\n> **active_node**: still root node\n> **active_value**: the last character 'x' has been inserted, reduce to empty\n> **remainder**: a new node is inserted, hence `remainder = remainder - 1` (1- 1)\n\n![Sample \"abcabx\" -- abcabx - 3](SuffixTree-Sample-abcabx-3.JPG)\n\n**Is there a relationship between two splitted node `ab` and `b`?**\nWhen we separated 'ab' and 'b', we modified the previous 'abcabx' node first, then modified the second node 'bcabx'. If we encounter another string starting with 'abk', then after 'abk' is inserted, we definately need to insert 'bk' as well. Repeating the same query will slow down the whole procedure; thus, we can add a link from 'ab' to 'b' to indicate that if an update is made in node 'ab', then another insertion will be done on the link target 'b' afterwards.\n![Sample \"abcabx\" -- abcabx - 4](SuffixTree-Sample-abcabx-4.JPG)\n\n### The seventh character => `a`\n\nSame as the fourth insertion 'a'\n```\nactive_point = (root, 'a', 1)\nremainder = 1\n```\n\n### The eighth character = `b`\n\nSame as the fifth insertion 'b'\n```\nactive_point = (root, 'ab', 2)\nremainder = 2\n```\n\n### The ninth character => `c`\n\nWhen we try to insert 'c'\n1. `remainder= remainder + 1` (3)\n2. Expand every leave node\n![Sample \"abcabxabc\" -- abcabxabc](SuffixTree-Sample-abcabxabc.JPG)\n3. Query 'abc', find 'abc' under the parent node 'ab'\n> **Extra Procedure**:\n> **active_point**: The node 'cabxabc' constains the last character of the target prefix ('abc'), whose parent node is 'ab'; thus, set `active_point[0] = 'ab'`.\n> **active_node**: set `active_point[1] = 'abc'`.\n> **offset**: the offset of the character 'c' in its node string('cabxabc') which is 1. Set `active_point[2] = 1`\n> **remainder**: After the modification, no new node is inserted, hence **remainder** keeps unchanged.\n\n```\nactive_point = ('ab', 'abc', 1)\nremainder = 3\n```\n\n### The last character => `d`\n\nWe will use the link built-up in previous steps to simplify the updates.\n1. `remainder = remainder + 1` (3 + 1)\n2. Expand every leave nodes\n3. Query the current parent node ('ab'), find if there exist any prefix contains the target 'abcd'? Since there isn't any prefix match the pattern, then this will be a split point.\n\n### Split\n\n> **active_point[0] = 'ab'**: start from the curent parent node ('ab'), looking into its sub nodes.\n> **active_point[1] = 'abcd'**: 'd' is inserted into the active value .\n> **active_point[2] = 1**: parent node 'ab' already contains 'ab', and its sub-node 'cabxabcd' starts from the third character 'c' at offset 0. Then the second character of 'cabxabcd', which is 'a' mismatches the following target 'd'; hence this is where to be splitted, at offset 1 (of 'cabxabcd').\n\n1. Split **'cabxabcd' to c -> [abxabcd, d]**\n2. Since a new node has been inserted, then `remainder = remainder - 1` (3). Remainder is still greater than 0, we still cannot stop here.\n```\nactive_point = ('ab', 'abcd', 1)\nremainder = 3\n```\n\n![Sample \"abcabxabc\" -- 10 - 1](SuffixTree-Sample-abcabxabc-10-1.JPG)\n3. active_point[0] ('ab') has a link pointing to 'b'. We change the active_point according to the link target.\n> **active_point[0] = 'b'**\n> **active_point[1] = 'bcd'**\n> **active_point[2] remains unchange**\n\n4. start from active_point[0], query its sub-nodes. 'b' is the parent node and its sub-node 'cabxabcd' contains 'c' at offset 0 and mismatch at offset 1; hence we split its sub-node **'cabxabcd' to 'c' -> [abxabcd, d]**. Since a new node is inserted, `remainder = remainder - 1` (2) and `active_point[1] = 'cd'`\n![Sample \"abcabxabc\" -- 10 - 2](SuffixTree-Sample-abcabxabc-10-2.JPG)\n5. At this point, **active_node** reduce to empty and does not have any link, then we reset **active_point[0] = 'root'\n6. Insert 'cd', start from the current node (active_point[0]), which is the 'root', query its sub-nose for active_point[1] ('cd'). Node 'cabxabcd' contains target character 'c' and mismatches at offset 1. Split **'cabxabcd' to c -> [abxabcd, d]**. **remainder = remainder - 1** (1).                         \n![Sample \"abcabxabc\" -- 10 - 3](SuffixTree-Sample-abcabxabc-10-3.JPG)\n\n7. Finally insert 'd' directly on root node and `remainder = remainder - 1` which is 0\n![Sample \"abcabxabc\" -- 10 - 4](SuffixTree-Sample-abcabxabc-10-4.JPG)\n","slug":"Suffix-Tree","published":1,"updated":"2021-01-07T21:13:20.380Z","comments":1,"layout":"post","link":"","_id":"ckjnncqij002d5opu8hog7oj1","content":"<p>Suffix tree is a data structure aimming at solving <strong>string</strong> related problems in <strong>linear time</strong><br><a id=\"more\"></a></p>\n<h2 id=\"String-Match-Algorithm\"><a href=\"#String-Match-Algorithm\" class=\"headerlink\" title=\"String Match Algorithm\"></a>String Match Algorithm</h2><p>A common string match problem always contains:</p>\n<ul>\n<li><strong>Text</strong> as an array of length n: T[n]</li>\n<li><strong>Pattern</strong> as an array of length m which m &lt;=n: P[m]</li>\n<li><strong>Valid Shift</strong> which is the offset of the first character of the pattern showing up in the target text<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_StringProblem.JPG\" alt=\"String Match Problem Sample\"></li>\n</ul>\n<p>We usually use two methods to solve string match problem:</p>\n<ul>\n<li>Naive String Matching Algorithm</li>\n<li>Knuth-Morris-Pratt Algorithm（KMP Algorithm)</li>\n</ul>\n<p>The algorithm always consists with two steps: <strong>Preprocessing</strong> and <strong>Matching</strong>, and the total runtime will be accordingly the sum of two procedures.</p>\n<blockquote>\n<p>Naive String Matching: O( (n-m)m )<br>KMP: O( m + n )</p>\n</blockquote>\n<p>Such algorithms are all doing preprocessings on the pattern to boost the searching procedure and the best runtime perfomance will be O(m) on preprocessing where m represents the length of the pattern. On contrary, is there a preprocessing which can be applied on <strong>text</strong> to speed up the whole process? This is the key reason why I am moving to <strong>suffix tree</strong>, which is a data structure doing preprocessing on text.<br><br></p>\n<h2 id=\"Suffix-Tree\"><a href=\"#Suffix-Tree\" class=\"headerlink\" title=\"Suffix Tree\"></a>Suffix Tree</h2><p>My previous post used to introduce a prefix tree, for example:<br><img src=\"/2019/07/22/Suffix-Tree/prefix_tree.JPG\" alt=\"prefix tree sample\"><br>Individual nodes branch out from the same prefix. As you can see, there are some nodes which only have one child. Let’s try to compress them together:<br><img src=\"/2019/07/22/Suffix-Tree/Compressed_PrefixTree.JPG\" alt=\"prefix tree sample\"><br>After the compression, we get a <strong>Compressed Prefix Tree</strong>. A compressed prefix tree, also called <strong>Compressed Tire</strong> is the fundamental of suffix tree. Besides, the key values stored in each nodes of a suffix tree is all the possible suffix.</p>\n<p>For example, for a single word (<strong>Text</strong>) <code>banana\\0</code>, we have the following set of suffix:</p>\n<pre><code>banana\\0\nanana\\0\nnana\\0\nana\\0\nna\\0\na\\0\n\\0\n</code></pre><p>Construct a prefix tree using the above key words:<br><img src=\"/2019/07/22/Suffix-Tree/Banana_PrefixTree.JPG\" alt=\"Banana Prefix Tree\"><br>Afterwards, compress it:<br><img src=\"/2019/07/22/Suffix-Tree/Banana_SuffixTree.JPG\" alt=\"Banana Suffix Tree\"><br>Here, by lising all the suffix and making a compressed prefix tree, we obtain a suffix tree.</p>\n<p>However, there is a faster way to construct a suffix tree which can be done in the linear time (By Esko Ukkonen in 1997). Let’s start from a simple example before exploring more complicated cases.<br><br></p>\n<h2 id=\"“abc”\"><a href=\"#“abc”\" class=\"headerlink\" title=\"“abc”\"></a>“abc”</h2><p>Unlike prefix tree, the edge in suffix tree will no longer represent a single character(key); instead, it will represent a list of integers [from, to] which interprets the indexes in the original text. Therefore, each edge can represent abitrary length of characters and consume constant memory.</p>\n<p>Considering a simple string <code>abc</code> which has no duplicated character. Start from the first character <code>a</code>, construct an edge from root node to its leaf:<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_a.JPG\" alt=\"Sample &quot;abc&quot; -- a\"><br>Where [0, #] represents start from offset 0 and end up at offset #. Currently # equals to 1, which represents character <code>a</code>.</p>\n<p>After finishing the procudure of the first character, let’s move forward to the second one <code>b</code>:<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_ab.JPG\" alt=\"Sample &quot;abc&quot; -- ab\"><br>Then do the same thing on the last character <code>c</code>:<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_abc.JPG\" alt=\"Sample &quot;abc&quot; -- abc\"><br>We maintain a pointer pointing to the current end character of the text. Each time when we add a new edge for a new character, we will update the # point. Thus, the runtime for each procedure is O(1) and hence the overall runtime to construct this “abc” suffix tree will be O(n).<br><br></p>\n<h2 id=\"“abcabxabcd”\"><a href=\"#“abcabxabcd”\" class=\"headerlink\" title=\"“abcabxabcd”\"></a>“abcabxabcd”</h2><p>“abc” is a really simple example since there is no duplicated characters in the text. Now let’s consider a more complicated text <code>abcabxabcd</code>. Before we get started to construct, there are two more concepts that need to be introduced</p>\n<ul>\n<li><strong>active point</strong>: a structure indicates <code>active_node</code>, <code>active_value</code> and <code>offset</code></li>\n<li><strong>remainder</strong>: remaining characters to be inserted</li>\n</ul>\n<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre><p><br></p>\n<h3 id=\"The-first-character-gt-a\"><a href=\"#The-first-character-gt-a\" class=\"headerlink\" title=\"The first character =&gt; a\"></a>The first character =&gt; <code>a</code></h3><p>We append <code>a</code> directly to the root node</p>\n<ol>\n<li>Before we append the node, set <code>remainder = remainder + 1</code> (0 + 1), states that we are going to insert a new node</li>\n<li>Append ‘a’ to the root node</li>\n<li>After the insertion, a new node is appended to the tree, hence <code>remainder = remainder - 1</code> (1 - 1)</li>\n<li>After the whole procudure:<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre></li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-a.JPG\" alt=\"Sample &quot;abcabx&quot; -- abc\"></p>\n<h3 id=\"The-second-character-gt-b\"><a href=\"#The-second-character-gt-b\" class=\"headerlink\" title=\"The second character =&gt; b\"></a>The second character =&gt; <code>b</code></h3><ol>\n<li>Before we append the node, set <code>remainder = remainder + 1</code> (0 + 1), states that we are going to insert a new node</li>\n<li>Expend every leave node; hence change ‘a’ to ‘ab’</li>\n<li>Query the current node, which is the root node, since there is no prefix starts with ‘b’, we need to create a new node and insert ‘b’. (The prefix for the previous prefix will be [a, ab] now)</li>\n<li>After the insertion, a new node is appended to the tree, hence <code>remainder = remainder - 1</code> (1 - 1)</li>\n<li>After the whole procudure:<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre></li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-ab.JPG\" alt=\"Sample &quot;abcabx&quot; -- abc\"></p>\n<h3 id=\"The-third-character-gt-c\"><a href=\"#The-third-character-gt-c\" class=\"headerlink\" title=\"The third character =&gt; c\"></a>The third character =&gt; <code>c</code></h3><p>Same as the procedure of inserting ‘b’<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abc.JPG\" alt=\"Sample &quot;abcabx&quot; -- abc\"></p>\n<h3 id=\"The-fourth-character-gt-a-again\"><a href=\"#The-fourth-character-gt-a-again\" class=\"headerlink\" title=\"The fourth character =&gt; a again\"></a>The fourth character =&gt; <code>a</code> again</h3><p>This time we encounter the same character we have already inserted</p>\n<ol>\n<li>Before we append the node, set <code>remainder = remainder + 1</code> (0 + 1)</li>\n<li>Expend every leave node; hence change ‘abc’ -&gt; ‘abca’, ‘bc’ -&gt; ‘bca’, ‘c’ -&gt; ‘ca’</li>\n<li>Query the current node, which is the root node, find out the there already exist a prefix which starts from ‘a’; hence we modify the <code>active_point</code>:<pre><code>active_point = (root, &#39;a&#39;, 1)\nremainder = 1\n</code></pre><blockquote>\n<p><strong>active_node</strong>: the parent node is still root node hence remain unchanged<br><strong>active_value</strong>: the current value will be set to ‘a’<br><strong>offset</strong>: the offset of the current value, which is 1 (states the first character in the prefix)<br><strong>remainder</strong> after the insertion, no new node is inserted in the tree, hence remainder keep the same (remainder = 1)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"The-fifth-character-gt-b-again\"><a href=\"#The-fifth-character-gt-b-again\" class=\"headerlink\" title=\"The fifth character =&gt; b again\"></a>The fifth character =&gt; <code>b</code> again</h3><p>Still duplicated with previous nodes</p>\n<ol>\n<li><code>remainder = remainder + 1</code> (1 + 1)</li>\n<li>Expend every leave node; hence change ‘abca’ -&gt; ‘abcab’, ‘bca’ -&gt; ‘bcab’, ‘ca’ -&gt; ‘cab’, <code>active_point[1] = &#39;a&#39; -&gt; &#39;ab&#39;</code></li>\n<li>Start from <strong>active_node</strong>, query the <strong>active_value</strong> in its prefix and the prefix of its sub-nodes. Modify <strong>active_point</strong> to the following:<pre><code>active_point = (root, &#39;ab&#39;, 2)\nremainder = 2\n</code></pre><blockquote>\n<p><strong>active_node</strong>: the active node is still root node hence remain unchanged.<br><strong>active_value</strong>: the active value has been expended to ‘ab’.<br><strong>offset</strong>: ‘ab’ already exists in node ‘ab’ (which is the sub-node of root node), the offset of matched index is 2.<br><strong>remainder</strong>: after the insertion, no new node is inserted in the tree, hence remainder keep the same</p>\n</blockquote>\n</li>\n</ol>\n<p>By this step, we still have the same amount of nodes inserted into the tree (3 nodes)<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcab.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcab\"></p>\n<h3 id=\"The-sixth-character-gt-x\"><a href=\"#The-sixth-character-gt-x\" class=\"headerlink\" title=\"The sixth character =&gt; x\"></a>The sixth character =&gt; <code>x</code></h3><ol>\n<li><code>remainder = remainder + 1</code> (2 + 1).</li>\n<li>Expend every leave node; hence change ‘abcab’ -&gt; ‘abcabx’, ‘bcab’ -&gt; ‘bcabx’, ‘cab’ -&gt; ‘cabx’, <code>active_point[1] = &#39;ab&#39; -&gt; &#39;abx&#39;</code>.</li>\n<li>Start from <strong>active_node</strong>, query the <strong>active_value</strong> in its prefix and the prefix of its sub-nodes. Since there isn’t a prefix which perfectly matches the pattern ‘abx’; hence this is the point where to <strong>split</strong>:</li>\n</ol>\n<h3 id=\"Split\"><a href=\"#Split\" class=\"headerlink\" title=\"Split\"></a>Split</h3><p>When we find out the exact place where the prefix starts to mismatch the pattern, then we need to insert new nodes to our tree to append this new suffix character. For example, prefix ‘abc’ and pattern ‘abx’ share the same two characters ‘ab’ at the beginning and mismatch at the third character (offset = 3), then we can simply split at the third index to make a tree like ‘ab’ -&gt; [‘c’, ‘x’]. We will do the same thing here:</p>\n<ol>\n<li>We already know the offset (which is active_point[2]).</li>\n<li>Split node <strong>‘abcabx’ to ‘ab’ -&gt; [‘cabx’, ‘x’]</strong>.</li>\n<li>Modify <strong>active_point</strong> and <strong>remainder</strong>:<pre><code>active_point = (root, &#39;bx&#39;, 1)\nremainder = 2\n</code></pre><blockquote>\n<p><strong>active_node</strong>: still root node<br><strong>active_value</strong>: ‘abx’ has been inserted, then we need to insert ‘bx’, then ‘x’ and so on so far<br><strong>offset</strong>: active_point[1] changes from ‘abx’ to ‘bx’, then the offset will also shift from 2 to 1<br><strong>remainder</strong>: a new node is inserted, hence <code>remainder = remainder - 1</code> (3 - 1)</p>\n<blockquote>\n<p><strong>Why do we change offset as well?</strong><br>This is actually a trick to reduce runtime. For each step of insertion, we will make an sub suffix tree by characters we already have (inserted). For example, if we have a string ‘abc’ and we have inserted the last character ‘c’ in the suffix tree, then all possible suffix of string (text) ‘abc’, which is ‘abc’, ‘bc’ and ‘c’ must exist in the suffix tree, either implicitly (have not splitted yet, like the fourth insertion above) or explicitly (has its own node). Hence, by inserting ‘ab +x’ and splitting the node, we know that ‘b +x’ must exist in the tree; therefore, we reduce the offset by 1 to state that the offset of the next split will start from the first character of the node ‘b…’.</p>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx\"></p>\n<ol start=\"4\">\n<li>The remainder is still greater than 0; hence we will keep inserting ‘bx’. Do the same thing here, start from the <strong>parent_node</strong>, query the sub prefix ‘bx’. Found ‘bx’ in the prefix ‘bcabx’; hence split the node <strong>‘bcabx’ to ‘b’ -&gt; [‘cabx’, ‘x’]</strong></li>\n<li>Modify <strong>active_point</strong> and <strong>remainder</strong>:<pre><code>active_point = (root, &#39;x&#39;, 0)\nremainder = 1\n</code></pre><blockquote>\n<p><strong>active_node</strong>: still root node<br><strong>active_value</strong>: ‘bx’ has been inserted, then we need to insert ‘x’<br><strong>offset</strong>: active_point[1] changes from ‘bx’ to ‘x’, then the offset will also shift from 1 to 0<br><strong>remainder</strong>: a new node is inserted, hence <code>remainder = remainder - 1</code> (2 - 1)</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-2.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx - 2\"></p>\n<ol start=\"6\">\n<li>Since remainder is still greater than 0, we have to do another insertion to reduce it to zero. However, the character ‘x’ hasn’t been inserted before, then we append ‘x’ directly to the root node.</li>\n<li>Modify <strong>active_point</strong> and <strong>remainder</strong>:<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre><blockquote>\n<p><strong>active_node</strong>: still root node<br><strong>active_value</strong>: the last character ‘x’ has been inserted, reduce to empty<br><strong>remainder</strong>: a new node is inserted, hence <code>remainder = remainder - 1</code> (1- 1)</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-3.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx - 3\"></p>\n<p><strong>Is there a relationship between two splitted node <code>ab</code> and <code>b</code>?</strong><br>When we separated ‘ab’ and ‘b’, we modified the previous ‘abcabx’ node first, then modified the second node ‘bcabx’. If we encounter another string starting with ‘abk’, then after ‘abk’ is inserted, we definately need to insert ‘bk’ as well. Repeating the same query will slow down the whole procedure; thus, we can add a link from ‘ab’ to ‘b’ to indicate that if an update is made in node ‘ab’, then another insertion will be done on the link target ‘b’ afterwards.<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-4.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx - 4\"></p>\n<h3 id=\"The-seventh-character-gt-a\"><a href=\"#The-seventh-character-gt-a\" class=\"headerlink\" title=\"The seventh character =&gt; a\"></a>The seventh character =&gt; <code>a</code></h3><p>Same as the fourth insertion ‘a’</p>\n<pre><code>active_point = (root, &#39;a&#39;, 1)\nremainder = 1\n</code></pre><h3 id=\"The-eighth-character-b\"><a href=\"#The-eighth-character-b\" class=\"headerlink\" title=\"The eighth character = b\"></a>The eighth character = <code>b</code></h3><p>Same as the fifth insertion ‘b’</p>\n<pre><code>active_point = (root, &#39;ab&#39;, 2)\nremainder = 2\n</code></pre><h3 id=\"The-ninth-character-gt-c\"><a href=\"#The-ninth-character-gt-c\" class=\"headerlink\" title=\"The ninth character =&gt; c\"></a>The ninth character =&gt; <code>c</code></h3><p>When we try to insert ‘c’</p>\n<ol>\n<li><code>remainder= remainder + 1</code> (3)</li>\n<li>Expand every leave node<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- abcabxabc\"></li>\n<li>Query ‘abc’, find ‘abc’ under the parent node ‘ab’<blockquote>\n<p><strong>Extra Procedure</strong>:<br><strong>active_point</strong>: The node ‘cabxabc’ constains the last character of the target prefix (‘abc’), whose parent node is ‘ab’; thus, set <code>active_point[0] = &#39;ab&#39;</code>.<br><strong>active_node</strong>: set <code>active_point[1] = &#39;abc&#39;</code>.<br><strong>offset</strong>: the offset of the character ‘c’ in its node string(‘cabxabc’) which is 1. Set <code>active_point[2] = 1</code><br><strong>remainder</strong>: After the modification, no new node is inserted, hence <strong>remainder</strong> keeps unchanged.</p>\n</blockquote>\n</li>\n</ol>\n<pre><code>active_point = (&#39;ab&#39;, &#39;abc&#39;, 1)\nremainder = 3\n</code></pre><h3 id=\"The-last-character-gt-d\"><a href=\"#The-last-character-gt-d\" class=\"headerlink\" title=\"The last character =&gt; d\"></a>The last character =&gt; <code>d</code></h3><p>We will use the link built-up in previous steps to simplify the updates.</p>\n<ol>\n<li><code>remainder = remainder + 1</code> (3 + 1)</li>\n<li>Expand every leave nodes</li>\n<li>Query the current parent node (‘ab’), find if there exist any prefix contains the target ‘abcd’? Since there isn’t any prefix match the pattern, then this will be a split point.</li>\n</ol>\n<h3 id=\"Split-1\"><a href=\"#Split-1\" class=\"headerlink\" title=\"Split\"></a>Split</h3><blockquote>\n<p><strong>active_point[0] = ‘ab’</strong>: start from the curent parent node (‘ab’), looking into its sub nodes.<br><strong>active_point[1] = ‘abcd’</strong>: ‘d’ is inserted into the active value .<br><strong>active_point[2] = 1</strong>: parent node ‘ab’ already contains ‘ab’, and its sub-node ‘cabxabcd’ starts from the third character ‘c’ at offset 0. Then the second character of ‘cabxabcd’, which is ‘a’ mismatches the following target ‘d’; hence this is where to be splitted, at offset 1 (of ‘cabxabcd’).</p>\n</blockquote>\n<ol>\n<li>Split <strong>‘cabxabcd’ to c -&gt; [abxabcd, d]</strong></li>\n<li>Since a new node has been inserted, then <code>remainder = remainder - 1</code> (3). Remainder is still greater than 0, we still cannot stop here.<pre><code>active_point = (&#39;ab&#39;, &#39;abcd&#39;, 1)\nremainder = 3\n</code></pre></li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-1.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 1\"></p>\n<ol start=\"3\">\n<li><p>active_point[0] (‘ab’) has a link pointing to ‘b’. We change the active_point according to the link target.</p>\n<blockquote>\n<p><strong>active_point[0] = ‘b’</strong><br><strong>active_point[1] = ‘bcd’</strong><br><strong>active_point[2] remains unchange</strong></p>\n</blockquote>\n</li>\n<li><p>start from active_point[0], query its sub-nodes. ‘b’ is the parent node and its sub-node ‘cabxabcd’ contains ‘c’ at offset 0 and mismatch at offset 1; hence we split its sub-node <strong>‘cabxabcd’ to ‘c’ -&gt; [abxabcd, d]</strong>. Since a new node is inserted, <code>remainder = remainder - 1</code> (2) and <code>active_point[1] = &#39;cd&#39;</code><br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-2.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 2\"></p>\n</li>\n<li>At this point, <strong>active_node</strong> reduce to empty and does not have any link, then we reset **active_point[0] = ‘root’</li>\n<li><p>Insert ‘cd’, start from the current node (active_point[0]), which is the ‘root’, query its sub-nose for active_point[1] (‘cd’). Node ‘cabxabcd’ contains target character ‘c’ and mismatches at offset 1. Split <strong>‘cabxabcd’ to c -&gt; [abxabcd, d]</strong>. <strong>remainder = remainder - 1</strong> (1).<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-3.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 3\"></p>\n</li>\n<li><p>Finally insert ‘d’ directly on root node and <code>remainder = remainder - 1</code> which is 0<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-4.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 4\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Suffix tree is a data structure aimming at solving <strong>string</strong> related problems in <strong>linear time</strong><br></p>","more":"<p></p>\n<h2 id=\"String-Match-Algorithm\"><a href=\"#String-Match-Algorithm\" class=\"headerlink\" title=\"String Match Algorithm\"></a>String Match Algorithm</h2><p>A common string match problem always contains:</p>\n<ul>\n<li><strong>Text</strong> as an array of length n: T[n]</li>\n<li><strong>Pattern</strong> as an array of length m which m &lt;=n: P[m]</li>\n<li><strong>Valid Shift</strong> which is the offset of the first character of the pattern showing up in the target text<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_StringProblem.JPG\" alt=\"String Match Problem Sample\"></li>\n</ul>\n<p>We usually use two methods to solve string match problem:</p>\n<ul>\n<li>Naive String Matching Algorithm</li>\n<li>Knuth-Morris-Pratt Algorithm（KMP Algorithm)</li>\n</ul>\n<p>The algorithm always consists with two steps: <strong>Preprocessing</strong> and <strong>Matching</strong>, and the total runtime will be accordingly the sum of two procedures.</p>\n<blockquote>\n<p>Naive String Matching: O( (n-m)m )<br>KMP: O( m + n )</p>\n</blockquote>\n<p>Such algorithms are all doing preprocessings on the pattern to boost the searching procedure and the best runtime perfomance will be O(m) on preprocessing where m represents the length of the pattern. On contrary, is there a preprocessing which can be applied on <strong>text</strong> to speed up the whole process? This is the key reason why I am moving to <strong>suffix tree</strong>, which is a data structure doing preprocessing on text.<br><br></p>\n<h2 id=\"Suffix-Tree\"><a href=\"#Suffix-Tree\" class=\"headerlink\" title=\"Suffix Tree\"></a>Suffix Tree</h2><p>My previous post used to introduce a prefix tree, for example:<br><img src=\"/2019/07/22/Suffix-Tree/prefix_tree.JPG\" alt=\"prefix tree sample\"><br>Individual nodes branch out from the same prefix. As you can see, there are some nodes which only have one child. Let’s try to compress them together:<br><img src=\"/2019/07/22/Suffix-Tree/Compressed_PrefixTree.JPG\" alt=\"prefix tree sample\"><br>After the compression, we get a <strong>Compressed Prefix Tree</strong>. A compressed prefix tree, also called <strong>Compressed Tire</strong> is the fundamental of suffix tree. Besides, the key values stored in each nodes of a suffix tree is all the possible suffix.</p>\n<p>For example, for a single word (<strong>Text</strong>) <code>banana\\0</code>, we have the following set of suffix:</p>\n<pre><code>banana\\0\nanana\\0\nnana\\0\nana\\0\nna\\0\na\\0\n\\0\n</code></pre><p>Construct a prefix tree using the above key words:<br><img src=\"/2019/07/22/Suffix-Tree/Banana_PrefixTree.JPG\" alt=\"Banana Prefix Tree\"><br>Afterwards, compress it:<br><img src=\"/2019/07/22/Suffix-Tree/Banana_SuffixTree.JPG\" alt=\"Banana Suffix Tree\"><br>Here, by lising all the suffix and making a compressed prefix tree, we obtain a suffix tree.</p>\n<p>However, there is a faster way to construct a suffix tree which can be done in the linear time (By Esko Ukkonen in 1997). Let’s start from a simple example before exploring more complicated cases.<br><br></p>\n<h2 id=\"“abc”\"><a href=\"#“abc”\" class=\"headerlink\" title=\"“abc”\"></a>“abc”</h2><p>Unlike prefix tree, the edge in suffix tree will no longer represent a single character(key); instead, it will represent a list of integers [from, to] which interprets the indexes in the original text. Therefore, each edge can represent abitrary length of characters and consume constant memory.</p>\n<p>Considering a simple string <code>abc</code> which has no duplicated character. Start from the first character <code>a</code>, construct an edge from root node to its leaf:<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_a.JPG\" alt=\"Sample &quot;abc&quot; -- a\"><br>Where [0, #] represents start from offset 0 and end up at offset #. Currently # equals to 1, which represents character <code>a</code>.</p>\n<p>After finishing the procudure of the first character, let’s move forward to the second one <code>b</code>:<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_ab.JPG\" alt=\"Sample &quot;abc&quot; -- ab\"><br>Then do the same thing on the last character <code>c</code>:<br><img src=\"/2019/07/22/Suffix-Tree/PrefixTree_abc.JPG\" alt=\"Sample &quot;abc&quot; -- abc\"><br>We maintain a pointer pointing to the current end character of the text. Each time when we add a new edge for a new character, we will update the # point. Thus, the runtime for each procedure is O(1) and hence the overall runtime to construct this “abc” suffix tree will be O(n).<br><br></p>\n<h2 id=\"“abcabxabcd”\"><a href=\"#“abcabxabcd”\" class=\"headerlink\" title=\"“abcabxabcd”\"></a>“abcabxabcd”</h2><p>“abc” is a really simple example since there is no duplicated characters in the text. Now let’s consider a more complicated text <code>abcabxabcd</code>. Before we get started to construct, there are two more concepts that need to be introduced</p>\n<ul>\n<li><strong>active point</strong>: a structure indicates <code>active_node</code>, <code>active_value</code> and <code>offset</code></li>\n<li><strong>remainder</strong>: remaining characters to be inserted</li>\n</ul>\n<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre><p><br></p>\n<h3 id=\"The-first-character-gt-a\"><a href=\"#The-first-character-gt-a\" class=\"headerlink\" title=\"The first character =&gt; a\"></a>The first character =&gt; <code>a</code></h3><p>We append <code>a</code> directly to the root node</p>\n<ol>\n<li>Before we append the node, set <code>remainder = remainder + 1</code> (0 + 1), states that we are going to insert a new node</li>\n<li>Append ‘a’ to the root node</li>\n<li>After the insertion, a new node is appended to the tree, hence <code>remainder = remainder - 1</code> (1 - 1)</li>\n<li>After the whole procudure:<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre></li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-a.JPG\" alt=\"Sample &quot;abcabx&quot; -- abc\"></p>\n<h3 id=\"The-second-character-gt-b\"><a href=\"#The-second-character-gt-b\" class=\"headerlink\" title=\"The second character =&gt; b\"></a>The second character =&gt; <code>b</code></h3><ol>\n<li>Before we append the node, set <code>remainder = remainder + 1</code> (0 + 1), states that we are going to insert a new node</li>\n<li>Expend every leave node; hence change ‘a’ to ‘ab’</li>\n<li>Query the current node, which is the root node, since there is no prefix starts with ‘b’, we need to create a new node and insert ‘b’. (The prefix for the previous prefix will be [a, ab] now)</li>\n<li>After the insertion, a new node is appended to the tree, hence <code>remainder = remainder - 1</code> (1 - 1)</li>\n<li>After the whole procudure:<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre></li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-ab.JPG\" alt=\"Sample &quot;abcabx&quot; -- abc\"></p>\n<h3 id=\"The-third-character-gt-c\"><a href=\"#The-third-character-gt-c\" class=\"headerlink\" title=\"The third character =&gt; c\"></a>The third character =&gt; <code>c</code></h3><p>Same as the procedure of inserting ‘b’<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abc.JPG\" alt=\"Sample &quot;abcabx&quot; -- abc\"></p>\n<h3 id=\"The-fourth-character-gt-a-again\"><a href=\"#The-fourth-character-gt-a-again\" class=\"headerlink\" title=\"The fourth character =&gt; a again\"></a>The fourth character =&gt; <code>a</code> again</h3><p>This time we encounter the same character we have already inserted</p>\n<ol>\n<li>Before we append the node, set <code>remainder = remainder + 1</code> (0 + 1)</li>\n<li>Expend every leave node; hence change ‘abc’ -&gt; ‘abca’, ‘bc’ -&gt; ‘bca’, ‘c’ -&gt; ‘ca’</li>\n<li>Query the current node, which is the root node, find out the there already exist a prefix which starts from ‘a’; hence we modify the <code>active_point</code>:<pre><code>active_point = (root, &#39;a&#39;, 1)\nremainder = 1\n</code></pre><blockquote>\n<p><strong>active_node</strong>: the parent node is still root node hence remain unchanged<br><strong>active_value</strong>: the current value will be set to ‘a’<br><strong>offset</strong>: the offset of the current value, which is 1 (states the first character in the prefix)<br><strong>remainder</strong> after the insertion, no new node is inserted in the tree, hence remainder keep the same (remainder = 1)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"The-fifth-character-gt-b-again\"><a href=\"#The-fifth-character-gt-b-again\" class=\"headerlink\" title=\"The fifth character =&gt; b again\"></a>The fifth character =&gt; <code>b</code> again</h3><p>Still duplicated with previous nodes</p>\n<ol>\n<li><code>remainder = remainder + 1</code> (1 + 1)</li>\n<li>Expend every leave node; hence change ‘abca’ -&gt; ‘abcab’, ‘bca’ -&gt; ‘bcab’, ‘ca’ -&gt; ‘cab’, <code>active_point[1] = &#39;a&#39; -&gt; &#39;ab&#39;</code></li>\n<li>Start from <strong>active_node</strong>, query the <strong>active_value</strong> in its prefix and the prefix of its sub-nodes. Modify <strong>active_point</strong> to the following:<pre><code>active_point = (root, &#39;ab&#39;, 2)\nremainder = 2\n</code></pre><blockquote>\n<p><strong>active_node</strong>: the active node is still root node hence remain unchanged.<br><strong>active_value</strong>: the active value has been expended to ‘ab’.<br><strong>offset</strong>: ‘ab’ already exists in node ‘ab’ (which is the sub-node of root node), the offset of matched index is 2.<br><strong>remainder</strong>: after the insertion, no new node is inserted in the tree, hence remainder keep the same</p>\n</blockquote>\n</li>\n</ol>\n<p>By this step, we still have the same amount of nodes inserted into the tree (3 nodes)<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcab.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcab\"></p>\n<h3 id=\"The-sixth-character-gt-x\"><a href=\"#The-sixth-character-gt-x\" class=\"headerlink\" title=\"The sixth character =&gt; x\"></a>The sixth character =&gt; <code>x</code></h3><ol>\n<li><code>remainder = remainder + 1</code> (2 + 1).</li>\n<li>Expend every leave node; hence change ‘abcab’ -&gt; ‘abcabx’, ‘bcab’ -&gt; ‘bcabx’, ‘cab’ -&gt; ‘cabx’, <code>active_point[1] = &#39;ab&#39; -&gt; &#39;abx&#39;</code>.</li>\n<li>Start from <strong>active_node</strong>, query the <strong>active_value</strong> in its prefix and the prefix of its sub-nodes. Since there isn’t a prefix which perfectly matches the pattern ‘abx’; hence this is the point where to <strong>split</strong>:</li>\n</ol>\n<h3 id=\"Split\"><a href=\"#Split\" class=\"headerlink\" title=\"Split\"></a>Split</h3><p>When we find out the exact place where the prefix starts to mismatch the pattern, then we need to insert new nodes to our tree to append this new suffix character. For example, prefix ‘abc’ and pattern ‘abx’ share the same two characters ‘ab’ at the beginning and mismatch at the third character (offset = 3), then we can simply split at the third index to make a tree like ‘ab’ -&gt; [‘c’, ‘x’]. We will do the same thing here:</p>\n<ol>\n<li>We already know the offset (which is active_point[2]).</li>\n<li>Split node <strong>‘abcabx’ to ‘ab’ -&gt; [‘cabx’, ‘x’]</strong>.</li>\n<li>Modify <strong>active_point</strong> and <strong>remainder</strong>:<pre><code>active_point = (root, &#39;bx&#39;, 1)\nremainder = 2\n</code></pre><blockquote>\n<p><strong>active_node</strong>: still root node<br><strong>active_value</strong>: ‘abx’ has been inserted, then we need to insert ‘bx’, then ‘x’ and so on so far<br><strong>offset</strong>: active_point[1] changes from ‘abx’ to ‘bx’, then the offset will also shift from 2 to 1<br><strong>remainder</strong>: a new node is inserted, hence <code>remainder = remainder - 1</code> (3 - 1)</p>\n<blockquote>\n<p><strong>Why do we change offset as well?</strong><br>This is actually a trick to reduce runtime. For each step of insertion, we will make an sub suffix tree by characters we already have (inserted). For example, if we have a string ‘abc’ and we have inserted the last character ‘c’ in the suffix tree, then all possible suffix of string (text) ‘abc’, which is ‘abc’, ‘bc’ and ‘c’ must exist in the suffix tree, either implicitly (have not splitted yet, like the fourth insertion above) or explicitly (has its own node). Hence, by inserting ‘ab +x’ and splitting the node, we know that ‘b +x’ must exist in the tree; therefore, we reduce the offset by 1 to state that the offset of the next split will start from the first character of the node ‘b…’.</p>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx\"></p>\n<ol start=\"4\">\n<li>The remainder is still greater than 0; hence we will keep inserting ‘bx’. Do the same thing here, start from the <strong>parent_node</strong>, query the sub prefix ‘bx’. Found ‘bx’ in the prefix ‘bcabx’; hence split the node <strong>‘bcabx’ to ‘b’ -&gt; [‘cabx’, ‘x’]</strong></li>\n<li>Modify <strong>active_point</strong> and <strong>remainder</strong>:<pre><code>active_point = (root, &#39;x&#39;, 0)\nremainder = 1\n</code></pre><blockquote>\n<p><strong>active_node</strong>: still root node<br><strong>active_value</strong>: ‘bx’ has been inserted, then we need to insert ‘x’<br><strong>offset</strong>: active_point[1] changes from ‘bx’ to ‘x’, then the offset will also shift from 1 to 0<br><strong>remainder</strong>: a new node is inserted, hence <code>remainder = remainder - 1</code> (2 - 1)</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-2.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx - 2\"></p>\n<ol start=\"6\">\n<li>Since remainder is still greater than 0, we have to do another insertion to reduce it to zero. However, the character ‘x’ hasn’t been inserted before, then we append ‘x’ directly to the root node.</li>\n<li>Modify <strong>active_point</strong> and <strong>remainder</strong>:<pre><code>active_point = (root, &#39;&#39;, 0)\nremainder = 0\n</code></pre><blockquote>\n<p><strong>active_node</strong>: still root node<br><strong>active_value</strong>: the last character ‘x’ has been inserted, reduce to empty<br><strong>remainder</strong>: a new node is inserted, hence <code>remainder = remainder - 1</code> (1- 1)</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-3.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx - 3\"></p>\n<p><strong>Is there a relationship between two splitted node <code>ab</code> and <code>b</code>?</strong><br>When we separated ‘ab’ and ‘b’, we modified the previous ‘abcabx’ node first, then modified the second node ‘bcabx’. If we encounter another string starting with ‘abk’, then after ‘abk’ is inserted, we definately need to insert ‘bk’ as well. Repeating the same query will slow down the whole procedure; thus, we can add a link from ‘ab’ to ‘b’ to indicate that if an update is made in node ‘ab’, then another insertion will be done on the link target ‘b’ afterwards.<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabx-4.JPG\" alt=\"Sample &quot;abcabx&quot; -- abcabx - 4\"></p>\n<h3 id=\"The-seventh-character-gt-a\"><a href=\"#The-seventh-character-gt-a\" class=\"headerlink\" title=\"The seventh character =&gt; a\"></a>The seventh character =&gt; <code>a</code></h3><p>Same as the fourth insertion ‘a’</p>\n<pre><code>active_point = (root, &#39;a&#39;, 1)\nremainder = 1\n</code></pre><h3 id=\"The-eighth-character-b\"><a href=\"#The-eighth-character-b\" class=\"headerlink\" title=\"The eighth character = b\"></a>The eighth character = <code>b</code></h3><p>Same as the fifth insertion ‘b’</p>\n<pre><code>active_point = (root, &#39;ab&#39;, 2)\nremainder = 2\n</code></pre><h3 id=\"The-ninth-character-gt-c\"><a href=\"#The-ninth-character-gt-c\" class=\"headerlink\" title=\"The ninth character =&gt; c\"></a>The ninth character =&gt; <code>c</code></h3><p>When we try to insert ‘c’</p>\n<ol>\n<li><code>remainder= remainder + 1</code> (3)</li>\n<li>Expand every leave node<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- abcabxabc\"></li>\n<li>Query ‘abc’, find ‘abc’ under the parent node ‘ab’<blockquote>\n<p><strong>Extra Procedure</strong>:<br><strong>active_point</strong>: The node ‘cabxabc’ constains the last character of the target prefix (‘abc’), whose parent node is ‘ab’; thus, set <code>active_point[0] = &#39;ab&#39;</code>.<br><strong>active_node</strong>: set <code>active_point[1] = &#39;abc&#39;</code>.<br><strong>offset</strong>: the offset of the character ‘c’ in its node string(‘cabxabc’) which is 1. Set <code>active_point[2] = 1</code><br><strong>remainder</strong>: After the modification, no new node is inserted, hence <strong>remainder</strong> keeps unchanged.</p>\n</blockquote>\n</li>\n</ol>\n<pre><code>active_point = (&#39;ab&#39;, &#39;abc&#39;, 1)\nremainder = 3\n</code></pre><h3 id=\"The-last-character-gt-d\"><a href=\"#The-last-character-gt-d\" class=\"headerlink\" title=\"The last character =&gt; d\"></a>The last character =&gt; <code>d</code></h3><p>We will use the link built-up in previous steps to simplify the updates.</p>\n<ol>\n<li><code>remainder = remainder + 1</code> (3 + 1)</li>\n<li>Expand every leave nodes</li>\n<li>Query the current parent node (‘ab’), find if there exist any prefix contains the target ‘abcd’? Since there isn’t any prefix match the pattern, then this will be a split point.</li>\n</ol>\n<h3 id=\"Split-1\"><a href=\"#Split-1\" class=\"headerlink\" title=\"Split\"></a>Split</h3><blockquote>\n<p><strong>active_point[0] = ‘ab’</strong>: start from the curent parent node (‘ab’), looking into its sub nodes.<br><strong>active_point[1] = ‘abcd’</strong>: ‘d’ is inserted into the active value .<br><strong>active_point[2] = 1</strong>: parent node ‘ab’ already contains ‘ab’, and its sub-node ‘cabxabcd’ starts from the third character ‘c’ at offset 0. Then the second character of ‘cabxabcd’, which is ‘a’ mismatches the following target ‘d’; hence this is where to be splitted, at offset 1 (of ‘cabxabcd’).</p>\n</blockquote>\n<ol>\n<li>Split <strong>‘cabxabcd’ to c -&gt; [abxabcd, d]</strong></li>\n<li>Since a new node has been inserted, then <code>remainder = remainder - 1</code> (3). Remainder is still greater than 0, we still cannot stop here.<pre><code>active_point = (&#39;ab&#39;, &#39;abcd&#39;, 1)\nremainder = 3\n</code></pre></li>\n</ol>\n<p><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-1.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 1\"></p>\n<ol start=\"3\">\n<li><p>active_point[0] (‘ab’) has a link pointing to ‘b’. We change the active_point according to the link target.</p>\n<blockquote>\n<p><strong>active_point[0] = ‘b’</strong><br><strong>active_point[1] = ‘bcd’</strong><br><strong>active_point[2] remains unchange</strong></p>\n</blockquote>\n</li>\n<li><p>start from active_point[0], query its sub-nodes. ‘b’ is the parent node and its sub-node ‘cabxabcd’ contains ‘c’ at offset 0 and mismatch at offset 1; hence we split its sub-node <strong>‘cabxabcd’ to ‘c’ -&gt; [abxabcd, d]</strong>. Since a new node is inserted, <code>remainder = remainder - 1</code> (2) and <code>active_point[1] = &#39;cd&#39;</code><br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-2.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 2\"></p>\n</li>\n<li>At this point, <strong>active_node</strong> reduce to empty and does not have any link, then we reset **active_point[0] = ‘root’</li>\n<li><p>Insert ‘cd’, start from the current node (active_point[0]), which is the ‘root’, query its sub-nose for active_point[1] (‘cd’). Node ‘cabxabcd’ contains target character ‘c’ and mismatches at offset 1. Split <strong>‘cabxabcd’ to c -&gt; [abxabcd, d]</strong>. <strong>remainder = remainder - 1</strong> (1).<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-3.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 3\"></p>\n</li>\n<li><p>Finally insert ‘d’ directly on root node and <code>remainder = remainder - 1</code> which is 0<br><img src=\"/2019/07/22/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-4.JPG\" alt=\"Sample &quot;abcabxabc&quot; -- 10 - 4\"></p>\n</li>\n</ol>"},{"title":"Slice in Golang","date":"2019-05-12T19:35:54.000Z","photos":["../images/GoSlice.JPG"],"_content":"This article is a summary from [Andrew Gerrand's blog](https://blog.golang.org/go-slices-usage-and-internals)\n\nGolang has an unique type **slice** which is an abstraction built on top of Go's **array** type. They are really similar but providing different means of working with sequences of typed data. So to understand slices we must first understand arrays.<!-- more -->\n</br>\n\n## Arrays in Go\nAn array in Go has to specify its **length** and **element type**. **The size of the array is fixed and its length is part of its type**. For example `[4]int` and `[5]int` are distinct and have different types even though they all store integers. And contrary to **C/C++**, the initial value of an array will be filled with **0** if it is not initialized.\n```Go\nvar a [4]int\na[0] = 1\ni := a[0]\nj := a[1]\n//i == 1\n//j == 0\n```\nGo's arrays are values. **An array variable denotes the entire array**; it is not a pointer to the first array element (as would be the case in C/C++). This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that's a pointer to an array, not an array)\n\nAn array literal can be specified like so:\n```Go\nb := [2]string{\"aa\", \"bb\"}\n```\nOr, you can have the compiler counting the array elements for you:\n```Go\nb := [...]string{\"aa\", \"bb\"}\n```\nIn both cases, the type of b is **[2]string**.\n</br>\n\n## Slices in Go\nArrays are a bit inflexible, so you don't see them too often in the code. Slices, though, are everywhere. Unlike an array type, a slice type has no specific length:\n```Go\nb := []string{\"aa\", \"bb\"}\n```\nWe can use build-in function `make()` to define a slice:\n```Go\nfunc make([]T, len, cap) []T\n```\n**T** represent the type of the elements. Function **make** accepts type, length and capacity(optional) as parameters. When it is called, **make** will allocate an array and returns a slice that refers to that array\n```Go\nvar s []byte\ns = make([]byte, 5, 5)\n//s == []byte{0, 0, 0, 0, 0}\n```\nIf **cap** is not specified, it will be init as the value of **len**. We can use the build-in functions `len()` and `cap()` to check the length and capacity of a slice:\n```Go\nlen(s) == 5\ncap(s) == 5\n```\nThe zero value of a slice is **nil**. The len and cap functions will both return **0** for a nil slice.\n\nA slice can also be formed by \"slicing\" an existing slice or array, for example, the expression b[1:4] creates a slice including elements 1 through 3 of b:\n```Go\nb := []byte{'a', 'b', 'c', 'd', 'e', 'f'}\n// b[1:4] == []byte{'b', 'c', 'd'}, sharing the same storage as b\n```\nThe start and end indices of a slice expression are optional; they default to zero and the slice's length respectively:\n```Go\n// b[:2] == []byte{'a', 'b'}\n// b[2:] == []byte{'c', 'd', 'e', 'f'}\n// b[:] == b\n```\nThis is also the syntax to create a slice given an array:\n```Go\nx := [3]string{\"Лайка\", \"Белка\", \"Стрелка\"}\ns := x[:] // a slice referencing the storage of x\n```\n\nSlicing does not copy the slice's data. It creates a new slice value that points to the original array. This makes slice operations as efficient as manipulating array indices. Therefore, modifying the elements of a re-slice modifies the elements of the original slice:\n```Go\nd := []byte{'a', 'b', 'c', 'd'}\ne := d[2:]\n// e == []byte{'c', 'd'}\n\n// now change the re-slice will also change the original slice  \ne[1] = 'm'\n// e == []byte{'c', 'm'}\n// d == []byte{'a', 'b', 'c', 'm'}\n```\nA slice cannot be grown beyond its capacity. Attempting to do so will cause a ***runtime panic***, just as when indexing outside the bounds of a slice or array. Similarly, slices cannot be re-sliced below zero to access earlier elements in the array.\n</br>\n\n## Double the capacity of a slice\nTo increase the capacity of a slice, we must create a new, larger slice and **copy** the contents of the original slice into it. The belowing example shows how to create a new slice **t** whihc doubles the capacity of **s**:\n```Go\nt := make([]byte, len(s), (cap(s) * 2))\nfor i:= range s {\n    t[i] = s[i]\n}\ns = t   //reassign s to t\n```\nThe loop can be replaced by the build-in function `copy()`, which copies the data from source and returns the number of elements copied:\n```Go\nfunc copy(dst, src []T) int\n```\nThe function **copy** supports copying between slices of different lengths (it will copy only up to the smaller number of elements) and the case that two slices refer to the same array. Using **copy**, the above double size code snippet can be rewritten as:\n```Go\nt := make([]byte, len(s), (cap(s) * 2))\ncopy(t, s)\ns = t\n```\nA common operation is to append new data to the tail of a slice:\n```Go\nfunc AppendByte(slice []byte, data ...type) []byte {\n    m := len(slice)\n    n := m + len(data)\n    if n > cap(slice) { //if the original capacity is not big enough     \n        newSlice := make([]byte, (n + 1) * 2)\n        copy(newSlice, slice)\n        slice = newSlice\n    }\n    slice = slice[0:n] //shrink the capacity to the length of data  \n    copy(slice[m:n], data)\n    return slice\n}\n```\nThis customized AppendByte function is really useful because we can fully control the size of a slice. However most programs do need such complete control. Go provides a build-in function `append()` which appends slice x to the end of slice s, expanding s if needed:\n```Go\nfunc append(s []T, x ...T) []T\n```\nUsing **...** to append one slice to the end of another:\n```Go\na := []string{\"aa\", \"bb\"}\nb := []string{\"cc\", \"dd\"}\na = append(a, b...) //same as append(a, b[0], b[1], b[2])   \n```\nAnother example of append:\n```Go\nfunc Filter(s []int, fn func(int) bool) []int {\n    var p []int // p == nil\n    for _, v := range s {\n        if fn(v) {\n            p = append(p, v)\n        }\n    }\n    return p\n}\n```\n\n\n\n\n","source":"_posts/Type-slice-in-Golang.md","raw":"---\ntitle: Slice in Golang\ndate: 2019-05-12 15:35:54\ntags: [Golang, Array, Slice]\nphotos: [\"../images/GoSlice.JPG\"]\n---\nThis article is a summary from [Andrew Gerrand's blog](https://blog.golang.org/go-slices-usage-and-internals)\n\nGolang has an unique type **slice** which is an abstraction built on top of Go's **array** type. They are really similar but providing different means of working with sequences of typed data. So to understand slices we must first understand arrays.<!-- more -->\n</br>\n\n## Arrays in Go\nAn array in Go has to specify its **length** and **element type**. **The size of the array is fixed and its length is part of its type**. For example `[4]int` and `[5]int` are distinct and have different types even though they all store integers. And contrary to **C/C++**, the initial value of an array will be filled with **0** if it is not initialized.\n```Go\nvar a [4]int\na[0] = 1\ni := a[0]\nj := a[1]\n//i == 1\n//j == 0\n```\nGo's arrays are values. **An array variable denotes the entire array**; it is not a pointer to the first array element (as would be the case in C/C++). This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that's a pointer to an array, not an array)\n\nAn array literal can be specified like so:\n```Go\nb := [2]string{\"aa\", \"bb\"}\n```\nOr, you can have the compiler counting the array elements for you:\n```Go\nb := [...]string{\"aa\", \"bb\"}\n```\nIn both cases, the type of b is **[2]string**.\n</br>\n\n## Slices in Go\nArrays are a bit inflexible, so you don't see them too often in the code. Slices, though, are everywhere. Unlike an array type, a slice type has no specific length:\n```Go\nb := []string{\"aa\", \"bb\"}\n```\nWe can use build-in function `make()` to define a slice:\n```Go\nfunc make([]T, len, cap) []T\n```\n**T** represent the type of the elements. Function **make** accepts type, length and capacity(optional) as parameters. When it is called, **make** will allocate an array and returns a slice that refers to that array\n```Go\nvar s []byte\ns = make([]byte, 5, 5)\n//s == []byte{0, 0, 0, 0, 0}\n```\nIf **cap** is not specified, it will be init as the value of **len**. We can use the build-in functions `len()` and `cap()` to check the length and capacity of a slice:\n```Go\nlen(s) == 5\ncap(s) == 5\n```\nThe zero value of a slice is **nil**. The len and cap functions will both return **0** for a nil slice.\n\nA slice can also be formed by \"slicing\" an existing slice or array, for example, the expression b[1:4] creates a slice including elements 1 through 3 of b:\n```Go\nb := []byte{'a', 'b', 'c', 'd', 'e', 'f'}\n// b[1:4] == []byte{'b', 'c', 'd'}, sharing the same storage as b\n```\nThe start and end indices of a slice expression are optional; they default to zero and the slice's length respectively:\n```Go\n// b[:2] == []byte{'a', 'b'}\n// b[2:] == []byte{'c', 'd', 'e', 'f'}\n// b[:] == b\n```\nThis is also the syntax to create a slice given an array:\n```Go\nx := [3]string{\"Лайка\", \"Белка\", \"Стрелка\"}\ns := x[:] // a slice referencing the storage of x\n```\n\nSlicing does not copy the slice's data. It creates a new slice value that points to the original array. This makes slice operations as efficient as manipulating array indices. Therefore, modifying the elements of a re-slice modifies the elements of the original slice:\n```Go\nd := []byte{'a', 'b', 'c', 'd'}\ne := d[2:]\n// e == []byte{'c', 'd'}\n\n// now change the re-slice will also change the original slice  \ne[1] = 'm'\n// e == []byte{'c', 'm'}\n// d == []byte{'a', 'b', 'c', 'm'}\n```\nA slice cannot be grown beyond its capacity. Attempting to do so will cause a ***runtime panic***, just as when indexing outside the bounds of a slice or array. Similarly, slices cannot be re-sliced below zero to access earlier elements in the array.\n</br>\n\n## Double the capacity of a slice\nTo increase the capacity of a slice, we must create a new, larger slice and **copy** the contents of the original slice into it. The belowing example shows how to create a new slice **t** whihc doubles the capacity of **s**:\n```Go\nt := make([]byte, len(s), (cap(s) * 2))\nfor i:= range s {\n    t[i] = s[i]\n}\ns = t   //reassign s to t\n```\nThe loop can be replaced by the build-in function `copy()`, which copies the data from source and returns the number of elements copied:\n```Go\nfunc copy(dst, src []T) int\n```\nThe function **copy** supports copying between slices of different lengths (it will copy only up to the smaller number of elements) and the case that two slices refer to the same array. Using **copy**, the above double size code snippet can be rewritten as:\n```Go\nt := make([]byte, len(s), (cap(s) * 2))\ncopy(t, s)\ns = t\n```\nA common operation is to append new data to the tail of a slice:\n```Go\nfunc AppendByte(slice []byte, data ...type) []byte {\n    m := len(slice)\n    n := m + len(data)\n    if n > cap(slice) { //if the original capacity is not big enough     \n        newSlice := make([]byte, (n + 1) * 2)\n        copy(newSlice, slice)\n        slice = newSlice\n    }\n    slice = slice[0:n] //shrink the capacity to the length of data  \n    copy(slice[m:n], data)\n    return slice\n}\n```\nThis customized AppendByte function is really useful because we can fully control the size of a slice. However most programs do need such complete control. Go provides a build-in function `append()` which appends slice x to the end of slice s, expanding s if needed:\n```Go\nfunc append(s []T, x ...T) []T\n```\nUsing **...** to append one slice to the end of another:\n```Go\na := []string{\"aa\", \"bb\"}\nb := []string{\"cc\", \"dd\"}\na = append(a, b...) //same as append(a, b[0], b[1], b[2])   \n```\nAnother example of append:\n```Go\nfunc Filter(s []int, fn func(int) bool) []int {\n    var p []int // p == nil\n    for _, v := range s {\n        if fn(v) {\n            p = append(p, v)\n        }\n    }\n    return p\n}\n```\n\n\n\n\n","slug":"Type-slice-in-Golang","published":1,"updated":"2021-01-07T21:13:20.403Z","comments":1,"layout":"post","link":"","_id":"ckjnncqik002e5opu7kocglk8","content":"<p>This article is a summary from <a href=\"https://blog.golang.org/go-slices-usage-and-internals\">Andrew Gerrand’s blog</a></p>\n<p>Golang has an unique type <strong>slice</strong> which is an abstraction built on top of Go’s <strong>array</strong> type. They are really similar but providing different means of working with sequences of typed data. So to understand slices we must first understand arrays.<a id=\"more\"></a><br><br></p>\n<h2 id=\"Arrays-in-Go\"><a href=\"#Arrays-in-Go\" class=\"headerlink\" title=\"Arrays in Go\"></a>Arrays in Go</h2><p>An array in Go has to specify its <strong>length</strong> and <strong>element type</strong>. <strong>The size of the array is fixed and its length is part of its type</strong>. For example <code>[4]int</code> and <code>[5]int</code> are distinct and have different types even though they all store integers. And contrary to <strong>C/C++</strong>, the initial value of an array will be filled with <strong>0</strong> if it is not initialized.</p>\n<pre><code class=\"Go\">var a [4]int\na[0] = 1\ni := a[0]\nj := a[1]\n//i == 1\n//j == 0\n</code></pre>\n<p>Go’s arrays are values. <strong>An array variable denotes the entire array</strong>; it is not a pointer to the first array element (as would be the case in C/C++). This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that’s a pointer to an array, not an array)</p>\n<p>An array literal can be specified like so:</p>\n<pre><code class=\"Go\">b := [2]string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\n</code></pre>\n<p>Or, you can have the compiler counting the array elements for you:</p>\n<pre><code class=\"Go\">b := [...]string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\n</code></pre>\n<p>In both cases, the type of b is <strong>[2]string</strong>.<br><br></p>\n<h2 id=\"Slices-in-Go\"><a href=\"#Slices-in-Go\" class=\"headerlink\" title=\"Slices in Go\"></a>Slices in Go</h2><p>Arrays are a bit inflexible, so you don’t see them too often in the code. Slices, though, are everywhere. Unlike an array type, a slice type has no specific length:</p>\n<pre><code class=\"Go\">b := []string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\n</code></pre>\n<p>We can use build-in function <code>make()</code> to define a slice:</p>\n<pre><code class=\"Go\">func make([]T, len, cap) []T\n</code></pre>\n<p><strong>T</strong> represent the type of the elements. Function <strong>make</strong> accepts type, length and capacity(optional) as parameters. When it is called, <strong>make</strong> will allocate an array and returns a slice that refers to that array</p>\n<pre><code class=\"Go\">var s []byte\ns = make([]byte, 5, 5)\n//s == []byte&#123;0, 0, 0, 0, 0&#125;\n</code></pre>\n<p>If <strong>cap</strong> is not specified, it will be init as the value of <strong>len</strong>. We can use the build-in functions <code>len()</code> and <code>cap()</code> to check the length and capacity of a slice:</p>\n<pre><code class=\"Go\">len(s) == 5\ncap(s) == 5\n</code></pre>\n<p>The zero value of a slice is <strong>nil</strong>. The len and cap functions will both return <strong>0</strong> for a nil slice.</p>\n<p>A slice can also be formed by “slicing” an existing slice or array, for example, the expression b[1:4] creates a slice including elements 1 through 3 of b:</p>\n<pre><code class=\"Go\">b := []byte&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;&#125;\n// b[1:4] == []byte&#123;&#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;, sharing the same storage as b\n</code></pre>\n<p>The start and end indices of a slice expression are optional; they default to zero and the slice’s length respectively:</p>\n<pre><code class=\"Go\">// b[:2] == []byte&#123;&#39;a&#39;, &#39;b&#39;&#125;\n// b[2:] == []byte&#123;&#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;&#125;\n// b[:] == b\n</code></pre>\n<p>This is also the syntax to create a slice given an array:</p>\n<pre><code class=\"Go\">x := [3]string&#123;&quot;Лайка&quot;, &quot;Белка&quot;, &quot;Стрелка&quot;&#125;\ns := x[:] // a slice referencing the storage of x\n</code></pre>\n<p>Slicing does not copy the slice’s data. It creates a new slice value that points to the original array. This makes slice operations as efficient as manipulating array indices. Therefore, modifying the elements of a re-slice modifies the elements of the original slice:</p>\n<pre><code class=\"Go\">d := []byte&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;\ne := d[2:]\n// e == []byte&#123;&#39;c&#39;, &#39;d&#39;&#125;\n\n// now change the re-slice will also change the original slice  \ne[1] = &#39;m&#39;\n// e == []byte&#123;&#39;c&#39;, &#39;m&#39;&#125;\n// d == []byte&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;m&#39;&#125;\n</code></pre>\n<p>A slice cannot be grown beyond its capacity. Attempting to do so will cause a <strong><em>runtime panic</em></strong>, just as when indexing outside the bounds of a slice or array. Similarly, slices cannot be re-sliced below zero to access earlier elements in the array.<br><br></p>\n<h2 id=\"Double-the-capacity-of-a-slice\"><a href=\"#Double-the-capacity-of-a-slice\" class=\"headerlink\" title=\"Double the capacity of a slice\"></a>Double the capacity of a slice</h2><p>To increase the capacity of a slice, we must create a new, larger slice and <strong>copy</strong> the contents of the original slice into it. The belowing example shows how to create a new slice <strong>t</strong> whihc doubles the capacity of <strong>s</strong>:</p>\n<pre><code class=\"Go\">t := make([]byte, len(s), (cap(s) * 2))\nfor i:= range s &#123;\n    t[i] = s[i]\n&#125;\ns = t   //reassign s to t\n</code></pre>\n<p>The loop can be replaced by the build-in function <code>copy()</code>, which copies the data from source and returns the number of elements copied:</p>\n<pre><code class=\"Go\">func copy(dst, src []T) int\n</code></pre>\n<p>The function <strong>copy</strong> supports copying between slices of different lengths (it will copy only up to the smaller number of elements) and the case that two slices refer to the same array. Using <strong>copy</strong>, the above double size code snippet can be rewritten as:</p>\n<pre><code class=\"Go\">t := make([]byte, len(s), (cap(s) * 2))\ncopy(t, s)\ns = t\n</code></pre>\n<p>A common operation is to append new data to the tail of a slice:</p>\n<pre><code class=\"Go\">func AppendByte(slice []byte, data ...type) []byte &#123;\n    m := len(slice)\n    n := m + len(data)\n    if n &gt; cap(slice) &#123; //if the original capacity is not big enough     \n        newSlice := make([]byte, (n + 1) * 2)\n        copy(newSlice, slice)\n        slice = newSlice\n    &#125;\n    slice = slice[0:n] //shrink the capacity to the length of data  \n    copy(slice[m:n], data)\n    return slice\n&#125;\n</code></pre>\n<p>This customized AppendByte function is really useful because we can fully control the size of a slice. However most programs do need such complete control. Go provides a build-in function <code>append()</code> which appends slice x to the end of slice s, expanding s if needed:</p>\n<pre><code class=\"Go\">func append(s []T, x ...T) []T\n</code></pre>\n<p>Using <strong>…</strong> to append one slice to the end of another:</p>\n<pre><code class=\"Go\">a := []string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\nb := []string&#123;&quot;cc&quot;, &quot;dd&quot;&#125;\na = append(a, b...) //same as append(a, b[0], b[1], b[2])   \n</code></pre>\n<p>Another example of append:</p>\n<pre><code class=\"Go\">func Filter(s []int, fn func(int) bool) []int &#123;\n    var p []int // p == nil\n    for _, v := range s &#123;\n        if fn(v) &#123;\n            p = append(p, v)\n        &#125;\n    &#125;\n    return p\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>This article is a summary from <a href=\"https://blog.golang.org/go-slices-usage-and-internals\">Andrew Gerrand’s blog</a></p>\n<p>Golang has an unique type <strong>slice</strong> which is an abstraction built on top of Go’s <strong>array</strong> type. They are really similar but providing different means of working with sequences of typed data. So to understand slices we must first understand arrays.</p>","more":"<br><br><p></p>\n<h2 id=\"Arrays-in-Go\"><a href=\"#Arrays-in-Go\" class=\"headerlink\" title=\"Arrays in Go\"></a>Arrays in Go</h2><p>An array in Go has to specify its <strong>length</strong> and <strong>element type</strong>. <strong>The size of the array is fixed and its length is part of its type</strong>. For example <code>[4]int</code> and <code>[5]int</code> are distinct and have different types even though they all store integers. And contrary to <strong>C/C++</strong>, the initial value of an array will be filled with <strong>0</strong> if it is not initialized.</p>\n<pre><code class=\"Go\">var a [4]int\na[0] = 1\ni := a[0]\nj := a[1]\n//i == 1\n//j == 0\n</code></pre>\n<p>Go’s arrays are values. <strong>An array variable denotes the entire array</strong>; it is not a pointer to the first array element (as would be the case in C/C++). This means that when you assign or pass around an array value you will make a copy of its contents. (To avoid the copy you could pass a pointer to the array, but then that’s a pointer to an array, not an array)</p>\n<p>An array literal can be specified like so:</p>\n<pre><code class=\"Go\">b := [2]string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\n</code></pre>\n<p>Or, you can have the compiler counting the array elements for you:</p>\n<pre><code class=\"Go\">b := [...]string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\n</code></pre>\n<p>In both cases, the type of b is <strong>[2]string</strong>.<br><br></p>\n<h2 id=\"Slices-in-Go\"><a href=\"#Slices-in-Go\" class=\"headerlink\" title=\"Slices in Go\"></a>Slices in Go</h2><p>Arrays are a bit inflexible, so you don’t see them too often in the code. Slices, though, are everywhere. Unlike an array type, a slice type has no specific length:</p>\n<pre><code class=\"Go\">b := []string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\n</code></pre>\n<p>We can use build-in function <code>make()</code> to define a slice:</p>\n<pre><code class=\"Go\">func make([]T, len, cap) []T\n</code></pre>\n<p><strong>T</strong> represent the type of the elements. Function <strong>make</strong> accepts type, length and capacity(optional) as parameters. When it is called, <strong>make</strong> will allocate an array and returns a slice that refers to that array</p>\n<pre><code class=\"Go\">var s []byte\ns = make([]byte, 5, 5)\n//s == []byte&#123;0, 0, 0, 0, 0&#125;\n</code></pre>\n<p>If <strong>cap</strong> is not specified, it will be init as the value of <strong>len</strong>. We can use the build-in functions <code>len()</code> and <code>cap()</code> to check the length and capacity of a slice:</p>\n<pre><code class=\"Go\">len(s) == 5\ncap(s) == 5\n</code></pre>\n<p>The zero value of a slice is <strong>nil</strong>. The len and cap functions will both return <strong>0</strong> for a nil slice.</p>\n<p>A slice can also be formed by “slicing” an existing slice or array, for example, the expression b[1:4] creates a slice including elements 1 through 3 of b:</p>\n<pre><code class=\"Go\">b := []byte&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;&#125;\n// b[1:4] == []byte&#123;&#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;, sharing the same storage as b\n</code></pre>\n<p>The start and end indices of a slice expression are optional; they default to zero and the slice’s length respectively:</p>\n<pre><code class=\"Go\">// b[:2] == []byte&#123;&#39;a&#39;, &#39;b&#39;&#125;\n// b[2:] == []byte&#123;&#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;&#125;\n// b[:] == b\n</code></pre>\n<p>This is also the syntax to create a slice given an array:</p>\n<pre><code class=\"Go\">x := [3]string&#123;&quot;Лайка&quot;, &quot;Белка&quot;, &quot;Стрелка&quot;&#125;\ns := x[:] // a slice referencing the storage of x\n</code></pre>\n<p>Slicing does not copy the slice’s data. It creates a new slice value that points to the original array. This makes slice operations as efficient as manipulating array indices. Therefore, modifying the elements of a re-slice modifies the elements of the original slice:</p>\n<pre><code class=\"Go\">d := []byte&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;&#125;\ne := d[2:]\n// e == []byte&#123;&#39;c&#39;, &#39;d&#39;&#125;\n\n// now change the re-slice will also change the original slice  \ne[1] = &#39;m&#39;\n// e == []byte&#123;&#39;c&#39;, &#39;m&#39;&#125;\n// d == []byte&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;m&#39;&#125;\n</code></pre>\n<p>A slice cannot be grown beyond its capacity. Attempting to do so will cause a <strong><em>runtime panic</em></strong>, just as when indexing outside the bounds of a slice or array. Similarly, slices cannot be re-sliced below zero to access earlier elements in the array.<br><br></p>\n<h2 id=\"Double-the-capacity-of-a-slice\"><a href=\"#Double-the-capacity-of-a-slice\" class=\"headerlink\" title=\"Double the capacity of a slice\"></a>Double the capacity of a slice</h2><p>To increase the capacity of a slice, we must create a new, larger slice and <strong>copy</strong> the contents of the original slice into it. The belowing example shows how to create a new slice <strong>t</strong> whihc doubles the capacity of <strong>s</strong>:</p>\n<pre><code class=\"Go\">t := make([]byte, len(s), (cap(s) * 2))\nfor i:= range s &#123;\n    t[i] = s[i]\n&#125;\ns = t   //reassign s to t\n</code></pre>\n<p>The loop can be replaced by the build-in function <code>copy()</code>, which copies the data from source and returns the number of elements copied:</p>\n<pre><code class=\"Go\">func copy(dst, src []T) int\n</code></pre>\n<p>The function <strong>copy</strong> supports copying between slices of different lengths (it will copy only up to the smaller number of elements) and the case that two slices refer to the same array. Using <strong>copy</strong>, the above double size code snippet can be rewritten as:</p>\n<pre><code class=\"Go\">t := make([]byte, len(s), (cap(s) * 2))\ncopy(t, s)\ns = t\n</code></pre>\n<p>A common operation is to append new data to the tail of a slice:</p>\n<pre><code class=\"Go\">func AppendByte(slice []byte, data ...type) []byte &#123;\n    m := len(slice)\n    n := m + len(data)\n    if n &gt; cap(slice) &#123; //if the original capacity is not big enough     \n        newSlice := make([]byte, (n + 1) * 2)\n        copy(newSlice, slice)\n        slice = newSlice\n    &#125;\n    slice = slice[0:n] //shrink the capacity to the length of data  \n    copy(slice[m:n], data)\n    return slice\n&#125;\n</code></pre>\n<p>This customized AppendByte function is really useful because we can fully control the size of a slice. However most programs do need such complete control. Go provides a build-in function <code>append()</code> which appends slice x to the end of slice s, expanding s if needed:</p>\n<pre><code class=\"Go\">func append(s []T, x ...T) []T\n</code></pre>\n<p>Using <strong>…</strong> to append one slice to the end of another:</p>\n<pre><code class=\"Go\">a := []string&#123;&quot;aa&quot;, &quot;bb&quot;&#125;\nb := []string&#123;&quot;cc&quot;, &quot;dd&quot;&#125;\na = append(a, b...) //same as append(a, b[0], b[1], b[2])   \n</code></pre>\n<p>Another example of append:</p>\n<pre><code class=\"Go\">func Filter(s []int, fn func(int) bool) []int &#123;\n    var p []int // p == nil\n    for _, v := range s &#123;\n        if fn(v) &#123;\n            p = append(p, v)\n        &#125;\n    &#125;\n    return p\n&#125;\n</code></pre>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2021-01-07T21:13:20.404Z","updated":"2021-01-07T21:13:20.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjnncqil002g5opu48l05ldq","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"如何用VS Code免翻墙听网易云音乐","date":"2019-05-22T20:27:00.000Z","photos":["../images/neteaseMusic.JPG"],"_content":"在墙外打开网易云音乐发现全是灰色的？ 抱歉您所在区域无法播放？ 该资源暂无版权？ 需要vip？\nVS Code**一行script**全搞定～～ <!-- more -->\n\n- 打开VS Code\n\n- 左侧 Extensions 搜索 Netease Music (VSC Netease Music) 或者点[这里](https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music)\n\n- 点击 Install 后重启 VS Code\n\n- 作者提供了基于 VS Code 自身插件工具 Webview 实现的通过替换 electron 动态链接库翻墙的插件, 有详细的[中文文档](https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music), 这里 **Unix Shell** 用户（包括 **MacOS**）可以直接在 **Terminal** （任意dir）输入以下script:\n```\ncurl https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python\n```\n  script 输出结果为:\n```\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3060  100  3060    0     0   8496      0 --:--:-- --:--:-- --:--:--  8476  \nvscode 1.34.0 x64\nelectron 3.1.8\ndownload well\nreplace done\nremove temp\n```\n\n- 替换完毕后打开 VS Code, 上方工具栏 Go -> Go to file... 或者 `Command(⌘) P`, 输入：\n```\n>NeteaseMusic: Start\n```\n  等待 editor 跳出 **Please preserve this webview tab** 后就可以使用所有网易云的功能了, 注意这个tab页面必须要保留（不能关闭）\n\n- 使用时直接`Command(⌘) P**`后输入命令即可, 命令都是以 `>NeteaseMusic`起头, 输入 `>ne` 后VS Code会自动跳出并补齐可行指令, 甚至还可以登陆收藏查看评论","source":"_posts/如何用VS-Code免翻墙听网易云音乐.md","raw":"---\ntitle: 如何用VS Code免翻墙听网易云音乐\ndate: 2019-05-22 16:27:00\ntags: [VS Code, NeteaseMusic, 网易云]\nphotos: [\"../images/neteaseMusic.JPG\"]\n---\n在墙外打开网易云音乐发现全是灰色的？ 抱歉您所在区域无法播放？ 该资源暂无版权？ 需要vip？\nVS Code**一行script**全搞定～～ <!-- more -->\n\n- 打开VS Code\n\n- 左侧 Extensions 搜索 Netease Music (VSC Netease Music) 或者点[这里](https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music)\n\n- 点击 Install 后重启 VS Code\n\n- 作者提供了基于 VS Code 自身插件工具 Webview 实现的通过替换 electron 动态链接库翻墙的插件, 有详细的[中文文档](https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music), 这里 **Unix Shell** 用户（包括 **MacOS**）可以直接在 **Terminal** （任意dir）输入以下script:\n```\ncurl https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python\n```\n  script 输出结果为:\n```\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  3060  100  3060    0     0   8496      0 --:--:-- --:--:-- --:--:--  8476  \nvscode 1.34.0 x64\nelectron 3.1.8\ndownload well\nreplace done\nremove temp\n```\n\n- 替换完毕后打开 VS Code, 上方工具栏 Go -> Go to file... 或者 `Command(⌘) P`, 输入：\n```\n>NeteaseMusic: Start\n```\n  等待 editor 跳出 **Please preserve this webview tab** 后就可以使用所有网易云的功能了, 注意这个tab页面必须要保留（不能关闭）\n\n- 使用时直接`Command(⌘) P**`后输入命令即可, 命令都是以 `>NeteaseMusic`起头, 输入 `>ne` 后VS Code会自动跳出并补齐可行指令, 甚至还可以登陆收藏查看评论","slug":"如何用VS-Code免翻墙听网易云音乐","published":1,"updated":"2021-01-07T21:13:20.404Z","comments":1,"layout":"post","link":"","_id":"ckjnncqip002h5opu8zb62xv2","content":"<p>在墙外打开网易云音乐发现全是灰色的？ 抱歉您所在区域无法播放？ 该资源暂无版权？ 需要vip？<br>VS Code<strong>一行script</strong>全搞定～～ <a id=\"more\"></a></p>\n<ul>\n<li><p>打开VS Code</p>\n</li>\n<li><p>左侧 Extensions 搜索 Netease Music (VSC Netease Music) 或者点<a href=\"https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music\">这里</a></p>\n</li>\n<li><p>点击 Install 后重启 VS Code</p>\n</li>\n<li><p>作者提供了基于 VS Code 自身插件工具 Webview 实现的通过替换 electron 动态链接库翻墙的插件, 有详细的<a href=\"https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music\">中文文档</a>, 这里 <strong>Unix Shell</strong> 用户（包括 <strong>MacOS</strong>）可以直接在 <strong>Terminal</strong> （任意dir）输入以下script:</p>\n<pre><code>curl https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python\n</code></pre><p>script 输出结果为:</p>\n<pre><code>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100  3060  100  3060    0     0   8496      0 --:--:-- --:--:-- --:--:--  8476  \nvscode 1.34.0 x64\nelectron 3.1.8\ndownload well\nreplace done\nremove temp\n</code></pre></li>\n<li><p>替换完毕后打开 VS Code, 上方工具栏 Go -&gt; Go to file… 或者 <code>Command(⌘) P</code>, 输入：</p>\n<pre><code>&gt;NeteaseMusic: Start\n</code></pre><p>等待 editor 跳出 <strong>Please preserve this webview tab</strong> 后就可以使用所有网易云的功能了, 注意这个tab页面必须要保留（不能关闭）</p>\n</li>\n<li><p>使用时直接<code>Command(⌘) P**</code>后输入命令即可, 命令都是以 <code>&gt;NeteaseMusic</code>起头, 输入 <code>&gt;ne</code> 后VS Code会自动跳出并补齐可行指令, 甚至还可以登陆收藏查看评论</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在墙外打开网易云音乐发现全是灰色的？ 抱歉您所在区域无法播放？ 该资源暂无版权？ 需要vip？<br>VS Code<strong>一行script</strong>全搞定～～</p>","more":"<p></p>\n<ul>\n<li><p>打开VS Code</p>\n</li>\n<li><p>左侧 Extensions 搜索 Netease Music (VSC Netease Music) 或者点<a href=\"https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music\">这里</a></p>\n</li>\n<li><p>点击 Install 后重启 VS Code</p>\n</li>\n<li><p>作者提供了基于 VS Code 自身插件工具 Webview 实现的通过替换 electron 动态链接库翻墙的插件, 有详细的<a href=\"https://marketplace.visualstudio.com/items?itemName=nondanee.vsc-netease-music\">中文文档</a>, 这里 <strong>Unix Shell</strong> 用户（包括 <strong>MacOS</strong>）可以直接在 <strong>Terminal</strong> （任意dir）输入以下script:</p>\n<pre><code>curl https://gist.githubusercontent.com/nondanee/f157bbbccecfe29e48d87273cd02e213/raw | python\n</code></pre><p>script 输出结果为:</p>\n<pre><code>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100  3060  100  3060    0     0   8496      0 --:--:-- --:--:-- --:--:--  8476  \nvscode 1.34.0 x64\nelectron 3.1.8\ndownload well\nreplace done\nremove temp\n</code></pre></li>\n<li><p>替换完毕后打开 VS Code, 上方工具栏 Go -&gt; Go to file… 或者 <code>Command(⌘) P</code>, 输入：</p>\n<pre><code>&gt;NeteaseMusic: Start\n</code></pre><p>等待 editor 跳出 <strong>Please preserve this webview tab</strong> 后就可以使用所有网易云的功能了, 注意这个tab页面必须要保留（不能关闭）</p>\n</li>\n<li><p>使用时直接<code>Command(⌘) P**</code>后输入命令即可, 命令都是以 <code>&gt;NeteaseMusic</code>起头, 输入 <code>&gt;ne</code> 后VS Code会自动跳出并补齐可行指令, 甚至还可以登陆收藏查看评论</p>\n</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/Computer-Vision-Stereo/stereo-dataset.png","slug":"stereo-dataset.png","post":"ckjnncqhs00055opu0paz5z9t","modified":0,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-image-integral.PNG","slug":"stereo-image-integral.PNG","post":"ckjnncqhs00055opu0paz5z9t","modified":0,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-intuition.PNG","slug":"stereo-intuition.PNG","post":"ckjnncqhs00055opu0paz5z9t","modified":0,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-SSD.png","slug":"stereo-SSD.png","post":"ckjnncqhs00055opu0paz5z9t","modified":0,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-window-based-intensity.png","slug":"stereo-window-based-intensity.png","post":"ckjnncqhs00055opu0paz5z9t","modified":0,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-window-based-result.png","slug":"stereo-window-based-result.png","post":"ckjnncqhs00055opu0paz5z9t","modified":0,"renderable":0},{"_id":"source/_posts/An-Brew-Error-When-Upgrade-Mongodb-to-4-2/mongodb_cover.JPG","slug":"mongodb_cover.JPG","post":"ckjnncqhq00035opuf3bg3q0l","modified":0,"renderable":0},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/cpudiagram.png","slug":"cpudiagram.png","post":"ckjnncqhv000a5opua497dcr0","modified":0,"renderable":0},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/Spark-Streaming-flow-for-offsets.png","slug":"Spark-Streaming-flow-for-offsets.png","post":"ckjnncqhv000a5opua497dcr0","modified":0,"renderable":0},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/sparkworkflow.png","slug":"sparkworkflow.png","post":"ckjnncqhv000a5opua497dcr0","modified":0,"renderable":0},{"_id":"source/_posts/Implement-Zero-Data-Loss-in-Spark-Streaming/wal_spark.png","slug":"wal_spark.png","post":"ckjnncqhv000a5opua497dcr0","modified":0,"renderable":0},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_after_second_insert.png","slug":"LRU_after_second_insert.png","post":"ckjnncqhw000c5opub9vegfqs","modified":0,"renderable":0},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_before_second_insert.png","slug":"LRU_before_second_insert.png","post":"ckjnncqhw000c5opub9vegfqs","modified":0,"renderable":0},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_first_insert.png","slug":"LRU_first_insert.png","post":"ckjnncqhw000c5opub9vegfqs","modified":0,"renderable":0},{"_id":"source/_posts/Least-Recently-Used-LRU-Cache-Implementation/LRU_init_node.png","slug":"LRU_init_node.png","post":"ckjnncqhw000c5opub9vegfqs","modified":0,"renderable":0},{"_id":"source/_posts/Min-Heap-Python-Implementation/Min_Heap_Insert.png","slug":"Min_Heap_Insert.png","post":"ckjnncqhz000f5opu616w4mzu","modified":0,"renderable":0},{"_id":"source/_posts/Min-Heap-Python-Implementation/Min_Heap_List.png","slug":"Min_Heap_List.png","post":"ckjnncqhz000f5opu616w4mzu","modified":0,"renderable":0},{"_id":"source/_posts/Min-Heap-Python-Implementation/Min_Heap_Pop.png","slug":"Min_Heap_Pop.png","post":"ckjnncqhz000f5opu616w4mzu","modified":0,"renderable":0},{"_id":"source/_posts/Prefix-Tree/prefix_tree.JPG","slug":"prefix_tree.JPG","post":"ckjnncqi1000k5opu9ovl53au","modified":0,"renderable":0},{"_id":"source/_posts/Segment-Tree/Full_Binary_Tree.png","slug":"Full_Binary_Tree.png","post":"ckjnncqi2000m5opu9rc61g5h","modified":0,"renderable":0},{"_id":"source/_posts/Segment-Tree/Segment_Tree_Left_Insert.png","slug":"Segment_Tree_Left_Insert.png","post":"ckjnncqi2000m5opu9rc61g5h","modified":0,"renderable":0},{"_id":"source/_posts/Segment-Tree/Segment_Tree_Right_Insert.png","slug":"Segment_Tree_Right_Insert.png","post":"ckjnncqi2000m5opu9rc61g5h","modified":0,"renderable":0},{"_id":"source/_posts/Segment-Tree/Segment_Tree_Split_Insert.png","slug":"Segment_Tree_Split_Insert.png","post":"ckjnncqi2000m5opu9rc61g5h","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/Banana_PrefixTree.JPG","slug":"Banana_PrefixTree.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/Banana_SuffixTree.JPG","slug":"Banana_SuffixTree.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/Compressed_PrefixTree.JPG","slug":"Compressed_PrefixTree.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/PrefixTree_a.JPG","slug":"PrefixTree_a.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/PrefixTree_ab.JPG","slug":"PrefixTree_ab.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/PrefixTree_abc.JPG","slug":"PrefixTree_abc.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/PrefixTree_abca.JPG","slug":"PrefixTree_abca.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/PrefixTree_StringProblem.JPG","slug":"PrefixTree_StringProblem.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/prefix_tree.JPG","slug":"prefix_tree.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-a.JPG","slug":"SuffixTree-Sample-a.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-ab.JPG","slug":"SuffixTree-Sample-ab.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abc.JPG","slug":"SuffixTree-Sample-abc.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcab.JPG","slug":"SuffixTree-Sample-abcab.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx-2.JPG","slug":"SuffixTree-Sample-abcabx-2.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx-3.JPG","slug":"SuffixTree-Sample-abcabx-3.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx-4.JPG","slug":"SuffixTree-Sample-abcabx-4.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabx.JPG","slug":"SuffixTree-Sample-abcabx.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-1.JPG","slug":"SuffixTree-Sample-abcabxabc-10-1.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-2.JPG","slug":"SuffixTree-Sample-abcabxabc-10-2.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-3.JPG","slug":"SuffixTree-Sample-abcabxabc-10-3.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc-10-4.JPG","slug":"SuffixTree-Sample-abcabxabc-10-4.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Suffix-Tree/SuffixTree-Sample-abcabxabc.JPG","slug":"SuffixTree-Sample-abcabxabc.JPG","post":"ckjnncqij002d5opu8hog7oj1","modified":0,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-scan-line-graph.PNG","slug":"stereo-scan-line-graph.PNG","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-scan-line-result1.png","slug":"stereo-scan-line-result1.png","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-scan-line-result2.png","slug":"stereo-scan-line-result2.png","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-full-grid-graph.PNG","slug":"stereo-full-grid-graph.PNG","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-graph-cut.PNG","slug":"stereo-graph-cut.PNG","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-full-grid-result1.png","slug":"stereo-full-grid-result1.png","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-test.png","slug":"stereo-test.png","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0},{"_id":"source/_posts/Computer-Vision-Stereo/stereo-test-result.png","slug":"stereo-test-result.png","post":"ckjnncqhs00055opu0paz5z9t","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckjnncqhn00015opu6xyuf0ww","tag_id":"ckjnncqhr00045opuel2cab1b","_id":"ckjnncqi0000g5opub45j2w07"},{"post_id":"ckjnncqhn00015opu6xyuf0ww","tag_id":"ckjnncqhu00085opue0nlh8p2","_id":"ckjnncqi0000i5opu6sf2bmlr"},{"post_id":"ckjnncqhn00015opu6xyuf0ww","tag_id":"ckjnncqhw000b5opuel0e1eq5","_id":"ckjnncqi1000l5opu7nrc8fkx"},{"post_id":"ckjnncqhq00035opuf3bg3q0l","tag_id":"ckjnncqhy000e5opu8bnq2opx","_id":"ckjnncqi2000o5opu1bc17u72"},{"post_id":"ckjnncqhq00035opuf3bg3q0l","tag_id":"ckjnncqi0000j5opu8m1s4iz9","_id":"ckjnncqi3000p5opuhzfe6eul"},{"post_id":"ckjnncqht00065opu2pfyb32q","tag_id":"ckjnncqi2000n5opu7l0w2ah2","_id":"ckjnncqi3000t5opuhrl7a3fn"},{"post_id":"ckjnncqht00065opu2pfyb32q","tag_id":"ckjnncqi3000q5opua9rg9h3a","_id":"ckjnncqi3000u5opuc187686r"},{"post_id":"ckjnncqht00065opu2pfyb32q","tag_id":"ckjnncqi3000r5opufqum2dd5","_id":"ckjnncqi4000w5opu4kd35gsw"},{"post_id":"ckjnncqhu00075opuc2uy15aa","tag_id":"ckjnncqi3000s5opu3y3y299g","_id":"ckjnncqi6000z5opu1ik29ugo"},{"post_id":"ckjnncqhu00075opuc2uy15aa","tag_id":"ckjnncqi4000v5opua8l89831","_id":"ckjnncqi600105opubiqudo4p"},{"post_id":"ckjnncqhu00075opuc2uy15aa","tag_id":"ckjnncqi4000x5opuh8856nzm","_id":"ckjnncqi700125opueihx303u"},{"post_id":"ckjnncqhv00095opu4qjq4kav","tag_id":"ckjnncqi4000y5opucac24rcq","_id":"ckjnncqi700145opu5lsl74cx"},{"post_id":"ckjnncqhv00095opu4qjq4kav","tag_id":"ckjnncqi600115opuffligsrz","_id":"ckjnncqi700155opuh3rkcrs0"},{"post_id":"ckjnncqhv000a5opua497dcr0","tag_id":"ckjnncqi700135opufz9ye9s4","_id":"ckjnncqi900185opuhl8jdn8b"},{"post_id":"ckjnncqhv000a5opua497dcr0","tag_id":"ckjnncqi2000n5opu7l0w2ah2","_id":"ckjnncqi900195opu201q2saw"},{"post_id":"ckjnncqhw000c5opub9vegfqs","tag_id":"ckjnncqi800175opuhr0r8reo","_id":"ckjnncqia001d5opucscf8xcq"},{"post_id":"ckjnncqhw000c5opub9vegfqs","tag_id":"ckjnncqi9001a5opu5hry03hj","_id":"ckjnncqia001e5opu5s0v5uby"},{"post_id":"ckjnncqhw000c5opub9vegfqs","tag_id":"ckjnncqi9001b5opu54et8rk2","_id":"ckjnncqia001g5opufttraf6t"},{"post_id":"ckjnncqhy000d5opub7bo7mgg","tag_id":"ckjnncqi9001c5opueq3lffds","_id":"ckjnncqib001k5opu06h4eblp"},{"post_id":"ckjnncqhy000d5opub7bo7mgg","tag_id":"ckjnncqia001f5opu8lhs1hdg","_id":"ckjnncqib001l5opu9qiefcff"},{"post_id":"ckjnncqhy000d5opub7bo7mgg","tag_id":"ckjnncqia001h5opu9oeyggvq","_id":"ckjnncqib001n5opudfrr052a"},{"post_id":"ckjnncqhy000d5opub7bo7mgg","tag_id":"ckjnncqi600115opuffligsrz","_id":"ckjnncqib001o5opu6s7w85ah"},{"post_id":"ckjnncqhz000f5opu616w4mzu","tag_id":"ckjnncqia001j5opud7m70p4n","_id":"ckjnncqic001r5opu7p183ooa"},{"post_id":"ckjnncqhz000f5opu616w4mzu","tag_id":"ckjnncqi9001a5opu5hry03hj","_id":"ckjnncqic001s5opu3fmv1cku"},{"post_id":"ckjnncqhz000f5opu616w4mzu","tag_id":"ckjnncqi9001b5opu54et8rk2","_id":"ckjnncqic001u5opufr763omo"},{"post_id":"ckjnncqi0000h5opuh9wt9bg0","tag_id":"ckjnncqic001q5opuam53ajip","_id":"ckjnncqid001y5opuh9cb834a"},{"post_id":"ckjnncqi0000h5opuh9wt9bg0","tag_id":"ckjnncqic001t5opu00ov351g","_id":"ckjnncqid001z5opub5rp2un1"},{"post_id":"ckjnncqi0000h5opuh9wt9bg0","tag_id":"ckjnncqic001v5opubthlggxd","_id":"ckjnncqid00215opu2qj22wv7"},{"post_id":"ckjnncqi0000h5opuh9wt9bg0","tag_id":"ckjnncqic001w5opu4vit3y63","_id":"ckjnncqid00225opudx6rh0lk"},{"post_id":"ckjnncqi1000k5opu9ovl53au","tag_id":"ckjnncqid001x5opub63m37x9","_id":"ckjnncqie00255opuae8k4mgi"},{"post_id":"ckjnncqi1000k5opu9ovl53au","tag_id":"ckjnncqi9001a5opu5hry03hj","_id":"ckjnncqie00265opuhxjgd7yl"},{"post_id":"ckjnncqi1000k5opu9ovl53au","tag_id":"ckjnncqi9001b5opu54et8rk2","_id":"ckjnncqig00285opu5h7v5v52"},{"post_id":"ckjnncqi2000m5opu9rc61g5h","tag_id":"ckjnncqie00245opue0kfhko4","_id":"ckjnncqig002a5opueqv83rks"},{"post_id":"ckjnncqi2000m5opu9rc61g5h","tag_id":"ckjnncqi9001a5opu5hry03hj","_id":"ckjnncqig002b5opuc0rr8af8"},{"post_id":"ckjnncqi2000m5opu9rc61g5h","tag_id":"ckjnncqi9001b5opu54et8rk2","_id":"ckjnncqig002c5opu5h8e0u4d"},{"post_id":"ckjnncqij002d5opu8hog7oj1","tag_id":"ckjnncqik002f5opu23mv4u4n","_id":"ckjnncqir002j5opub31ba5n2"},{"post_id":"ckjnncqij002d5opu8hog7oj1","tag_id":"ckjnncqi9001a5opu5hry03hj","_id":"ckjnncqir002k5opugrb5bb1d"},{"post_id":"ckjnncqij002d5opu8hog7oj1","tag_id":"ckjnncqi9001b5opu54et8rk2","_id":"ckjnncqis002m5opu7uh591jn"},{"post_id":"ckjnncqik002e5opu7kocglk8","tag_id":"ckjnncqi3000q5opua9rg9h3a","_id":"ckjnncqis002o5opucau1buft"},{"post_id":"ckjnncqik002e5opu7kocglk8","tag_id":"ckjnncqiq002i5opub6lc5d23","_id":"ckjnncqis002p5opu7ra83zhq"},{"post_id":"ckjnncqik002e5opu7kocglk8","tag_id":"ckjnncqir002l5opuf8ou7yh5","_id":"ckjnncqit002r5opueaf2ew8u"},{"post_id":"ckjnncqip002h5opu8zb62xv2","tag_id":"ckjnncqi4000y5opucac24rcq","_id":"ckjnncqit002s5opudeuk6oex"},{"post_id":"ckjnncqip002h5opu8zb62xv2","tag_id":"ckjnncqis002n5opug9tu4uib","_id":"ckjnncqit002t5opub3a8csvg"},{"post_id":"ckjnncqip002h5opu8zb62xv2","tag_id":"ckjnncqis002q5opu30dmeasu","_id":"ckjnncqit002u5opufwp6ax69"},{"post_id":"ckjnncqhs00055opu0paz5z9t","tag_id":"ckjnow6q7000014pudgwz19tn","_id":"ckjnow6qa000214pu2njt3in0"},{"post_id":"ckjnncqhs00055opu0paz5z9t","tag_id":"ckjnow6qa000114pu0cb039l3","_id":"ckjnow6qa000314puf9k4dqua"}],"Tag":[{"name":"Redux","_id":"ckjnncqhr00045opuel2cab1b"},{"name":"Saga","_id":"ckjnncqhu00085opue0nlh8p2"},{"name":"React","_id":"ckjnncqhw000b5opuel0e1eq5"},{"name":"Brew","_id":"ckjnncqhy000e5opu8bnq2opx"},{"name":"Mongo","_id":"ckjnncqi0000j5opu8m1s4iz9"},{"name":"Kafka","_id":"ckjnncqi2000n5opu7l0w2ah2"},{"name":"Golang","_id":"ckjnncqi3000q5opua9rg9h3a"},{"name":"Kerberos","_id":"ckjnncqi3000r5opufqum2dd5"},{"name":"CLI","_id":"ckjnncqi3000s5opu3y3y299g"},{"name":"Mac OS","_id":"ckjnncqi4000v5opua8l89831"},{"name":"port","_id":"ckjnncqi4000x5opuh8856nzm"},{"name":"VS Code","_id":"ckjnncqi4000y5opucac24rcq"},{"name":"NodeJS","_id":"ckjnncqi600115opuffligsrz"},{"name":"Spark","_id":"ckjnncqi700135opufz9ye9s4"},{"name":"LRU","_id":"ckjnncqi800175opuhr0r8reo"},{"name":"Algorithm","_id":"ckjnncqi9001a5opu5hry03hj"},{"name":"Data Structure","_id":"ckjnncqi9001b5opu54et8rk2"},{"name":"C++","_id":"ckjnncqi9001c5opueq3lffds"},{"name":"Java","_id":"ckjnncqia001f5opu8lhs1hdg"},{"name":"Python","_id":"ckjnncqia001h5opu9oeyggvq"},{"name":"Min Heap","_id":"ckjnncqia001j5opud7m70p4n"},{"name":"Lisp","_id":"ckjnncqic001q5opuam53ajip"},{"name":"Scheme","_id":"ckjnncqic001t5opu00ov351g"},{"name":"Prefix Notation","_id":"ckjnncqic001v5opubthlggxd"},{"name":"Functional Programming","_id":"ckjnncqic001w5opu4vit3y63"},{"name":"Prefix Tree","_id":"ckjnncqid001x5opub63m37x9"},{"name":"Segment Tree","_id":"ckjnncqie00245opue0kfhko4"},{"name":"Suffix Tree","_id":"ckjnncqik002f5opu23mv4u4n"},{"name":"Array","_id":"ckjnncqiq002i5opub6lc5d23"},{"name":"Slice","_id":"ckjnncqir002l5opuf8ou7yh5"},{"name":"NeteaseMusic","_id":"ckjnncqis002n5opug9tu4uib"},{"name":"网易云","_id":"ckjnncqis002q5opu30dmeasu"},{"name":"CV","_id":"ckjnow6q7000014pudgwz19tn"},{"name":"stereo","_id":"ckjnow6qa000114pu0cb039l3"}]}}